{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/touxiang.png","path":"images/touxiang.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/tubiao.png","path":"images/tubiao.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/click.js","path":"js/click.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/style.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681193389821},{"_id":"source/_posts/如何阅读一本书.md","hash":"1322d81f7a0a36274bb7fbb2371b5dd201394910","modified":1681193389822},{"_id":"source/about/index.md","hash":"bab90c2691cd6e5b5f423963783a6ec4faa369d4","modified":1681193389822},{"_id":"source/categories/index.md","hash":"f317250ffdce9e739211b0705b08972115e7a016","modified":1681193389822},{"_id":"source/read/index.md","hash":"6c1deba4027444ac9f94845e33f1ae309a343527","modified":1681193389823},{"_id":"source/schedule/index.md","hash":"7188f722bf8e3c090c3688e16cd18f925d1d8e0d","modified":1681193389823},{"_id":"source/tags/index.md","hash":"62343be057a3a43ea368b03fcf07cbc4c85f2862","modified":1681193389823},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1681193389851},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1681193389851},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1681193389852},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1681193389856},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1681193389857},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1681193389856},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1681193389857},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1681193389857},{"_id":"themes/next/_config.yml","hash":"cec3b0f519e0a929f09d995ae1b88d506026c285","modified":1681201074268},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1681193389858},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1681193389865},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1681193389893},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1681193389852},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1681193389852},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1681193389854},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1681193389854},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1681193389855},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1681193389855},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1681193389855},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1681193389855},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1681193389855},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1681193389856},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1681193389856},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1681193389858},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1681193389859},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1681193389859},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1681193389859},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1681193389860},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1681193389860},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1681193389860},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1681193389860},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1681193389861},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1681193389865},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1681193389866},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1681193389866},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1681193389866},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1681193389866},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1681193389867},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1681193389867},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1681193389867},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1681193389867},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1681193389868},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1681193389868},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1681193389868},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1681193389868},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1681193389869},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1681193389870},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1681193389870},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1681193389870},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1681193389870},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1681193389871},{"_id":"themes/next/languages/zh-CN.yml","hash":"ae5bd475eff141f9aea13cb0f8ae55f246d021dd","modified":1681197741783},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1681193389871},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1681193389871},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1681193389899},{"_id":"themes/next/layout/_layout.swig","hash":"7f9a3a7274f8d0d422c68800a0a1b6f5aba513b4","modified":1681193389872},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1681193389891},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1681193389892},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1681193389892},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1681193389892},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1681193389893},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1681193389892},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1681193389853},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1681193389853},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1681193389853},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1681193389854},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1681193389861},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1681193389861},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1681193389862},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1681193389862},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1681193389862},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1681193389863},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1681193389863},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1681193389863},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1681193389864},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1681193389864},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1681193389864},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1681193389864},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1681193389865},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1681193389893},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1681193389897},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1681193389897},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1681193389897},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1681193389898},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1681193389898},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1681193389898},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1681193389899},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1681193389899},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1681193389899},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1681193389900},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1681193389900},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1681193389900},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1681193389900},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1681193389901},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1681193389901},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1681193389901},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1681193389901},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1681193389902},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1681193389902},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1681193389872},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1681193389872},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1681193389872},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1681193389873},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1681193389873},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1681193389876},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1681193389876},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1681193389879},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1681193389880},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1681193389880},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1681193389881},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1681193389882},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1681193389882},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1681193389884},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1681193389886},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1681193389887},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1681193389888},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1681193389902},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1681193389941},{"_id":"themes/next/source/css/main.styl","hash":"81d0e6ed4e3fe016f2b6f38039e9a9bda0ce67e0","modified":1681193391151},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1681193391151},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1681193391152},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1681193391152},{"_id":"themes/next/source/images/background.png","hash":"e552d157ce511e03b996a002901c454b9dd70e9f","modified":1681193391153},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1681193391153},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1681193391153},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1681193391154},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1681193391154},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1681193391154},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1681193391154},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1681193391155},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1681193391155},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1681193391155},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1681193391155},{"_id":"themes/next/source/images/touxiang.png","hash":"9e42049151fc2efdc38b2d84df5f10a10b2771f1","modified":1681193391156},{"_id":"themes/next/source/images/tubiao.png","hash":"9e42049151fc2efdc38b2d84df5f10a10b2771f1","modified":1681193391156},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1681193391156},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1681193391157},{"_id":"themes/next/source/js/click.js","hash":"6583037545c7edc355f76f29b3393e250b150032","modified":1681193391157},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1681193391157},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1681193391158},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1681193391158},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1681193391159},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1681193391159},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1681193389894},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1681193389894},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1681193389894},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1681193389895},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1681193389895},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1681193389895},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1681193389895},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1681193389896},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1681193389896},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1681193389896},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1681193389897},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1681193389873},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1681193389874},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1681193389874},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1681193389875},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1681193389875},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1681193389875},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1681193389875},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1681193389876},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1681193389876},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1681193389877},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1681193389877},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1681193389877},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1681193389878},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1681193389878},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1681193389878},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1681193389878},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1681193389879},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1681193389879},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1681193389880},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1681193389881},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1681193389881},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1681193389881},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1681193389882},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1681193389883},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1681193389883},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1681193389883},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1681193389884},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1681193389884},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1681193389884},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1681193389885},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1681193389885},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1681193389885},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1681193389886},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1681193389886},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1681193389886},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1681193389887},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1681193389887},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1681193389887},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1681193389888},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1681193389888},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1681193389888},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1681193389889},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1681193389889},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1681193389890},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1681193389890},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1681193389890},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1681193389891},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1681193389891},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1681193391149},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1681193391149},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1681193391150},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1681193391150},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1681193391150},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1681193391158},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1681193391158},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1681193391162},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1681193391162},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1681193389903},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1681193389903},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1681193389903},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1681193389910},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1681193389931},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1681193389931},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1681193389935},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1681193389935},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1681193389936},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1681193389938},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1681193389938},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1681193389938},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1681193389939},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1681193389941},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1681193391144},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1681193391144},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1681193391144},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1681193391145},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1681193391145},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1681193391145},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1681193391146},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1681193391146},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1681193391146},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1681193391147},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1681193391147},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1681193391147},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1681193391147},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1681193391148},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1681193391148},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1681193391148},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1681193391149},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1681193391149},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1681193391161},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1681193391160},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1681193389904},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1681193389904},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1681193389905},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1681193389905},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1681193389906},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1681193389910},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1681193389910},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1681193389921},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1681193389921},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1681193389921},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1681193389906},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1681193389907},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1681193389907},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1681193389907},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1681193389908},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1681193389908},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1681193389908},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1681193389908},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1681193389909},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1681193389909},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1681193389909},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1681193389909},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1681193389909},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1681193389922},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1681193389922},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1681193389922},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1681193389930},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1681193389930},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1681193389930},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1681193389923},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1681193389930},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1681193389932},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1681193389932},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1681193389932},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1681193389933},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1681193389933},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1681193389933},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1681193389934},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1681193389934},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1681193389934},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1681193389935},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1681193389936},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1681193389937},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1681193389937},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1681193389938},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1681193389939},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1681193389939},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1681193389940},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1681193389940},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1681193389940},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1681193389941},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1681193389941},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1681193391160},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1681193391162},{"_id":"public/about/index.html","hash":"faa28dc255346f0ba53507c56a0cf5e3ccd664d3","modified":1681467116879},{"_id":"public/categories/index.html","hash":"1fe486c7097bd1504b17c63b10f4788650048f65","modified":1681467116879},{"_id":"public/read/index.html","hash":"0e2884cefdcb99f1e0ca1f0846f7b23d9069bef1","modified":1681467116879},{"_id":"public/schedule/index.html","hash":"83f517509a07268c28236fdf718ddc9e43a7e641","modified":1681467116879},{"_id":"public/tags/index.html","hash":"55c93b1d3bc9cd4e768d22fea309b1919abab4e9","modified":1681467116879},{"_id":"public/categories/阅读/index.html","hash":"fb61ec8de6f81cadd881a239ee14905eae4ad71e","modified":1681467116879},{"_id":"public/index.html","hash":"9d9a6edab9d64344882e20259e0b0cb5a25f1eea","modified":1681467376886},{"_id":"public/archives/index.html","hash":"551b70e9bf440de04702cf2c37a48612f33e3c37","modified":1681467116879},{"_id":"public/archives/2021/index.html","hash":"dffc69fdfbab6149857ab653ef9032da293db5ed","modified":1681467116879},{"_id":"public/archives/2021/01/index.html","hash":"6e26ee78a9459732d7bd8f52fd02f3e4dc8313ab","modified":1681467116879},{"_id":"public/tags/读书/index.html","hash":"5cff37533212d166af86e4bf7d94a26ba524adfd","modified":1681467116879},{"_id":"public/2021/01/07/如何阅读一本书/index.html","hash":"bb1d66abd75ea8df2ec656155f7d232c0735f227","modified":1681467116879},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1681193511708},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1681193511708},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1681193511708},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1681193511708},{"_id":"public/images/background.png","hash":"e552d157ce511e03b996a002901c454b9dd70e9f","modified":1681193511708},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1681193511708},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1681193511708},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1681193511708},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1681193511708},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1681193511708},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1681193511708},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1681193511708},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1681193511708},{"_id":"public/images/touxiang.png","hash":"9e42049151fc2efdc38b2d84df5f10a10b2771f1","modified":1681193511708},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1681193511708},{"_id":"public/images/tubiao.png","hash":"9e42049151fc2efdc38b2d84df5f10a10b2771f1","modified":1681193511708},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1681193511708},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1681193511708},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1681193511708},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1681193511708},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1681193511708},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1681193511708},{"_id":"public/js/click.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1681193511708},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1681193511708},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1681193511708},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1681193511708},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1681193511708},{"_id":"public/css/main.css","hash":"311d2a7be0945b603b3fe1388d84824224e07b57","modified":1681193511708},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1681193511708},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1681193511708},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1681193511708},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1681193511708},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1681193511708},{"_id":"source/_posts/hexo环境重新快速搭建.md","hash":"1e303685c540e66dbf56754b082b5b67ff85ae58","modified":1681201442734},{"_id":"source/notes/index.md","hash":"4e63c0004d401925a13a25e020297743a33efdd6","modified":1681197603467},{"_id":"public/notes/index.html","hash":"c792e1741b665624d1c55ae6e28e0506c2b64454","modified":1681467116879},{"_id":"public/archives/2023/index.html","hash":"5d882045920c4de954f2232de1711447a16ec41d","modified":1681467116879},{"_id":"public/archives/2023/04/index.html","hash":"98e6ab96a7a786d616a66508f5173956d1916136","modified":1681467116879},{"_id":"public/categories/笔记/index.html","hash":"9bf03280d37bf44a4e913c215a81bfed8c494820","modified":1681467116879},{"_id":"public/2023/04/11/hexo环境重新快速搭建/index.html","hash":"eaa801062b9566a9e1584c7b40fe909ff9154bbe","modified":1681467116879},{"_id":"source/_posts/next主题美化.md","hash":"571443d28a15dbf0f704a28e2f89623ed8fde8d0","modified":1681361073135},{"_id":"public/archives/2022/index.html","hash":"ed68d2f0a51fac1a6728fe1a9b1f2a01a8117c0b","modified":1681467116879},{"_id":"public/archives/2022/03/index.html","hash":"d4f5c14c5603c9517070197767e2131d43681154","modified":1681467116879},{"_id":"public/2022/03/16/next主题美化/index.html","hash":"90acc80a00bb36cea9355a51bc29531b7c3d21bd","modified":1681467116879},{"_id":"source/_posts/1-V4l2.md","hash":"b15cb356ba91454478ea560087884a84369aad4f","modified":1681359704991},{"_id":"source/_posts/1-V4l2/1.png","hash":"7d081222831c25ce1f093010421eb7fad6a470bc","modified":1655189774771},{"_id":"source/_posts/1-V4l2/2.png","hash":"4b664a253ed1ec9ca0baf6ebe128a35e5d120f39","modified":1655189795137},{"_id":"source/_posts/1-V4l2/3.png","hash":"9cea1e6173ad4e51a5f9700d930a52a4a8e88be4","modified":1655189805527},{"_id":"public/2023/04/13/1-V4l2/index.html","hash":"4337233f682e93ff74e5e2196fb74a1b4f64563b","modified":1681467116879},{"_id":"public/2023/04/13/1-V4l2/1.png","hash":"7d081222831c25ce1f093010421eb7fad6a470bc","modified":1681358511666},{"_id":"public/2023/04/13/1-V4l2/2.png","hash":"4b664a253ed1ec9ca0baf6ebe128a35e5d120f39","modified":1681358511666},{"_id":"public/2023/04/13/1-V4l2/3.png","hash":"9cea1e6173ad4e51a5f9700d930a52a4a8e88be4","modified":1681358511666},{"_id":"public/tags/嵌入式/index.html","hash":"81a3a03253bd30ba202235fa96d74c11aae62e73","modified":1681467116879},{"_id":"source/_posts/2-YUV&RGB.md","hash":"a038e0b278d484df22c53c7473dfe0ac0e771684","modified":1681361958240},{"_id":"source/_posts/2-YUV&RGB/1.png","hash":"31d002f1f9fb6547d3b48d27786f01e5a6e7a581","modified":1657179042889},{"_id":"source/_posts/2-YUV&RGB/2.png","hash":"25da046078227ab61205a1ff7824ae3667cb81d7","modified":1657179424733},{"_id":"source/_posts/2-YUV&RGB/3.png","hash":"527c17e0510d9eccc70e98b7e01c1452f77bbb04","modified":1657180633199},{"_id":"source/_posts/2-YUV&RGB/4.png","hash":"5992b4bc13cad0eb6f148d7cd223817a08012829","modified":1657182513091},{"_id":"source/_posts/2-YUV&RGB/5.png","hash":"63785e376e9dce761d2d855b87d7274406fde26f","modified":1657182709143},{"_id":"source/_posts/2-YUV&RGB/6.png","hash":"f480e5ce17b7210767c21e26949cabeccdcb323a","modified":1657182659790},{"_id":"source/_posts/2-YUV&RGB/7.png","hash":"6215501ffb8e15b8f41bea8733087c4c15b57364","modified":1657182818753},{"_id":"source/_posts/2-YUV&RGB/8.png","hash":"1f836f5fbdc8018608732cb8776a7f33f88c3cd8","modified":1657183247567},{"_id":"source/_posts/2-YUV&RGB/12.jpg","hash":"eaa5e6a9e023844e1f839ae9a186ff56c2eb257f","modified":1657183892781},{"_id":"source/_posts/2-YUV&RGB/11.jpg","hash":"7c7f835a02e65f225dc3e51e6e61e5f0deec9daa","modified":1657183851269},{"_id":"source/_posts/2-YUV&RGB/9.jpg","hash":"84762bb8291da7a68f51ba332c374d97cdd88aa3","modified":1657183713762},{"_id":"source/_posts/2-YUV&RGB/10.jpg","hash":"3ccc1b817c5ee3c62a3b7a984b2ef5514341ee2a","modified":1657183762078},{"_id":"public/2023/04/13/2-YUV&RGB/index.html","hash":"5731a3d9808bea25b907d0299f73f18b97498fe5","modified":1681467116879},{"_id":"public/2023/04/13/2-YUV&RGB/1.png","hash":"31d002f1f9fb6547d3b48d27786f01e5a6e7a581","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/2.png","hash":"25da046078227ab61205a1ff7824ae3667cb81d7","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/3.png","hash":"527c17e0510d9eccc70e98b7e01c1452f77bbb04","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/4.png","hash":"5992b4bc13cad0eb6f148d7cd223817a08012829","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/5.png","hash":"63785e376e9dce761d2d855b87d7274406fde26f","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/6.png","hash":"f480e5ce17b7210767c21e26949cabeccdcb323a","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/8.png","hash":"1f836f5fbdc8018608732cb8776a7f33f88c3cd8","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/7.png","hash":"6215501ffb8e15b8f41bea8733087c4c15b57364","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/12.jpg","hash":"eaa5e6a9e023844e1f839ae9a186ff56c2eb257f","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/11.jpg","hash":"7c7f835a02e65f225dc3e51e6e61e5f0deec9daa","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/9.jpg","hash":"84762bb8291da7a68f51ba332c374d97cdd88aa3","modified":1681361869441},{"_id":"public/2023/04/13/2-YUV&RGB/10.jpg","hash":"3ccc1b817c5ee3c62a3b7a984b2ef5514341ee2a","modified":1681361869441},{"_id":"source/_posts/G2D.md","hash":"e0316e72d2c2dfb5ba02f469b47fa1b47b25390a","modified":1681467365460},{"_id":"source/_posts/G2D/1.png","hash":"d11a923c66c917e61581951f3d3954410d18a740","modified":1655859024736},{"_id":"public/2023/04/14/G2D/index.html","hash":"ecd2ac6056751378b6dd3b428860c05fefccfae2","modified":1681467376886},{"_id":"public/2023/04/14/G2D/1.png","hash":"d11a923c66c917e61581951f3d3954410d18a740","modified":1681467116879}],"Category":[{"name":"阅读","_id":"clgbv7k4s00038cobeihkgvvw"},{"name":"笔记","_id":"clgbycqcr0002s8ob1ym92rhv"}],"Data":[{"_id":"style","data":""}],"Page":[{"title":"About","date":"2021-01-03T10:06:11.000Z","type":"关于","comments":0,"_content":"欢迎来到这里  \n\n关于博客\n=\n</br>　　用来记录自己的学习和成长  \n\n关于我\n=\n</br>　　还没想好怎么介绍自己哈哈哈","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-01-03 18:06:11\ntype: \"关于\"\ncomments: false\n---\n欢迎来到这里  \n\n关于博客\n=\n</br>　　用来记录自己的学习和成长  \n\n关于我\n=\n</br>　　还没想好怎么介绍自己哈哈哈","updated":"2023-04-11T06:09:49.822Z","path":"about/index.html","layout":"page","_id":"clgbv7k4m00008cob6wsr45oe","content":"<p>欢迎来到这里  </p>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p></br>　　用来记录自己的学习和成长  </p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p></br>　　还没想好怎么介绍自己哈哈哈</p>\n","site":{"data":{"style":""}},"length":38,"excerpt":"","more":"<p>欢迎来到这里  </p>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p></br>　　用来记录自己的学习和成长  </p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p></br>　　还没想好怎么介绍自己哈哈哈</p>\n"},{"title":"分类","date":"2021-01-03T10:05:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-01-03 18:05:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-04-11T06:09:49.822Z","path":"categories/index.html","layout":"page","_id":"clgbv7k4r00028cob0erbbgir","content":"","site":{"data":{"style":""}},"length":0,"excerpt":"","more":""},{"title":"阅读","date":"2021-01-08T08:04:21.000Z","type":"categories","comments":0,"_content":"","source":"read/index.md","raw":"---\ntitle: 阅读\ndate: 2021-01-08 16:04:21\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-04-11T06:09:49.823Z","path":"read/index.html","layout":"page","_id":"clgbv7k4v00058cob1x7zeyb5","content":"","site":{"data":{"style":""}},"length":0,"excerpt":"","more":""},{"title":"时间轴","date":"2021-01-03T10:07:00.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: 时间轴\ndate: 2021-01-03 18:07:00\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2023-04-11T06:09:49.823Z","path":"schedule/index.html","layout":"page","_id":"clgbv7k4v00068cob0hgva1rp","content":"","site":{"data":{"style":""}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-01-03T10:06:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-01-03 18:06:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-04-11T06:09:49.823Z","path":"tags/index.html","layout":"page","_id":"clgbv7k4w00078cobb3oo48u9","content":"","site":{"data":{"style":""}},"length":0,"excerpt":"","more":""},{"title":"笔记","date":"2023-04-11T07:19:21.000Z","type":"categories","comments":0,"_content":"","source":"notes/index.md","raw":"---\ntitle: 笔记\ndate: 2023-04-11 15:19:21\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-04-11T07:20:03.467Z","path":"notes/index.html","layout":"page","_id":"clgbycqcl0000s8obguha2kz5","content":"","site":{"data":{"style":""}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"如何阅读一本书？","date":"2021-01-07T07:59:11.000Z","comments":0,"description":null,"_content":"\n# 第一篇：阅读的层次：\n\n## 第一章：阅读的活力与艺术\n\n这本书最主要的目的：让我们懂得如何让书本来教导我们。如果我们打算继续学习与发现\n\n<!--more-->\n\n## 第二章：阅读的层次\n\n四种层次的阅读，种类样样不同，而层次却是再高的层次也包含了较低层次的特性。\n\n第一层次的阅读：基础阅读（elementary reading）---如何认出一页中的一个个字，PS：该层次阅读所问的问题是:“这个句子在说什么？”\n\n第二层次的阅读：检视阅读（inspectional reading）（也叫略读或预读）---特点在强调时间，在一定时间内，抓出一本书的重点，通常很短，总是过短难以掌握一本书的所以重点，但是我们的目标是从表面去观察这本书，学习到光是书的表象所教给你的一切，这笔交易通常是很划得来的。PS该层次要问的问题是:“这本书在谈什么？”“这本书的架构如何？”“这本书包含哪些部分？”  \n\n第三层次的阅读：分析阅读（analytical reading）（也就是全盘阅读。完整阅读或优质阅读）----更复杂、更系统化，重点在于分析阅读中，读者一定会对自己所读的东西提出许多有系统的问题。抓住一本书，直到这本书成为他自己为之。  \n\n第四层次的阅读：主题阅读（syntopical reading ）（也叫比较阅读）----最复杂最系统化的阅读，要求非常多。主题阅读时，会读很多书而不是一本书，并列举这些书之间相关之处，提出一个所有的书都谈到的主题，并且涉及的远不止此，借助所阅读的书籍，主题阅读者要能够构架出一个可能在哪一本书里都没提过的主题分析。因此是最主动也最花力气的一种阅读。\n\n## 第三章：阅读的第一个层次：基础阅读\n\n不同的基础阅读教学法：ABC教学法、发音法、视觉法、\n\n较新的比较重要的阅读教学法：折中教学法、个别阅读教学法、语言经验教学法，除此之外，初期教学字母，全神贯注教学法、外国语言学校教法、看说、看与说、看到就说、、、\n\n**学习阅读的阶段：**\n\n- 第一阶段：“阅读准备阶段”-----身体、智力、语言方面的准备以及个人的准备（包括与其他孩子一起学习的能力，保持注意力和服从等）\n- 第二阶段：认字---学习读一些简单的读物  \n- 第三阶段：快速建立字汇的能力---字汇的增长及对课文的运用\n- 第四阶段：精炼与增进前面所学的技巧 \n\n只有当一个孩子精通基础阅读的四个阶段，才准备好往更高层次的阅读迈进，只有当能自己阅读时，才能够自己开始学习。也只有这样才能变成一个真正的阅读者。\n\n更高的层次的阅读与高等教育----对于矫正阅读指导并不算指导，它只是把学生带到一个他在小学毕业的时候所该具备的阅读能力的程度。\n\n阅读与民主教育的理念-----无限制的受教育机会是一个社会能提供给人民最有价值的服务，只有当一个人的自我期许，能力与需要受限制时，教育机会才会收到限制。\n\n## 第四章：阅读的第二个层次：检视阅读\n\n\n检视阅读的两种方法（可以同时运用两种步骤）： \n\n### 检视阅读一：有系统的略读或粗读\n\n\n如何去做的一些建议：\n\n1. 先看书名页，然后有序先看序  \n2. 研究目录页  \n3. 如果书中有索引，也要检阅一下 \n4. \n   如果是本新书，不妨读一下出版者的介绍  \n5. 从你对一本书的目录很概略，甚至有些模糊的印象中，开始挑几个看来跟主题息息相关的篇章来看  \n6. 最后一步，把书打开，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多，用这个方法吧全书翻过一遍。以及书最后结尾的两三页。\n\n### 检视阅读二：粗浅的阅读\n\n 一个很重要又很有帮助的阅读规则：头一次面对一本难读的书的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询或思考，只注意你能理解的部分，不要为一些没法立即了解的东西而停顿，继续读下去，略过那些不懂的部分。很快你会看到你看的懂得地方，集中精神在这部分，继续读下去，将全书读完。避免自己被一个看不懂的章节注解评论或参考资料困住。  \n\n阅读的速度------理想上来说，不只是要能读得快，还要能用不同的速度来阅读，要知道什么时候用什么样的速度是恰当的。\n\n逗留与倒推-----矫正阅读速度可以利用双手训练自己的眼睛：将大拇指与食指、中指合并在一起，用这个“指针”顺着一行一行的字移动下去，速度要比你眼睛感觉的还要快一点。强迫自己的眼睛跟着手部的运动移动。继续练习增快手的动作，等到你发觉以前，你的速度已经可以比以前快两三倍了。\n理解力的问题----一个读者要能够正确地回答许多更进一步的问题，才表示能有更高一层的理解力。分析阅读，是想要理解（了解）一本书的基本条件。\n\n检视阅读的摘要----以上内容概括\n\n## 第五章：如何做一个自我要求的读者\n\n 在阅读时想要保持清醒或昏昏入睡，主要看你的阅读目标是什么。--------如果你的阅读目标是获得利益，不论是心灵或精神上的成长，你就得保持清醒。也就意味着阅读时要尽可能地保持主动，还要做一番努力。（主动阅读）  \n\n\n**主动阅读的基础：一个阅读者要提出的四个基本问题（这是阅读的基本规则）**\n\n1. 整体来说，这本书到底在谈些什么？\n2. \n   作者细部说了什么，怎么说的？一定要想办法找到主要得想法、声明与论点。这些组合成作者想要传达带的特殊讯息。  \n3. 这本书说的有道理么？是全部有道理，还是部分有道理？-----必须要在回答前两个问题之后才能回答，否则是不行的，在判断这本书是否有道理之前必须先了解这本书在说些什么才行  \n4. 这本书跟你有什么关系？-----如果这本书给了你一些讯息，一定要问问这些资讯有什么意义？为何作者会认为知道这些事很重要？你真的有必要去了解么？如果不只是提供了资讯，还启发了你，更有必要找到其他相关的、更深的含义或建议，以获得启示。  \n\n任何一种超越基础阅读的阅读层次，核心就在你要努力提出问题（然后尽你可能地找出答案）\n\n\n**如何让一本书真正的属于自己**-------书成为你的一部分和你成为书的一部分是同一件事，就是要去写下来。\n\n\n**那么为什么阅读时在书上做笔记是不可或缺的事？**\n\n1. 那会让你保持清醒  \n2. 阅读，如果是主动的，那就是一种思考，而思考倾向于用语言表达出来，不管是讲还是写的，一个人如果说他知道自己在想些什么，但是说不出来。那通常是他自己并不知道自己在想些什么  \n3. 将你的感想写下来，能帮助你记住作者的思想    \n\n\n**阅读一本书应该像与作者之间的对话，那么就需要在这个双相沟通的过程中提问题，向自己提问题，也要向老师提问题。**\n\n在书上做笔记就是在表达跟作者之间相同或相异的观点。那么做笔记呢？有以下几个方法：  \n\n1. 画底线  \n2. 在画底线处的栏外再加画一道线  \n3. 在空白处做星号或其他符号----注意只用来强调书中十来个最重要的声明或段落即可  \n4. 在空白处编号-----帮助记录作者的某个论点发展的一连串的重要陈述  \n5. 在空白处记下其他页码----强调作者书中其他部分同样或相关的要点、或与此处观点不同的地方，便于将散步全书的想法统一集中起来。  \n6. 将关键字或句子圈起来  \n7. 在书页的空白处做笔记--------可以是问题，也可以是讲复杂的论点进行简化说明。  \n\n\n**三种做笔记的方法-------用那种完全依你阅读的层次而定** \n\n1. 结构笔记-----要记的重点是全书的架构，而不是内容，至少不是细节，比如检视阅读中回答的问题：\n   - 第一，这是什么样的一本书？  \n   - 第二，整本书在谈的是什么？  \n   - 第三，作者是借着怎样的整体架构来发展他的观点或者去陈述他对这个主题的理解。   \n2. 概念笔记----当做分析阅读时，关于这本书准确性与意义的问题，就要提出自己的答案了，那么此时的笔记不再跟结构有关而是概念，这些概念是作者的观点，而当你读得越深越广时，便也会出现你自己的观点了。  \n3. 辩证笔记-------从好多本书中摘要，用单独的一张纸来记载，再用上概念的结构--就一个单一主题，将所有相关的陈述和疑问顺序而列。\n\n\n**培养阅读的习惯：**\n\n要养成习惯，除了不断地运作练习别无他法。也就是常说的从实际去做中学习到如何去做的道理。\n\n 所谓艺术或技巧，只属于哪个能养成习惯，并且能依照规则来运作的人。对于规则是否了解得够清楚，是能不能拥有技巧的关键。\n\n由许多规则中养成一个习惯：\n\n每一个分开来的步骤都需要你全神贯注地去做。在你分别练习过这些分开来的步骤以后，你不但能放下你的注意力，很有效地将每一个步骤做好，还能将所有的动作结合起来，表现出一个整体的顺畅动作。--------这是学习一种复杂技巧的基本知识。\n\n规则的多样化，意味着要养成一个习惯的复杂度，而非表示要形成许多个不同的习惯。在到达一个程度时，每个分开的动作自然会压缩、连结起来，变成一个完整的动作。当所有相关动作都能相当自然地做出来时，你就养成做这件事的习惯了。","source":"_posts/如何阅读一本书.md","raw":"---\ntitle: 如何阅读一本书？\ndate: 2021-01-07 15:59:11\ncategories: 阅读\ntags: \n  - 读书\ncomments: false\ndescription: \n\n---\n\n# 第一篇：阅读的层次：\n\n## 第一章：阅读的活力与艺术\n\n这本书最主要的目的：让我们懂得如何让书本来教导我们。如果我们打算继续学习与发现\n\n<!--more-->\n\n## 第二章：阅读的层次\n\n四种层次的阅读，种类样样不同，而层次却是再高的层次也包含了较低层次的特性。\n\n第一层次的阅读：基础阅读（elementary reading）---如何认出一页中的一个个字，PS：该层次阅读所问的问题是:“这个句子在说什么？”\n\n第二层次的阅读：检视阅读（inspectional reading）（也叫略读或预读）---特点在强调时间，在一定时间内，抓出一本书的重点，通常很短，总是过短难以掌握一本书的所以重点，但是我们的目标是从表面去观察这本书，学习到光是书的表象所教给你的一切，这笔交易通常是很划得来的。PS该层次要问的问题是:“这本书在谈什么？”“这本书的架构如何？”“这本书包含哪些部分？”  \n\n第三层次的阅读：分析阅读（analytical reading）（也就是全盘阅读。完整阅读或优质阅读）----更复杂、更系统化，重点在于分析阅读中，读者一定会对自己所读的东西提出许多有系统的问题。抓住一本书，直到这本书成为他自己为之。  \n\n第四层次的阅读：主题阅读（syntopical reading ）（也叫比较阅读）----最复杂最系统化的阅读，要求非常多。主题阅读时，会读很多书而不是一本书，并列举这些书之间相关之处，提出一个所有的书都谈到的主题，并且涉及的远不止此，借助所阅读的书籍，主题阅读者要能够构架出一个可能在哪一本书里都没提过的主题分析。因此是最主动也最花力气的一种阅读。\n\n## 第三章：阅读的第一个层次：基础阅读\n\n不同的基础阅读教学法：ABC教学法、发音法、视觉法、\n\n较新的比较重要的阅读教学法：折中教学法、个别阅读教学法、语言经验教学法，除此之外，初期教学字母，全神贯注教学法、外国语言学校教法、看说、看与说、看到就说、、、\n\n**学习阅读的阶段：**\n\n- 第一阶段：“阅读准备阶段”-----身体、智力、语言方面的准备以及个人的准备（包括与其他孩子一起学习的能力，保持注意力和服从等）\n- 第二阶段：认字---学习读一些简单的读物  \n- 第三阶段：快速建立字汇的能力---字汇的增长及对课文的运用\n- 第四阶段：精炼与增进前面所学的技巧 \n\n只有当一个孩子精通基础阅读的四个阶段，才准备好往更高层次的阅读迈进，只有当能自己阅读时，才能够自己开始学习。也只有这样才能变成一个真正的阅读者。\n\n更高的层次的阅读与高等教育----对于矫正阅读指导并不算指导，它只是把学生带到一个他在小学毕业的时候所该具备的阅读能力的程度。\n\n阅读与民主教育的理念-----无限制的受教育机会是一个社会能提供给人民最有价值的服务，只有当一个人的自我期许，能力与需要受限制时，教育机会才会收到限制。\n\n## 第四章：阅读的第二个层次：检视阅读\n\n\n检视阅读的两种方法（可以同时运用两种步骤）： \n\n### 检视阅读一：有系统的略读或粗读\n\n\n如何去做的一些建议：\n\n1. 先看书名页，然后有序先看序  \n2. 研究目录页  \n3. 如果书中有索引，也要检阅一下 \n4. \n   如果是本新书，不妨读一下出版者的介绍  \n5. 从你对一本书的目录很概略，甚至有些模糊的印象中，开始挑几个看来跟主题息息相关的篇章来看  \n6. 最后一步，把书打开，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多，用这个方法吧全书翻过一遍。以及书最后结尾的两三页。\n\n### 检视阅读二：粗浅的阅读\n\n 一个很重要又很有帮助的阅读规则：头一次面对一本难读的书的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询或思考，只注意你能理解的部分，不要为一些没法立即了解的东西而停顿，继续读下去，略过那些不懂的部分。很快你会看到你看的懂得地方，集中精神在这部分，继续读下去，将全书读完。避免自己被一个看不懂的章节注解评论或参考资料困住。  \n\n阅读的速度------理想上来说，不只是要能读得快，还要能用不同的速度来阅读，要知道什么时候用什么样的速度是恰当的。\n\n逗留与倒推-----矫正阅读速度可以利用双手训练自己的眼睛：将大拇指与食指、中指合并在一起，用这个“指针”顺着一行一行的字移动下去，速度要比你眼睛感觉的还要快一点。强迫自己的眼睛跟着手部的运动移动。继续练习增快手的动作，等到你发觉以前，你的速度已经可以比以前快两三倍了。\n理解力的问题----一个读者要能够正确地回答许多更进一步的问题，才表示能有更高一层的理解力。分析阅读，是想要理解（了解）一本书的基本条件。\n\n检视阅读的摘要----以上内容概括\n\n## 第五章：如何做一个自我要求的读者\n\n 在阅读时想要保持清醒或昏昏入睡，主要看你的阅读目标是什么。--------如果你的阅读目标是获得利益，不论是心灵或精神上的成长，你就得保持清醒。也就意味着阅读时要尽可能地保持主动，还要做一番努力。（主动阅读）  \n\n\n**主动阅读的基础：一个阅读者要提出的四个基本问题（这是阅读的基本规则）**\n\n1. 整体来说，这本书到底在谈些什么？\n2. \n   作者细部说了什么，怎么说的？一定要想办法找到主要得想法、声明与论点。这些组合成作者想要传达带的特殊讯息。  \n3. 这本书说的有道理么？是全部有道理，还是部分有道理？-----必须要在回答前两个问题之后才能回答，否则是不行的，在判断这本书是否有道理之前必须先了解这本书在说些什么才行  \n4. 这本书跟你有什么关系？-----如果这本书给了你一些讯息，一定要问问这些资讯有什么意义？为何作者会认为知道这些事很重要？你真的有必要去了解么？如果不只是提供了资讯，还启发了你，更有必要找到其他相关的、更深的含义或建议，以获得启示。  \n\n任何一种超越基础阅读的阅读层次，核心就在你要努力提出问题（然后尽你可能地找出答案）\n\n\n**如何让一本书真正的属于自己**-------书成为你的一部分和你成为书的一部分是同一件事，就是要去写下来。\n\n\n**那么为什么阅读时在书上做笔记是不可或缺的事？**\n\n1. 那会让你保持清醒  \n2. 阅读，如果是主动的，那就是一种思考，而思考倾向于用语言表达出来，不管是讲还是写的，一个人如果说他知道自己在想些什么，但是说不出来。那通常是他自己并不知道自己在想些什么  \n3. 将你的感想写下来，能帮助你记住作者的思想    \n\n\n**阅读一本书应该像与作者之间的对话，那么就需要在这个双相沟通的过程中提问题，向自己提问题，也要向老师提问题。**\n\n在书上做笔记就是在表达跟作者之间相同或相异的观点。那么做笔记呢？有以下几个方法：  \n\n1. 画底线  \n2. 在画底线处的栏外再加画一道线  \n3. 在空白处做星号或其他符号----注意只用来强调书中十来个最重要的声明或段落即可  \n4. 在空白处编号-----帮助记录作者的某个论点发展的一连串的重要陈述  \n5. 在空白处记下其他页码----强调作者书中其他部分同样或相关的要点、或与此处观点不同的地方，便于将散步全书的想法统一集中起来。  \n6. 将关键字或句子圈起来  \n7. 在书页的空白处做笔记--------可以是问题，也可以是讲复杂的论点进行简化说明。  \n\n\n**三种做笔记的方法-------用那种完全依你阅读的层次而定** \n\n1. 结构笔记-----要记的重点是全书的架构，而不是内容，至少不是细节，比如检视阅读中回答的问题：\n   - 第一，这是什么样的一本书？  \n   - 第二，整本书在谈的是什么？  \n   - 第三，作者是借着怎样的整体架构来发展他的观点或者去陈述他对这个主题的理解。   \n2. 概念笔记----当做分析阅读时，关于这本书准确性与意义的问题，就要提出自己的答案了，那么此时的笔记不再跟结构有关而是概念，这些概念是作者的观点，而当你读得越深越广时，便也会出现你自己的观点了。  \n3. 辩证笔记-------从好多本书中摘要，用单独的一张纸来记载，再用上概念的结构--就一个单一主题，将所有相关的陈述和疑问顺序而列。\n\n\n**培养阅读的习惯：**\n\n要养成习惯，除了不断地运作练习别无他法。也就是常说的从实际去做中学习到如何去做的道理。\n\n 所谓艺术或技巧，只属于哪个能养成习惯，并且能依照规则来运作的人。对于规则是否了解得够清楚，是能不能拥有技巧的关键。\n\n由许多规则中养成一个习惯：\n\n每一个分开来的步骤都需要你全神贯注地去做。在你分别练习过这些分开来的步骤以后，你不但能放下你的注意力，很有效地将每一个步骤做好，还能将所有的动作结合起来，表现出一个整体的顺畅动作。--------这是学习一种复杂技巧的基本知识。\n\n规则的多样化，意味着要养成一个习惯的复杂度，而非表示要形成许多个不同的习惯。在到达一个程度时，每个分开的动作自然会压缩、连结起来，变成一个完整的动作。当所有相关动作都能相当自然地做出来时，你就养成做这件事的习惯了。","slug":"如何阅读一本书","published":1,"updated":"2023-04-11T06:09:49.822Z","layout":"post","photos":[],"link":"","_id":"clgbv7k4o00018cob88lof603","content":"<h1 id=\"第一篇：阅读的层次：\"><a href=\"#第一篇：阅读的层次：\" class=\"headerlink\" title=\"第一篇：阅读的层次：\"></a>第一篇：阅读的层次：</h1><h2 id=\"第一章：阅读的活力与艺术\"><a href=\"#第一章：阅读的活力与艺术\" class=\"headerlink\" title=\"第一章：阅读的活力与艺术\"></a>第一章：阅读的活力与艺术</h2><p>这本书最主要的目的：让我们懂得如何让书本来教导我们。如果我们打算继续学习与发现</p>\n<span id=\"more\"></span>\n\n<h2 id=\"第二章：阅读的层次\"><a href=\"#第二章：阅读的层次\" class=\"headerlink\" title=\"第二章：阅读的层次\"></a>第二章：阅读的层次</h2><p>四种层次的阅读，种类样样不同，而层次却是再高的层次也包含了较低层次的特性。</p>\n<p>第一层次的阅读：基础阅读（elementary reading）—如何认出一页中的一个个字，PS：该层次阅读所问的问题是:“这个句子在说什么？”</p>\n<p>第二层次的阅读：检视阅读（inspectional reading）（也叫略读或预读）—特点在强调时间，在一定时间内，抓出一本书的重点，通常很短，总是过短难以掌握一本书的所以重点，但是我们的目标是从表面去观察这本书，学习到光是书的表象所教给你的一切，这笔交易通常是很划得来的。PS该层次要问的问题是:“这本书在谈什么？”“这本书的架构如何？”“这本书包含哪些部分？”  </p>\n<p>第三层次的阅读：分析阅读（analytical reading）（也就是全盘阅读。完整阅读或优质阅读）—-更复杂、更系统化，重点在于分析阅读中，读者一定会对自己所读的东西提出许多有系统的问题。抓住一本书，直到这本书成为他自己为之。  </p>\n<p>第四层次的阅读：主题阅读（syntopical reading ）（也叫比较阅读）—-最复杂最系统化的阅读，要求非常多。主题阅读时，会读很多书而不是一本书，并列举这些书之间相关之处，提出一个所有的书都谈到的主题，并且涉及的远不止此，借助所阅读的书籍，主题阅读者要能够构架出一个可能在哪一本书里都没提过的主题分析。因此是最主动也最花力气的一种阅读。</p>\n<h2 id=\"第三章：阅读的第一个层次：基础阅读\"><a href=\"#第三章：阅读的第一个层次：基础阅读\" class=\"headerlink\" title=\"第三章：阅读的第一个层次：基础阅读\"></a>第三章：阅读的第一个层次：基础阅读</h2><p>不同的基础阅读教学法：ABC教学法、发音法、视觉法、</p>\n<p>较新的比较重要的阅读教学法：折中教学法、个别阅读教学法、语言经验教学法，除此之外，初期教学字母，全神贯注教学法、外国语言学校教法、看说、看与说、看到就说、、、</p>\n<p><strong>学习阅读的阶段：</strong></p>\n<ul>\n<li>第一阶段：“阅读准备阶段”—–身体、智力、语言方面的准备以及个人的准备（包括与其他孩子一起学习的能力，保持注意力和服从等）</li>\n<li>第二阶段：认字—学习读一些简单的读物  </li>\n<li>第三阶段：快速建立字汇的能力—字汇的增长及对课文的运用</li>\n<li>第四阶段：精炼与增进前面所学的技巧</li>\n</ul>\n<p>只有当一个孩子精通基础阅读的四个阶段，才准备好往更高层次的阅读迈进，只有当能自己阅读时，才能够自己开始学习。也只有这样才能变成一个真正的阅读者。</p>\n<p>更高的层次的阅读与高等教育—-对于矫正阅读指导并不算指导，它只是把学生带到一个他在小学毕业的时候所该具备的阅读能力的程度。</p>\n<p>阅读与民主教育的理念—–无限制的受教育机会是一个社会能提供给人民最有价值的服务，只有当一个人的自我期许，能力与需要受限制时，教育机会才会收到限制。</p>\n<h2 id=\"第四章：阅读的第二个层次：检视阅读\"><a href=\"#第四章：阅读的第二个层次：检视阅读\" class=\"headerlink\" title=\"第四章：阅读的第二个层次：检视阅读\"></a>第四章：阅读的第二个层次：检视阅读</h2><p>检视阅读的两种方法（可以同时运用两种步骤）： </p>\n<h3 id=\"检视阅读一：有系统的略读或粗读\"><a href=\"#检视阅读一：有系统的略读或粗读\" class=\"headerlink\" title=\"检视阅读一：有系统的略读或粗读\"></a>检视阅读一：有系统的略读或粗读</h3><p>如何去做的一些建议：</p>\n<ol>\n<li>先看书名页，然后有序先看序  </li>\n<li>研究目录页  </li>\n<li>如果书中有索引，也要检阅一下 </li>\n<li>如果是本新书，不妨读一下出版者的介绍  </li>\n<li>从你对一本书的目录很概略，甚至有些模糊的印象中，开始挑几个看来跟主题息息相关的篇章来看  </li>\n<li>最后一步，把书打开，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多，用这个方法吧全书翻过一遍。以及书最后结尾的两三页。</li>\n</ol>\n<h3 id=\"检视阅读二：粗浅的阅读\"><a href=\"#检视阅读二：粗浅的阅读\" class=\"headerlink\" title=\"检视阅读二：粗浅的阅读\"></a>检视阅读二：粗浅的阅读</h3><p> 一个很重要又很有帮助的阅读规则：头一次面对一本难读的书的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询或思考，只注意你能理解的部分，不要为一些没法立即了解的东西而停顿，继续读下去，略过那些不懂的部分。很快你会看到你看的懂得地方，集中精神在这部分，继续读下去，将全书读完。避免自己被一个看不懂的章节注解评论或参考资料困住。  </p>\n<p>阅读的速度——理想上来说，不只是要能读得快，还要能用不同的速度来阅读，要知道什么时候用什么样的速度是恰当的。</p>\n<p>逗留与倒推—–矫正阅读速度可以利用双手训练自己的眼睛：将大拇指与食指、中指合并在一起，用这个“指针”顺着一行一行的字移动下去，速度要比你眼睛感觉的还要快一点。强迫自己的眼睛跟着手部的运动移动。继续练习增快手的动作，等到你发觉以前，你的速度已经可以比以前快两三倍了。<br>理解力的问题—-一个读者要能够正确地回答许多更进一步的问题，才表示能有更高一层的理解力。分析阅读，是想要理解（了解）一本书的基本条件。</p>\n<p>检视阅读的摘要—-以上内容概括</p>\n<h2 id=\"第五章：如何做一个自我要求的读者\"><a href=\"#第五章：如何做一个自我要求的读者\" class=\"headerlink\" title=\"第五章：如何做一个自我要求的读者\"></a>第五章：如何做一个自我要求的读者</h2><p> 在阅读时想要保持清醒或昏昏入睡，主要看你的阅读目标是什么。——–如果你的阅读目标是获得利益，不论是心灵或精神上的成长，你就得保持清醒。也就意味着阅读时要尽可能地保持主动，还要做一番努力。（主动阅读）  </p>\n<p><strong>主动阅读的基础：一个阅读者要提出的四个基本问题（这是阅读的基本规则）</strong></p>\n<ol>\n<li>整体来说，这本书到底在谈些什么？</li>\n<li>作者细部说了什么，怎么说的？一定要想办法找到主要得想法、声明与论点。这些组合成作者想要传达带的特殊讯息。  </li>\n<li>这本书说的有道理么？是全部有道理，还是部分有道理？—–必须要在回答前两个问题之后才能回答，否则是不行的，在判断这本书是否有道理之前必须先了解这本书在说些什么才行  </li>\n<li>这本书跟你有什么关系？—–如果这本书给了你一些讯息，一定要问问这些资讯有什么意义？为何作者会认为知道这些事很重要？你真的有必要去了解么？如果不只是提供了资讯，还启发了你，更有必要找到其他相关的、更深的含义或建议，以获得启示。</li>\n</ol>\n<p>任何一种超越基础阅读的阅读层次，核心就在你要努力提出问题（然后尽你可能地找出答案）</p>\n<p><strong>如何让一本书真正的属于自己</strong>——-书成为你的一部分和你成为书的一部分是同一件事，就是要去写下来。</p>\n<p><strong>那么为什么阅读时在书上做笔记是不可或缺的事？</strong></p>\n<ol>\n<li>那会让你保持清醒  </li>\n<li>阅读，如果是主动的，那就是一种思考，而思考倾向于用语言表达出来，不管是讲还是写的，一个人如果说他知道自己在想些什么，但是说不出来。那通常是他自己并不知道自己在想些什么  </li>\n<li>将你的感想写下来，能帮助你记住作者的思想</li>\n</ol>\n<p><strong>阅读一本书应该像与作者之间的对话，那么就需要在这个双相沟通的过程中提问题，向自己提问题，也要向老师提问题。</strong></p>\n<p>在书上做笔记就是在表达跟作者之间相同或相异的观点。那么做笔记呢？有以下几个方法：  </p>\n<ol>\n<li>画底线  </li>\n<li>在画底线处的栏外再加画一道线  </li>\n<li>在空白处做星号或其他符号—-注意只用来强调书中十来个最重要的声明或段落即可  </li>\n<li>在空白处编号—–帮助记录作者的某个论点发展的一连串的重要陈述  </li>\n<li>在空白处记下其他页码—-强调作者书中其他部分同样或相关的要点、或与此处观点不同的地方，便于将散步全书的想法统一集中起来。  </li>\n<li>将关键字或句子圈起来  </li>\n<li>在书页的空白处做笔记——–可以是问题，也可以是讲复杂的论点进行简化说明。</li>\n</ol>\n<p><strong>三种做笔记的方法——-用那种完全依你阅读的层次而定</strong> </p>\n<ol>\n<li>结构笔记—–要记的重点是全书的架构，而不是内容，至少不是细节，比如检视阅读中回答的问题：<ul>\n<li>第一，这是什么样的一本书？  </li>\n<li>第二，整本书在谈的是什么？  </li>\n<li>第三，作者是借着怎样的整体架构来发展他的观点或者去陈述他对这个主题的理解。</li>\n</ul>\n</li>\n<li>概念笔记—-当做分析阅读时，关于这本书准确性与意义的问题，就要提出自己的答案了，那么此时的笔记不再跟结构有关而是概念，这些概念是作者的观点，而当你读得越深越广时，便也会出现你自己的观点了。  </li>\n<li>辩证笔记——-从好多本书中摘要，用单独的一张纸来记载，再用上概念的结构–就一个单一主题，将所有相关的陈述和疑问顺序而列。</li>\n</ol>\n<p><strong>培养阅读的习惯：</strong></p>\n<p>要养成习惯，除了不断地运作练习别无他法。也就是常说的从实际去做中学习到如何去做的道理。</p>\n<p> 所谓艺术或技巧，只属于哪个能养成习惯，并且能依照规则来运作的人。对于规则是否了解得够清楚，是能不能拥有技巧的关键。</p>\n<p>由许多规则中养成一个习惯：</p>\n<p>每一个分开来的步骤都需要你全神贯注地去做。在你分别练习过这些分开来的步骤以后，你不但能放下你的注意力，很有效地将每一个步骤做好，还能将所有的动作结合起来，表现出一个整体的顺畅动作。——–这是学习一种复杂技巧的基本知识。</p>\n<p>规则的多样化，意味着要养成一个习惯的复杂度，而非表示要形成许多个不同的习惯。在到达一个程度时，每个分开的动作自然会压缩、连结起来，变成一个完整的动作。当所有相关动作都能相当自然地做出来时，你就养成做这件事的习惯了。</p>\n","site":{"data":{"style":""}},"length":3302,"excerpt":"<h1 id=\"第一篇：阅读的层次：\"><a href=\"#第一篇：阅读的层次：\" class=\"headerlink\" title=\"第一篇：阅读的层次：\"></a>第一篇：阅读的层次：</h1><h2 id=\"第一章：阅读的活力与艺术\"><a href=\"#第一章：阅读的活力与艺术\" class=\"headerlink\" title=\"第一章：阅读的活力与艺术\"></a>第一章：阅读的活力与艺术</h2><p>这本书最主要的目的：让我们懂得如何让书本来教导我们。如果我们打算继续学习与发现</p>","more":"<h2 id=\"第二章：阅读的层次\"><a href=\"#第二章：阅读的层次\" class=\"headerlink\" title=\"第二章：阅读的层次\"></a>第二章：阅读的层次</h2><p>四种层次的阅读，种类样样不同，而层次却是再高的层次也包含了较低层次的特性。</p>\n<p>第一层次的阅读：基础阅读（elementary reading）—如何认出一页中的一个个字，PS：该层次阅读所问的问题是:“这个句子在说什么？”</p>\n<p>第二层次的阅读：检视阅读（inspectional reading）（也叫略读或预读）—特点在强调时间，在一定时间内，抓出一本书的重点，通常很短，总是过短难以掌握一本书的所以重点，但是我们的目标是从表面去观察这本书，学习到光是书的表象所教给你的一切，这笔交易通常是很划得来的。PS该层次要问的问题是:“这本书在谈什么？”“这本书的架构如何？”“这本书包含哪些部分？”  </p>\n<p>第三层次的阅读：分析阅读（analytical reading）（也就是全盘阅读。完整阅读或优质阅读）—-更复杂、更系统化，重点在于分析阅读中，读者一定会对自己所读的东西提出许多有系统的问题。抓住一本书，直到这本书成为他自己为之。  </p>\n<p>第四层次的阅读：主题阅读（syntopical reading ）（也叫比较阅读）—-最复杂最系统化的阅读，要求非常多。主题阅读时，会读很多书而不是一本书，并列举这些书之间相关之处，提出一个所有的书都谈到的主题，并且涉及的远不止此，借助所阅读的书籍，主题阅读者要能够构架出一个可能在哪一本书里都没提过的主题分析。因此是最主动也最花力气的一种阅读。</p>\n<h2 id=\"第三章：阅读的第一个层次：基础阅读\"><a href=\"#第三章：阅读的第一个层次：基础阅读\" class=\"headerlink\" title=\"第三章：阅读的第一个层次：基础阅读\"></a>第三章：阅读的第一个层次：基础阅读</h2><p>不同的基础阅读教学法：ABC教学法、发音法、视觉法、</p>\n<p>较新的比较重要的阅读教学法：折中教学法、个别阅读教学法、语言经验教学法，除此之外，初期教学字母，全神贯注教学法、外国语言学校教法、看说、看与说、看到就说、、、</p>\n<p><strong>学习阅读的阶段：</strong></p>\n<ul>\n<li>第一阶段：“阅读准备阶段”—–身体、智力、语言方面的准备以及个人的准备（包括与其他孩子一起学习的能力，保持注意力和服从等）</li>\n<li>第二阶段：认字—学习读一些简单的读物  </li>\n<li>第三阶段：快速建立字汇的能力—字汇的增长及对课文的运用</li>\n<li>第四阶段：精炼与增进前面所学的技巧</li>\n</ul>\n<p>只有当一个孩子精通基础阅读的四个阶段，才准备好往更高层次的阅读迈进，只有当能自己阅读时，才能够自己开始学习。也只有这样才能变成一个真正的阅读者。</p>\n<p>更高的层次的阅读与高等教育—-对于矫正阅读指导并不算指导，它只是把学生带到一个他在小学毕业的时候所该具备的阅读能力的程度。</p>\n<p>阅读与民主教育的理念—–无限制的受教育机会是一个社会能提供给人民最有价值的服务，只有当一个人的自我期许，能力与需要受限制时，教育机会才会收到限制。</p>\n<h2 id=\"第四章：阅读的第二个层次：检视阅读\"><a href=\"#第四章：阅读的第二个层次：检视阅读\" class=\"headerlink\" title=\"第四章：阅读的第二个层次：检视阅读\"></a>第四章：阅读的第二个层次：检视阅读</h2><p>检视阅读的两种方法（可以同时运用两种步骤）： </p>\n<h3 id=\"检视阅读一：有系统的略读或粗读\"><a href=\"#检视阅读一：有系统的略读或粗读\" class=\"headerlink\" title=\"检视阅读一：有系统的略读或粗读\"></a>检视阅读一：有系统的略读或粗读</h3><p>如何去做的一些建议：</p>\n<ol>\n<li>先看书名页，然后有序先看序  </li>\n<li>研究目录页  </li>\n<li>如果书中有索引，也要检阅一下 </li>\n<li>如果是本新书，不妨读一下出版者的介绍  </li>\n<li>从你对一本书的目录很概略，甚至有些模糊的印象中，开始挑几个看来跟主题息息相关的篇章来看  </li>\n<li>最后一步，把书打开，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多，用这个方法吧全书翻过一遍。以及书最后结尾的两三页。</li>\n</ol>\n<h3 id=\"检视阅读二：粗浅的阅读\"><a href=\"#检视阅读二：粗浅的阅读\" class=\"headerlink\" title=\"检视阅读二：粗浅的阅读\"></a>检视阅读二：粗浅的阅读</h3><p> 一个很重要又很有帮助的阅读规则：头一次面对一本难读的书的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询或思考，只注意你能理解的部分，不要为一些没法立即了解的东西而停顿，继续读下去，略过那些不懂的部分。很快你会看到你看的懂得地方，集中精神在这部分，继续读下去，将全书读完。避免自己被一个看不懂的章节注解评论或参考资料困住。  </p>\n<p>阅读的速度——理想上来说，不只是要能读得快，还要能用不同的速度来阅读，要知道什么时候用什么样的速度是恰当的。</p>\n<p>逗留与倒推—–矫正阅读速度可以利用双手训练自己的眼睛：将大拇指与食指、中指合并在一起，用这个“指针”顺着一行一行的字移动下去，速度要比你眼睛感觉的还要快一点。强迫自己的眼睛跟着手部的运动移动。继续练习增快手的动作，等到你发觉以前，你的速度已经可以比以前快两三倍了。<br>理解力的问题—-一个读者要能够正确地回答许多更进一步的问题，才表示能有更高一层的理解力。分析阅读，是想要理解（了解）一本书的基本条件。</p>\n<p>检视阅读的摘要—-以上内容概括</p>\n<h2 id=\"第五章：如何做一个自我要求的读者\"><a href=\"#第五章：如何做一个自我要求的读者\" class=\"headerlink\" title=\"第五章：如何做一个自我要求的读者\"></a>第五章：如何做一个自我要求的读者</h2><p> 在阅读时想要保持清醒或昏昏入睡，主要看你的阅读目标是什么。——–如果你的阅读目标是获得利益，不论是心灵或精神上的成长，你就得保持清醒。也就意味着阅读时要尽可能地保持主动，还要做一番努力。（主动阅读）  </p>\n<p><strong>主动阅读的基础：一个阅读者要提出的四个基本问题（这是阅读的基本规则）</strong></p>\n<ol>\n<li>整体来说，这本书到底在谈些什么？</li>\n<li>作者细部说了什么，怎么说的？一定要想办法找到主要得想法、声明与论点。这些组合成作者想要传达带的特殊讯息。  </li>\n<li>这本书说的有道理么？是全部有道理，还是部分有道理？—–必须要在回答前两个问题之后才能回答，否则是不行的，在判断这本书是否有道理之前必须先了解这本书在说些什么才行  </li>\n<li>这本书跟你有什么关系？—–如果这本书给了你一些讯息，一定要问问这些资讯有什么意义？为何作者会认为知道这些事很重要？你真的有必要去了解么？如果不只是提供了资讯，还启发了你，更有必要找到其他相关的、更深的含义或建议，以获得启示。</li>\n</ol>\n<p>任何一种超越基础阅读的阅读层次，核心就在你要努力提出问题（然后尽你可能地找出答案）</p>\n<p><strong>如何让一本书真正的属于自己</strong>——-书成为你的一部分和你成为书的一部分是同一件事，就是要去写下来。</p>\n<p><strong>那么为什么阅读时在书上做笔记是不可或缺的事？</strong></p>\n<ol>\n<li>那会让你保持清醒  </li>\n<li>阅读，如果是主动的，那就是一种思考，而思考倾向于用语言表达出来，不管是讲还是写的，一个人如果说他知道自己在想些什么，但是说不出来。那通常是他自己并不知道自己在想些什么  </li>\n<li>将你的感想写下来，能帮助你记住作者的思想</li>\n</ol>\n<p><strong>阅读一本书应该像与作者之间的对话，那么就需要在这个双相沟通的过程中提问题，向自己提问题，也要向老师提问题。</strong></p>\n<p>在书上做笔记就是在表达跟作者之间相同或相异的观点。那么做笔记呢？有以下几个方法：  </p>\n<ol>\n<li>画底线  </li>\n<li>在画底线处的栏外再加画一道线  </li>\n<li>在空白处做星号或其他符号—-注意只用来强调书中十来个最重要的声明或段落即可  </li>\n<li>在空白处编号—–帮助记录作者的某个论点发展的一连串的重要陈述  </li>\n<li>在空白处记下其他页码—-强调作者书中其他部分同样或相关的要点、或与此处观点不同的地方，便于将散步全书的想法统一集中起来。  </li>\n<li>将关键字或句子圈起来  </li>\n<li>在书页的空白处做笔记——–可以是问题，也可以是讲复杂的论点进行简化说明。</li>\n</ol>\n<p><strong>三种做笔记的方法——-用那种完全依你阅读的层次而定</strong> </p>\n<ol>\n<li>结构笔记—–要记的重点是全书的架构，而不是内容，至少不是细节，比如检视阅读中回答的问题：<ul>\n<li>第一，这是什么样的一本书？  </li>\n<li>第二，整本书在谈的是什么？  </li>\n<li>第三，作者是借着怎样的整体架构来发展他的观点或者去陈述他对这个主题的理解。</li>\n</ul>\n</li>\n<li>概念笔记—-当做分析阅读时，关于这本书准确性与意义的问题，就要提出自己的答案了，那么此时的笔记不再跟结构有关而是概念，这些概念是作者的观点，而当你读得越深越广时，便也会出现你自己的观点了。  </li>\n<li>辩证笔记——-从好多本书中摘要，用单独的一张纸来记载，再用上概念的结构–就一个单一主题，将所有相关的陈述和疑问顺序而列。</li>\n</ol>\n<p><strong>培养阅读的习惯：</strong></p>\n<p>要养成习惯，除了不断地运作练习别无他法。也就是常说的从实际去做中学习到如何去做的道理。</p>\n<p> 所谓艺术或技巧，只属于哪个能养成习惯，并且能依照规则来运作的人。对于规则是否了解得够清楚，是能不能拥有技巧的关键。</p>\n<p>由许多规则中养成一个习惯：</p>\n<p>每一个分开来的步骤都需要你全神贯注地去做。在你分别练习过这些分开来的步骤以后，你不但能放下你的注意力，很有效地将每一个步骤做好，还能将所有的动作结合起来，表现出一个整体的顺畅动作。——–这是学习一种复杂技巧的基本知识。</p>\n<p>规则的多样化，意味着要养成一个习惯的复杂度，而非表示要形成许多个不同的习惯。在到达一个程度时，每个分开的动作自然会压缩、连结起来，变成一个完整的动作。当所有相关动作都能相当自然地做出来时，你就养成做这件事的习惯了。</p>"},{"title":"更换电脑hexo环境如何快速重新搭建？","date":"2023-04-11T07:59:11.000Z","comments":0,"description":null,"_content":"\n## 1.安装Git(默认安装)\n\n下载网址https://git-scm.com/download/win\n\n<!--more-->\n\n## #2.克隆main主分支，\n\n```\n$ git clone -b main https://github.com/XXX/XXX.github.io.git\n```\n\n## 3.克隆hexo_bak分支，\n\n```\n$ git clone -b hexo_bak https://github.com/XXX/XXX.github.io.git\n```\n\n## 4.安装node.js(修改安装目录，默认安装)\n\n下载网址https://nodejs.org/en，\n\n## 5.用 node -v 和 npm -v 命令检查版本\n\n上述node.js安装成功之后，npm同时也已经安装成功，用 node -v 和 npm -v 命令检查版本\n\n## 6.配置npm在安装全局模块时的路径和缓存cache的路径\n\n否则默认安装在C盘，不方便管理且占用C盘空间\n\t1，在node.js安装目录下新建两个文件夹 node_global和node_cache\n\t2，在git bush命令下执行如下两个命令：\n\n```c\n\tnpm config set prefix \"F:\\Blogs\\nodejs\\node_global\"\n\tnpm config set cache \"F:\\Blogs\\nodejs\\node_cache\"\n```\n\n​\t3，在环境变量 -> 系统变量中新建一个变量名为 “NODE_PATH”， 值为“F:\\Blogs\\nodejs\\node_modules”，\n​\t4，最后编辑用户变量里的Path，将相应npm的路径改为：F:\\Blogs\\nodejs\\node_global，\n​\t5，在git bush命令下执行 \n\n```\nnpm install webpack -g\n```\n\n 然后安装成功后可以看到自定义的两个文件夹已生效：\n\t6，npm webpack -v 查看安装webpack的版本号\n\n## 7.输入npm命令安装Hexo：\n\n```c\nnpm install -g hexo-cli\n```\n\n## 8.安装完成后，输入 hexo init 命令初始化博客：\n\n## 9.然后输入 hexo g 静态部署： \n\n## 10.部署完成，输入hexo s 命令可以查看\n\n浏览器输入 http://localhost:4000 就可以打开新部署的网页：看完之后 ctrl +c 停止运行服务器。\n\n## 11.hexo命令\n\n```c\n\thexo init    //命令初始化博客：\n\thexo clean   //清除缓存文件 db.json 和已生成的静态文件 public\n\thexo g       //生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\n\thexo s       //命令可以查看新部署的网页,浏览器输入 http://localhost:4000\n\thexo d       //自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n```\n\n## 12.绑定GitHub\n\n​\t1.输入 ssh 命令，查看本机是否安装 SSH：ssh\n​\t2.输入 ssh-keygen -t rsa 命令（注意空格），指定 RSA 算法生成密钥，然后敲四次回车键，生成两个文件:秘钥 id_rsa 和公钥 id_rsa.pub. \n​\t3.将公钥 id_rsa.pub 的内容添加到 GitHub->settings->SSH and GPG keys-> New SSH key.\n​\t4.在 Git Bash 中输入 ssh -T git@github.com 进行检验\n\n## 13.将博客部署到设定的git仓库主分支main\n\n​\t安装Git部署插件npm install hexo-deployer-git --save(删除原.deploy_git文件夹，hexo g后重新生成)\n​\thexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\n​\thexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\n​\thexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n\n## 14.备份hexo到git分支hexo_bak\n\n​\t1.添加所有文件夹和文件到本地仓库\n\n```\ngit add .\n```\n\n​\t2.提交文件\n\n```\ngit commit -m \"提交注释\"\n```\n\n​\t3.push到git分支\n\n```\ngit push --set-upstream origin hexo_bak\n```\n\n","source":"_posts/hexo环境重新快速搭建.md","raw":"---\ntitle: 更换电脑hexo环境如何快速重新搭建？\ndate: 2023-4-11 15:59:11\ncategories: 笔记\ntags: \ncomments: false\ndescription: \n\n---\n\n## 1.安装Git(默认安装)\n\n下载网址https://git-scm.com/download/win\n\n<!--more-->\n\n## #2.克隆main主分支，\n\n```\n$ git clone -b main https://github.com/XXX/XXX.github.io.git\n```\n\n## 3.克隆hexo_bak分支，\n\n```\n$ git clone -b hexo_bak https://github.com/XXX/XXX.github.io.git\n```\n\n## 4.安装node.js(修改安装目录，默认安装)\n\n下载网址https://nodejs.org/en，\n\n## 5.用 node -v 和 npm -v 命令检查版本\n\n上述node.js安装成功之后，npm同时也已经安装成功，用 node -v 和 npm -v 命令检查版本\n\n## 6.配置npm在安装全局模块时的路径和缓存cache的路径\n\n否则默认安装在C盘，不方便管理且占用C盘空间\n\t1，在node.js安装目录下新建两个文件夹 node_global和node_cache\n\t2，在git bush命令下执行如下两个命令：\n\n```c\n\tnpm config set prefix \"F:\\Blogs\\nodejs\\node_global\"\n\tnpm config set cache \"F:\\Blogs\\nodejs\\node_cache\"\n```\n\n​\t3，在环境变量 -> 系统变量中新建一个变量名为 “NODE_PATH”， 值为“F:\\Blogs\\nodejs\\node_modules”，\n​\t4，最后编辑用户变量里的Path，将相应npm的路径改为：F:\\Blogs\\nodejs\\node_global，\n​\t5，在git bush命令下执行 \n\n```\nnpm install webpack -g\n```\n\n 然后安装成功后可以看到自定义的两个文件夹已生效：\n\t6，npm webpack -v 查看安装webpack的版本号\n\n## 7.输入npm命令安装Hexo：\n\n```c\nnpm install -g hexo-cli\n```\n\n## 8.安装完成后，输入 hexo init 命令初始化博客：\n\n## 9.然后输入 hexo g 静态部署： \n\n## 10.部署完成，输入hexo s 命令可以查看\n\n浏览器输入 http://localhost:4000 就可以打开新部署的网页：看完之后 ctrl +c 停止运行服务器。\n\n## 11.hexo命令\n\n```c\n\thexo init    //命令初始化博客：\n\thexo clean   //清除缓存文件 db.json 和已生成的静态文件 public\n\thexo g       //生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\n\thexo s       //命令可以查看新部署的网页,浏览器输入 http://localhost:4000\n\thexo d       //自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n```\n\n## 12.绑定GitHub\n\n​\t1.输入 ssh 命令，查看本机是否安装 SSH：ssh\n​\t2.输入 ssh-keygen -t rsa 命令（注意空格），指定 RSA 算法生成密钥，然后敲四次回车键，生成两个文件:秘钥 id_rsa 和公钥 id_rsa.pub. \n​\t3.将公钥 id_rsa.pub 的内容添加到 GitHub->settings->SSH and GPG keys-> New SSH key.\n​\t4.在 Git Bash 中输入 ssh -T git@github.com 进行检验\n\n## 13.将博客部署到设定的git仓库主分支main\n\n​\t安装Git部署插件npm install hexo-deployer-git --save(删除原.deploy_git文件夹，hexo g后重新生成)\n​\thexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\n​\thexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\n​\thexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n\n## 14.备份hexo到git分支hexo_bak\n\n​\t1.添加所有文件夹和文件到本地仓库\n\n```\ngit add .\n```\n\n​\t2.提交文件\n\n```\ngit commit -m \"提交注释\"\n```\n\n​\t3.push到git分支\n\n```\ngit push --set-upstream origin hexo_bak\n```\n\n","slug":"hexo环境重新快速搭建","published":1,"updated":"2023-04-11T08:24:02.734Z","_id":"clgbycqco0001s8obco3m00nq","layout":"post","photos":[],"link":"","content":"<h2 id=\"1-安装Git-默认安装\"><a href=\"#1-安装Git-默认安装\" class=\"headerlink\" title=\"1.安装Git(默认安装)\"></a>1.安装Git(默认安装)</h2><p>下载网址<a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-克隆main主分支，\"><a href=\"#2-克隆main主分支，\" class=\"headerlink\" title=\"#2.克隆main主分支，\"></a>#2.克隆main主分支，</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b main https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-克隆hexo-bak分支，\"><a href=\"#3-克隆hexo-bak分支，\" class=\"headerlink\" title=\"3.克隆hexo_bak分支，\"></a>3.克隆hexo_bak分支，</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b hexo_bak https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装node-js-修改安装目录，默认安装\"><a href=\"#4-安装node-js-修改安装目录，默认安装\" class=\"headerlink\" title=\"4.安装node.js(修改安装目录，默认安装)\"></a>4.安装node.js(修改安装目录，默认安装)</h2><p>下载网址<a href=\"https://nodejs.org/en%EF%BC%8C\">https://nodejs.org/en，</a></p>\n<h2 id=\"5-用-node-v-和-npm-v-命令检查版本\"><a href=\"#5-用-node-v-和-npm-v-命令检查版本\" class=\"headerlink\" title=\"5.用 node -v 和 npm -v 命令检查版本\"></a>5.用 node -v 和 npm -v 命令检查版本</h2><p>上述node.js安装成功之后，npm同时也已经安装成功，用 node -v 和 npm -v 命令检查版本</p>\n<h2 id=\"6-配置npm在安装全局模块时的路径和缓存cache的路径\"><a href=\"#6-配置npm在安装全局模块时的路径和缓存cache的路径\" class=\"headerlink\" title=\"6.配置npm在安装全局模块时的路径和缓存cache的路径\"></a>6.配置npm在安装全局模块时的路径和缓存cache的路径</h2><p>否则默认安装在C盘，不方便管理且占用C盘空间<br>    1，在node.js安装目录下新建两个文件夹 node_global和node_cache<br>    2，在git bush命令下执行如下两个命令：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">&quot;F:\\Blogs\\nodejs\\node_global&quot;</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">&quot;F:\\Blogs\\nodejs\\node_cache&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t3，在环境变量 -&gt; 系统变量中新建一个变量名为 “NODE_PATH”， 值为“F:\\Blogs\\nodejs\\node_modules”，<br>​\t4，最后编辑用户变量里的Path，将相应npm的路径改为：F:\\Blogs\\nodejs\\node_global，<br>​\t5，在git bush命令下执行 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n\n<p> 然后安装成功后可以看到自定义的两个文件夹已生效：<br>    6，npm webpack -v 查看安装webpack的版本号</p>\n<h2 id=\"7-输入npm命令安装Hexo：\"><a href=\"#7-输入npm命令安装Hexo：\" class=\"headerlink\" title=\"7.输入npm命令安装Hexo：\"></a>7.输入npm命令安装Hexo：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-安装完成后，输入-hexo-init-命令初始化博客：\"><a href=\"#8-安装完成后，输入-hexo-init-命令初始化博客：\" class=\"headerlink\" title=\"8.安装完成后，输入 hexo init 命令初始化博客：\"></a>8.安装完成后，输入 hexo init 命令初始化博客：</h2><h2 id=\"9-然后输入-hexo-g-静态部署：\"><a href=\"#9-然后输入-hexo-g-静态部署：\" class=\"headerlink\" title=\"9.然后输入 hexo g 静态部署：\"></a>9.然后输入 hexo g 静态部署：</h2><h2 id=\"10-部署完成，输入hexo-s-命令可以查看\"><a href=\"#10-部署完成，输入hexo-s-命令可以查看\" class=\"headerlink\" title=\"10.部署完成，输入hexo s 命令可以查看\"></a>10.部署完成，输入hexo s 命令可以查看</h2><p>浏览器输入 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 就可以打开新部署的网页：看完之后 ctrl +c 停止运行服务器。</p>\n<h2 id=\"11-hexo命令\"><a href=\"#11-hexo命令\" class=\"headerlink\" title=\"11.hexo命令\"></a>11.hexo命令</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init    <span class=\"comment\">//命令初始化博客：</span></span><br><span class=\"line\">hexo clean   <span class=\"comment\">//清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class=\"line\">hexo g       <span class=\"comment\">//生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class=\"line\">hexo s       <span class=\"comment\">//命令可以查看新部署的网页,浏览器输入 http://localhost:4000</span></span><br><span class=\"line\">hexo d       <span class=\"comment\">//自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-绑定GitHub\"><a href=\"#12-绑定GitHub\" class=\"headerlink\" title=\"12.绑定GitHub\"></a>12.绑定GitHub</h2><p>​\t1.输入 ssh 命令，查看本机是否安装 SSH：ssh<br>​\t2.输入 ssh-keygen -t rsa 命令（注意空格），指定 RSA 算法生成密钥，然后敲四次回车键，生成两个文件:秘钥 id_rsa 和公钥 id_rsa.pub.<br>​\t3.将公钥 id_rsa.pub 的内容添加到 GitHub-&gt;settings-&gt;SSH and GPG keys-&gt; New SSH key.<br>​\t4.在 Git Bash 中输入 ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a> 进行检验</p>\n<h2 id=\"13-将博客部署到设定的git仓库主分支main\"><a href=\"#13-将博客部署到设定的git仓库主分支main\" class=\"headerlink\" title=\"13.将博客部署到设定的git仓库主分支main\"></a>13.将博客部署到设定的git仓库主分支main</h2><p>​\t安装Git部署插件npm install hexo-deployer-git –save(删除原.deploy_git文件夹，hexo g后重新生成)<br>​\thexo clean   #清除缓存文件 db.json 和已生成的静态文件 public<br>​\thexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)<br>​\thexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</p>\n<h2 id=\"14-备份hexo到git分支hexo-bak\"><a href=\"#14-备份hexo到git分支hexo-bak\" class=\"headerlink\" title=\"14.备份hexo到git分支hexo_bak\"></a>14.备份hexo到git分支hexo_bak</h2><p>​\t1.添加所有文件夹和文件到本地仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>​\t2.提交文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;提交注释&quot;</span><br></pre></td></tr></table></figure>\n\n<p>​\t3.push到git分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin hexo_bak</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"style":""}},"length":1775,"excerpt":"<h2 id=\"1-安装Git-默认安装\"><a href=\"#1-安装Git-默认安装\" class=\"headerlink\" title=\"1.安装Git(默认安装)\"></a>1.安装Git(默认安装)</h2><p>下载网址<a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>","more":"<h2 id=\"2-克隆main主分支，\"><a href=\"#2-克隆main主分支，\" class=\"headerlink\" title=\"#2.克隆main主分支，\"></a>#2.克隆main主分支，</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b main https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-克隆hexo-bak分支，\"><a href=\"#3-克隆hexo-bak分支，\" class=\"headerlink\" title=\"3.克隆hexo_bak分支，\"></a>3.克隆hexo_bak分支，</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b hexo_bak https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装node-js-修改安装目录，默认安装\"><a href=\"#4-安装node-js-修改安装目录，默认安装\" class=\"headerlink\" title=\"4.安装node.js(修改安装目录，默认安装)\"></a>4.安装node.js(修改安装目录，默认安装)</h2><p>下载网址<a href=\"https://nodejs.org/en%EF%BC%8C\">https://nodejs.org/en，</a></p>\n<h2 id=\"5-用-node-v-和-npm-v-命令检查版本\"><a href=\"#5-用-node-v-和-npm-v-命令检查版本\" class=\"headerlink\" title=\"5.用 node -v 和 npm -v 命令检查版本\"></a>5.用 node -v 和 npm -v 命令检查版本</h2><p>上述node.js安装成功之后，npm同时也已经安装成功，用 node -v 和 npm -v 命令检查版本</p>\n<h2 id=\"6-配置npm在安装全局模块时的路径和缓存cache的路径\"><a href=\"#6-配置npm在安装全局模块时的路径和缓存cache的路径\" class=\"headerlink\" title=\"6.配置npm在安装全局模块时的路径和缓存cache的路径\"></a>6.配置npm在安装全局模块时的路径和缓存cache的路径</h2><p>否则默认安装在C盘，不方便管理且占用C盘空间<br>    1，在node.js安装目录下新建两个文件夹 node_global和node_cache<br>    2，在git bush命令下执行如下两个命令：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">&quot;F:\\Blogs\\nodejs\\node_global&quot;</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">&quot;F:\\Blogs\\nodejs\\node_cache&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t3，在环境变量 -&gt; 系统变量中新建一个变量名为 “NODE_PATH”， 值为“F:\\Blogs\\nodejs\\node_modules”，<br>​\t4，最后编辑用户变量里的Path，将相应npm的路径改为：F:\\Blogs\\nodejs\\node_global，<br>​\t5，在git bush命令下执行 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n\n<p> 然后安装成功后可以看到自定义的两个文件夹已生效：<br>    6，npm webpack -v 查看安装webpack的版本号</p>\n<h2 id=\"7-输入npm命令安装Hexo：\"><a href=\"#7-输入npm命令安装Hexo：\" class=\"headerlink\" title=\"7.输入npm命令安装Hexo：\"></a>7.输入npm命令安装Hexo：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-安装完成后，输入-hexo-init-命令初始化博客：\"><a href=\"#8-安装完成后，输入-hexo-init-命令初始化博客：\" class=\"headerlink\" title=\"8.安装完成后，输入 hexo init 命令初始化博客：\"></a>8.安装完成后，输入 hexo init 命令初始化博客：</h2><h2 id=\"9-然后输入-hexo-g-静态部署：\"><a href=\"#9-然后输入-hexo-g-静态部署：\" class=\"headerlink\" title=\"9.然后输入 hexo g 静态部署：\"></a>9.然后输入 hexo g 静态部署：</h2><h2 id=\"10-部署完成，输入hexo-s-命令可以查看\"><a href=\"#10-部署完成，输入hexo-s-命令可以查看\" class=\"headerlink\" title=\"10.部署完成，输入hexo s 命令可以查看\"></a>10.部署完成，输入hexo s 命令可以查看</h2><p>浏览器输入 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 就可以打开新部署的网页：看完之后 ctrl +c 停止运行服务器。</p>\n<h2 id=\"11-hexo命令\"><a href=\"#11-hexo命令\" class=\"headerlink\" title=\"11.hexo命令\"></a>11.hexo命令</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init    <span class=\"comment\">//命令初始化博客：</span></span><br><span class=\"line\">hexo clean   <span class=\"comment\">//清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class=\"line\">hexo g       <span class=\"comment\">//生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class=\"line\">hexo s       <span class=\"comment\">//命令可以查看新部署的网页,浏览器输入 http://localhost:4000</span></span><br><span class=\"line\">hexo d       <span class=\"comment\">//自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-绑定GitHub\"><a href=\"#12-绑定GitHub\" class=\"headerlink\" title=\"12.绑定GitHub\"></a>12.绑定GitHub</h2><p>​\t1.输入 ssh 命令，查看本机是否安装 SSH：ssh<br>​\t2.输入 ssh-keygen -t rsa 命令（注意空格），指定 RSA 算法生成密钥，然后敲四次回车键，生成两个文件:秘钥 id_rsa 和公钥 id_rsa.pub.<br>​\t3.将公钥 id_rsa.pub 的内容添加到 GitHub-&gt;settings-&gt;SSH and GPG keys-&gt; New SSH key.<br>​\t4.在 Git Bash 中输入 ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a> 进行检验</p>\n<h2 id=\"13-将博客部署到设定的git仓库主分支main\"><a href=\"#13-将博客部署到设定的git仓库主分支main\" class=\"headerlink\" title=\"13.将博客部署到设定的git仓库主分支main\"></a>13.将博客部署到设定的git仓库主分支main</h2><p>​\t安装Git部署插件npm install hexo-deployer-git –save(删除原.deploy_git文件夹，hexo g后重新生成)<br>​\thexo clean   #清除缓存文件 db.json 和已生成的静态文件 public<br>​\thexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)<br>​\thexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</p>\n<h2 id=\"14-备份hexo到git分支hexo-bak\"><a href=\"#14-备份hexo到git分支hexo-bak\" class=\"headerlink\" title=\"14.备份hexo到git分支hexo_bak\"></a>14.备份hexo到git分支hexo_bak</h2><p>​\t1.添加所有文件夹和文件到本地仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>​\t2.提交文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;提交注释&quot;</span><br></pre></td></tr></table></figure>\n\n<p>​\t3.push到git分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin hexo_bak</span><br></pre></td></tr></table></figure>"},{"title":"next主题美化（持续更新）","date":"2022-03-16T02:08:11.000Z","comments":0,"description":null,"_content":"\n## 1，新建“分类”下的页面\n\n1，打开主题配置文件\"config.yml\"\n\n2，找到Menu Settings\n\n<!--more-->\n\nmenu:\n  home: / || fa fa-home\t\t#首页\n  categories: /categories/ || fa fa-th\t#分类\n  notes: /categories/笔记/ || fa fa-folder-open\t#笔记\n  read: /categories/阅读/ || fa fa-book\t#阅读\n  tags: /tags/ || fa fa-tags\t\t#标签\n  archives: /archives/ || fa fa-archive\t#时间轴\n  about: /about/ || fa fa-user\t\t#关于\n  #schedule: /schedule/ || fa fa-calendar\t#日程表\n  #sitemap: /sitemap.xml || fa fa-sitemap\t#站点地图\n  #commonweal: /404/ || fa fa-heartbeat\t#公益 404\n\n3，对应添加你需要的页面，如：read: /categories/阅读/ || fa fa-book\t#阅读，read页面属于'categories'分类的子页面'阅读'，“||”前面的是目标链接，后面的是图标名称，next使用的图标全是[图标库 - Font Awesome 中文网](https://link.zhihu.com/?target=http%3A//www.fontawesome.com.cn/faicons/%23web-application)这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。\n\n4，新添加的菜单需要翻译对应的中文，打开theme/next/languages/zh-CN.yml，在menu下设置：\n\n5，同时，需要在Hexo根目录下的source中创建对应的文件夹，文件夹名称与<read>保持一致，文件夹中创建index.md文件，进行该页面描述，type必须与步骤3中添加的<categories>一致\n\n 在根目录下打开Git Bash，输入如下代码： hexo new page \"categories\" sources文件夹下会生成文件夹，文件中有一个`index.md`文件，修改内容分别如下： \n\ntitle: 阅读\ndate: 2021-01-08 16:04:21\ntype: \"categories\"\ncomments: false \n\n注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 \n\n6，编辑博客文章时，categories分类必须与步骤3中添加的<阅读>一致\n\ntitle: 如何阅读一本书？\ndate: 2021-01-07 15:59:11\ncategories: 阅读\ntags: \n\n-读书\ncomments: false\ndescription: \n\n7，至此，上传后的博客文章和创建的页面相关联，正常显示，调转\n\n## 2，鼠标点击红心特效\n\n 在`/themes/next/source/js/`下新建文件 clicklove.js ，接着把下面的代码拷贝粘贴到 clicklove.js 文件中： \n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n 在`\\themes\\next\\layout\\_layout.swig`文件末尾添加： \n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/click.js\"></script>\n```\n\n## 3，添加字数统计和阅读时长\n\n```c\n// 1，安装hexo-symbols-count-time \n$ npm installl hexo-symbols-count-time --save\n//1.1如果有警告如下\nnpm WARN babel-eslint@10.0.1 requires a peer of eslint@>= 4.12.1 but none is installed. You must install peer dependencies yourself.\n//还需安装eslint\n$ npm install eslint --save\n//2,在Hexo站点配置文件添加如下配置\nsymbols_count_time:\n  symbols: true                # 文章字数统计\n  time: true                   # 文章阅读时长\n  total_symbols: true          # 站点总字数统计\n  total_time: true             # 站点总阅读时长\n  exclude_codeblock: false     # 排除代码字数统计\n  awl: 4\t\t\t\t\t # Average Word Length\n  wpm: 275\t\t\t\t\t # Words Per Minute（每分钟阅读词数）\n  suffix: \"mins.\"\n//3, 在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）\nsymbols_count_time:\n  separated_meta: true     # 是否另起一行（true的话不和发表时间等同一行）\n  item_text_post: true     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）\n  item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）\n```\n\n\n\n## 4，添加背景图片,设置透明和边框圆角\n\n- 进入 `themes\\next\\source\\css` 目录中\n\n- 打开 `main.styl` 文件\n\n- 在末尾添加 `css` 代码即可\n\n-  背景图片位于 `themes\\next\\source\\images` 路径下 \n\n  ```css\n  // 自定义样式\n  // --------------------------------------------------\n  body {\n    background: url(/images/background.png);\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 50%;\n    color: var(--text-color);\n    font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n    font-size: 1em;\n    line-height: 2;\n  }\n  \n  // 侧边标题栏\n  .header-inner {\n    border-radius: 20px 20px 20px 20px; //边框圆角\n    opacity: 0.85;\n  }\n  \n  // 侧边头像栏\n  .sidebar{\n    transition-duration: 0.4s;  \n    opacity: 0.85;  // 透明度\n    border-radius: 10px 10px 10px 10px; //边框圆角\n  }\n  \n  // 侧边头像框内部\n  .sidebar-inner {\n    background: var(--content-bg-color);\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12), 0 -1px 0.5px 0 rgba(0,0,0,0.09);\n    box-sizing: border-box;\n    color: var(--text-color);\n    width: 240px;\n    opacity: 0;\n  }\n  \n  // 中心文章栏\n  .content {\n    padding-top: 15px;\n    opacity: 0.9;\n  }\n  \n  //第一个文章\n  .post-block {\n    background: var(--content-bg-color);\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n    padding: 40px;\n  }\n  \n  //之后的所有文章\n  .post-block + .post-block {\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12), 0 -1px 0.5px 0 rgba(0,0,0,0.09);\n    margin-top: 12px;\n  }\n  ```\n## 5，插入图片\n\n  ### \t全局资源文件夹\n\n  ​\t\t资源（Asset）代表 `source` 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 `source/images` 文件夹中。然后通过类似于 `![](/images/image.jpg)` 的方法访问它们。\n\n  \n\n  ### \t文章资源文件夹\n\n  ​\t\t对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 `config.yml` 文件中的 `post_asset_folder` 选项设为 `true` 来打开。\n\n  ```yaml\n  _config.yml\n  post_asset_folder: true\n  ```\n\n   \t\t\n\n  ​\t当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new [layout] ` 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 \n\n  \n\n  ### \t图片插件\n\n  ​\t插件hexo-renderer-marked解决了这个问题。可以只用`npm install hexo-renderer-marked`命令直接安装，之后在`config.yaml`中更改配置如下：\n\n```yaml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n​\t\t之后就可以在使用`![](image.jpg)`的方式愉快的插入图片了。","source":"_posts/next主题美化.md","raw":"---\ntitle: next主题美化（持续更新）\ndate: 2022-3-16 10:08:11\ncategories: 笔记\ntags: \ncomments: false\ndescription: \n\n---\n\n## 1，新建“分类”下的页面\n\n1，打开主题配置文件\"config.yml\"\n\n2，找到Menu Settings\n\n<!--more-->\n\nmenu:\n  home: / || fa fa-home\t\t#首页\n  categories: /categories/ || fa fa-th\t#分类\n  notes: /categories/笔记/ || fa fa-folder-open\t#笔记\n  read: /categories/阅读/ || fa fa-book\t#阅读\n  tags: /tags/ || fa fa-tags\t\t#标签\n  archives: /archives/ || fa fa-archive\t#时间轴\n  about: /about/ || fa fa-user\t\t#关于\n  #schedule: /schedule/ || fa fa-calendar\t#日程表\n  #sitemap: /sitemap.xml || fa fa-sitemap\t#站点地图\n  #commonweal: /404/ || fa fa-heartbeat\t#公益 404\n\n3，对应添加你需要的页面，如：read: /categories/阅读/ || fa fa-book\t#阅读，read页面属于'categories'分类的子页面'阅读'，“||”前面的是目标链接，后面的是图标名称，next使用的图标全是[图标库 - Font Awesome 中文网](https://link.zhihu.com/?target=http%3A//www.fontawesome.com.cn/faicons/%23web-application)这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。\n\n4，新添加的菜单需要翻译对应的中文，打开theme/next/languages/zh-CN.yml，在menu下设置：\n\n5，同时，需要在Hexo根目录下的source中创建对应的文件夹，文件夹名称与<read>保持一致，文件夹中创建index.md文件，进行该页面描述，type必须与步骤3中添加的<categories>一致\n\n 在根目录下打开Git Bash，输入如下代码： hexo new page \"categories\" sources文件夹下会生成文件夹，文件中有一个`index.md`文件，修改内容分别如下： \n\ntitle: 阅读\ndate: 2021-01-08 16:04:21\ntype: \"categories\"\ncomments: false \n\n注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 \n\n6，编辑博客文章时，categories分类必须与步骤3中添加的<阅读>一致\n\ntitle: 如何阅读一本书？\ndate: 2021-01-07 15:59:11\ncategories: 阅读\ntags: \n\n-读书\ncomments: false\ndescription: \n\n7，至此，上传后的博客文章和创建的页面相关联，正常显示，调转\n\n## 2，鼠标点击红心特效\n\n 在`/themes/next/source/js/`下新建文件 clicklove.js ，接着把下面的代码拷贝粘贴到 clicklove.js 文件中： \n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n\n```\n\n 在`\\themes\\next\\layout\\_layout.swig`文件末尾添加： \n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/click.js\"></script>\n```\n\n## 3，添加字数统计和阅读时长\n\n```c\n// 1，安装hexo-symbols-count-time \n$ npm installl hexo-symbols-count-time --save\n//1.1如果有警告如下\nnpm WARN babel-eslint@10.0.1 requires a peer of eslint@>= 4.12.1 but none is installed. You must install peer dependencies yourself.\n//还需安装eslint\n$ npm install eslint --save\n//2,在Hexo站点配置文件添加如下配置\nsymbols_count_time:\n  symbols: true                # 文章字数统计\n  time: true                   # 文章阅读时长\n  total_symbols: true          # 站点总字数统计\n  total_time: true             # 站点总阅读时长\n  exclude_codeblock: false     # 排除代码字数统计\n  awl: 4\t\t\t\t\t # Average Word Length\n  wpm: 275\t\t\t\t\t # Words Per Minute（每分钟阅读词数）\n  suffix: \"mins.\"\n//3, 在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）\nsymbols_count_time:\n  separated_meta: true     # 是否另起一行（true的话不和发表时间等同一行）\n  item_text_post: true     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）\n  item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）\n```\n\n\n\n## 4，添加背景图片,设置透明和边框圆角\n\n- 进入 `themes\\next\\source\\css` 目录中\n\n- 打开 `main.styl` 文件\n\n- 在末尾添加 `css` 代码即可\n\n-  背景图片位于 `themes\\next\\source\\images` 路径下 \n\n  ```css\n  // 自定义样式\n  // --------------------------------------------------\n  body {\n    background: url(/images/background.png);\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 50%;\n    color: var(--text-color);\n    font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n    font-size: 1em;\n    line-height: 2;\n  }\n  \n  // 侧边标题栏\n  .header-inner {\n    border-radius: 20px 20px 20px 20px; //边框圆角\n    opacity: 0.85;\n  }\n  \n  // 侧边头像栏\n  .sidebar{\n    transition-duration: 0.4s;  \n    opacity: 0.85;  // 透明度\n    border-radius: 10px 10px 10px 10px; //边框圆角\n  }\n  \n  // 侧边头像框内部\n  .sidebar-inner {\n    background: var(--content-bg-color);\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12), 0 -1px 0.5px 0 rgba(0,0,0,0.09);\n    box-sizing: border-box;\n    color: var(--text-color);\n    width: 240px;\n    opacity: 0;\n  }\n  \n  // 中心文章栏\n  .content {\n    padding-top: 15px;\n    opacity: 0.9;\n  }\n  \n  //第一个文章\n  .post-block {\n    background: var(--content-bg-color);\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n    padding: 40px;\n  }\n  \n  //之后的所有文章\n  .post-block + .post-block {\n    border-radius: 10px 10px 10px 10px; //边框圆角\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12), 0 -1px 0.5px 0 rgba(0,0,0,0.09);\n    margin-top: 12px;\n  }\n  ```\n## 5，插入图片\n\n  ### \t全局资源文件夹\n\n  ​\t\t资源（Asset）代表 `source` 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 `source/images` 文件夹中。然后通过类似于 `![](/images/image.jpg)` 的方法访问它们。\n\n  \n\n  ### \t文章资源文件夹\n\n  ​\t\t对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 `config.yml` 文件中的 `post_asset_folder` 选项设为 `true` 来打开。\n\n  ```yaml\n  _config.yml\n  post_asset_folder: true\n  ```\n\n   \t\t\n\n  ​\t当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new [layout] ` 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 \n\n  \n\n  ### \t图片插件\n\n  ​\t插件hexo-renderer-marked解决了这个问题。可以只用`npm install hexo-renderer-marked`命令直接安装，之后在`config.yaml`中更改配置如下：\n\n```yaml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n​\t\t之后就可以在使用`![](image.jpg)`的方式愉快的插入图片了。","slug":"next主题美化","published":1,"updated":"2023-04-13T04:44:33.135Z","_id":"clgbz5hpe0000s8ob1fr65els","layout":"post","photos":[],"link":"","content":"<h2 id=\"1，新建“分类”下的页面\"><a href=\"#1，新建“分类”下的页面\" class=\"headerlink\" title=\"1，新建“分类”下的页面\"></a>1，新建“分类”下的页面</h2><p>1，打开主题配置文件”config.yml”</p>\n<p>2，找到Menu Settings</p>\n<span id=\"more\"></span>\n\n<p>menu:<br>  home: &#x2F; || fa fa-home\t\t#首页<br>  categories: &#x2F;categories&#x2F; || fa fa-th\t#分类<br>  notes: &#x2F;categories&#x2F;笔记&#x2F; || fa fa-folder-open\t#笔记<br>  read: &#x2F;categories&#x2F;阅读&#x2F; || fa fa-book\t#阅读<br>  tags: &#x2F;tags&#x2F; || fa fa-tags\t\t#标签<br>  archives: &#x2F;archives&#x2F; || fa fa-archive\t#时间轴<br>  about: &#x2F;about&#x2F; || fa fa-user\t\t#关于<br>  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar\t#日程表<br>  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap\t#站点地图<br>  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat\t#公益 404</p>\n<p>3，对应添加你需要的页面，如：read: &#x2F;categories&#x2F;阅读&#x2F; || fa fa-book\t#阅读，read页面属于’categories’分类的子页面’阅读’，“||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a href=\"https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application\">图标库 - Font Awesome 中文网</a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。</p>\n<p>4，新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置：</p>\n<p>5，同时，需要在Hexo根目录下的source中创建对应的文件夹，文件夹名称与<read>保持一致，文件夹中创建index.md文件，进行该页面描述，type必须与步骤3中添加的<categories>一致</p>\n<p> 在根目录下打开Git Bash，输入如下代码： hexo new page “categories” sources文件夹下会生成文件夹，文件中有一个<code>index.md</code>文件，修改内容分别如下： </p>\n<p>title: 阅读<br>date: 2021-01-08 16:04:21<br>type: “categories”<br>comments: false </p>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 </p>\n<p>6，编辑博客文章时，categories分类必须与步骤3中添加的&lt;阅读&gt;一致</p>\n<p>title: 如何阅读一本书？<br>date: 2021-01-07 15:59:11<br>categories: 阅读<br>tags: </p>\n<p>-读书<br>comments: false<br>description: </p>\n<p>7，至此，上传后的博客文章和创建的页面相关联，正常显示，调转</p>\n<h2 id=\"2，鼠标点击红心特效\"><a href=\"#2，鼠标点击红心特效\" class=\"headerlink\" title=\"2，鼠标点击红心特效\"></a>2，鼠标点击红心特效</h2><p> 在<code>/themes/next/source/js/</code>下新建文件 clicklove.js ，接着把下面的代码拷贝粘贴到 clicklove.js 文件中： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/click.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，添加字数统计和阅读时长\"><a href=\"#3，添加字数统计和阅读时长\" class=\"headerlink\" title=\"3，添加字数统计和阅读时长\"></a>3，添加字数统计和阅读时长</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1，安装hexo-symbols-count-time </span></span><br><span class=\"line\">$ npm installl hexo-symbols-count-time --save</span><br><span class=\"line\"><span class=\"comment\">//1.1如果有警告如下</span></span><br><span class=\"line\">npm WARN babel-eslint@<span class=\"number\">10.0</span><span class=\"number\">.1</span> requires a peer of eslint@&gt;= <span class=\"number\">4.12</span><span class=\"number\">.1</span> but none is installed. You must install peer dependencies yourself.</span><br><span class=\"line\"><span class=\"comment\">//还需安装eslint</span></span><br><span class=\"line\">$ npm install eslint --save</span><br><span class=\"line\"><span class=\"comment\">//2,在Hexo站点配置文件添加如下配置</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: <span class=\"literal\">true</span>                # 文章字数统计</span><br><span class=\"line\">  time: <span class=\"literal\">true</span>                   # 文章阅读时长</span><br><span class=\"line\">  total_symbols: <span class=\"literal\">true</span>          # 站点总字数统计</span><br><span class=\"line\">  total_time: <span class=\"literal\">true</span>             # 站点总阅读时长</span><br><span class=\"line\">  exclude_codeblock: <span class=\"literal\">false</span>     # 排除代码字数统计</span><br><span class=\"line\">  awl: <span class=\"number\">4</span>\t\t\t\t\t # Average Word Length</span><br><span class=\"line\">  wpm: <span class=\"number\">275</span>\t\t\t\t\t # Words Per Minute（每分钟阅读词数）</span><br><span class=\"line\">  suffix: <span class=\"string\">&quot;mins.&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//3, 在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: <span class=\"literal\">true</span>     # 是否另起一行（<span class=\"literal\">true</span>的话不和发表时间等同一行）</span><br><span class=\"line\">  item_text_post: <span class=\"literal\">true</span>     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br><span class=\"line\">  item_text_total: <span class=\"literal\">false</span>   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4，添加背景图片-设置透明和边框圆角\"><a href=\"#4，添加背景图片-设置透明和边框圆角\" class=\"headerlink\" title=\"4，添加背景图片,设置透明和边框圆角\"></a>4，添加背景图片,设置透明和边框圆角</h2><ul>\n<li><p>进入 <code>themes\\next\\source\\css</code> 目录中</p>\n</li>\n<li><p>打开 <code>main.styl</code> 文件</p>\n</li>\n<li><p>在末尾添加 <code>css</code> 代码即可</p>\n</li>\n<li><p>背景图片位于 <code>themes\\next\\source\\images</code> 路径下</p>\n</li>\n</ul>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义样式</span><br><span class=\"line\">// --------------------------------------------------</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/images/background.png</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lato&#x27;</span>, <span class=\"string\">&quot;PingFang SC&quot;</span>, <span class=\"string\">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边标题栏</span><br><span class=\"line\"><span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边头像栏</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.4s</span>;  </span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;  // 透明度</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边头像框内部</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--content-bg-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.09</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 中心文章栏</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第一个文章</span><br><span class=\"line\"><span class=\"selector-class\">.post-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--content-bg-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//之后的所有文章</span><br><span class=\"line\"><span class=\"selector-class\">.post-block</span> + <span class=\"selector-class\">.post-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.09</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，插入图片\"><a href=\"#5，插入图片\" class=\"headerlink\" title=\"5，插入图片\"></a>5，插入图片</h2><h3 id=\"全局资源文件夹\"><a href=\"#全局资源文件夹\" class=\"headerlink\" title=\"全局资源文件夹\"></a>全局资源文件夹</h3><p>  ​\t\t资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>\n<h3 id=\"文章资源文件夹\"><a href=\"#文章资源文件夹\" class=\"headerlink\" title=\"文章资源文件夹\"></a>文章资源文件夹</h3><p>  ​\t\t对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">_config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>  ​\t当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] </code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 </p>\n<h3 id=\"图片插件\"><a href=\"#图片插件\" class=\"headerlink\" title=\"图片插件\"></a>图片插件</h3><p>  ​\t插件hexo-renderer-marked解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在<code>config.yaml</code>中更改配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t之后就可以在使用<code>![](image.jpg)</code>的方式愉快的插入图片了。</p>\n","site":{"data":{"style":""}},"length":6236,"excerpt":"<h2 id=\"1，新建“分类”下的页面\"><a href=\"#1，新建“分类”下的页面\" class=\"headerlink\" title=\"1，新建“分类”下的页面\"></a>1，新建“分类”下的页面</h2><p>1，打开主题配置文件”config.yml”</p>\n<p>2，找到Menu Settings</p>","more":"<p>menu:<br>  home: &#x2F; || fa fa-home\t\t#首页<br>  categories: &#x2F;categories&#x2F; || fa fa-th\t#分类<br>  notes: &#x2F;categories&#x2F;笔记&#x2F; || fa fa-folder-open\t#笔记<br>  read: &#x2F;categories&#x2F;阅读&#x2F; || fa fa-book\t#阅读<br>  tags: &#x2F;tags&#x2F; || fa fa-tags\t\t#标签<br>  archives: &#x2F;archives&#x2F; || fa fa-archive\t#时间轴<br>  about: &#x2F;about&#x2F; || fa fa-user\t\t#关于<br>  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar\t#日程表<br>  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap\t#站点地图<br>  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat\t#公益 404</p>\n<p>3，对应添加你需要的页面，如：read: &#x2F;categories&#x2F;阅读&#x2F; || fa fa-book\t#阅读，read页面属于’categories’分类的子页面’阅读’，“||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a href=\"https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application\">图标库 - Font Awesome 中文网</a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。</p>\n<p>4，新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置：</p>\n<p>5，同时，需要在Hexo根目录下的source中创建对应的文件夹，文件夹名称与<read>保持一致，文件夹中创建index.md文件，进行该页面描述，type必须与步骤3中添加的<categories>一致</p>\n<p> 在根目录下打开Git Bash，输入如下代码： hexo new page “categories” sources文件夹下会生成文件夹，文件中有一个<code>index.md</code>文件，修改内容分别如下： </p>\n<p>title: 阅读<br>date: 2021-01-08 16:04:21<br>type: “categories”<br>comments: false </p>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 </p>\n<p>6，编辑博客文章时，categories分类必须与步骤3中添加的&lt;阅读&gt;一致</p>\n<p>title: 如何阅读一本书？<br>date: 2021-01-07 15:59:11<br>categories: 阅读<br>tags: </p>\n<p>-读书<br>comments: false<br>description: </p>\n<p>7，至此，上传后的博客文章和创建的页面相关联，正常显示，调转</p>\n<h2 id=\"2，鼠标点击红心特效\"><a href=\"#2，鼠标点击红心特效\" class=\"headerlink\" title=\"2，鼠标点击红心特效\"></a>2，鼠标点击红心特效</h2><p> 在<code>/themes/next/source/js/</code>下新建文件 clicklove.js ，接着把下面的代码拷贝粘贴到 clicklove.js 文件中： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/click.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，添加字数统计和阅读时长\"><a href=\"#3，添加字数统计和阅读时长\" class=\"headerlink\" title=\"3，添加字数统计和阅读时长\"></a>3，添加字数统计和阅读时长</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1，安装hexo-symbols-count-time </span></span><br><span class=\"line\">$ npm installl hexo-symbols-count-time --save</span><br><span class=\"line\"><span class=\"comment\">//1.1如果有警告如下</span></span><br><span class=\"line\">npm WARN babel-eslint@<span class=\"number\">10.0</span><span class=\"number\">.1</span> requires a peer of eslint@&gt;= <span class=\"number\">4.12</span><span class=\"number\">.1</span> but none is installed. You must install peer dependencies yourself.</span><br><span class=\"line\"><span class=\"comment\">//还需安装eslint</span></span><br><span class=\"line\">$ npm install eslint --save</span><br><span class=\"line\"><span class=\"comment\">//2,在Hexo站点配置文件添加如下配置</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: <span class=\"literal\">true</span>                # 文章字数统计</span><br><span class=\"line\">  time: <span class=\"literal\">true</span>                   # 文章阅读时长</span><br><span class=\"line\">  total_symbols: <span class=\"literal\">true</span>          # 站点总字数统计</span><br><span class=\"line\">  total_time: <span class=\"literal\">true</span>             # 站点总阅读时长</span><br><span class=\"line\">  exclude_codeblock: <span class=\"literal\">false</span>     # 排除代码字数统计</span><br><span class=\"line\">  awl: <span class=\"number\">4</span>\t\t\t\t\t # Average Word Length</span><br><span class=\"line\">  wpm: <span class=\"number\">275</span>\t\t\t\t\t # Words Per Minute（每分钟阅读词数）</span><br><span class=\"line\">  suffix: <span class=\"string\">&quot;mins.&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//3, 在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: <span class=\"literal\">true</span>     # 是否另起一行（<span class=\"literal\">true</span>的话不和发表时间等同一行）</span><br><span class=\"line\">  item_text_post: <span class=\"literal\">true</span>     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br><span class=\"line\">  item_text_total: <span class=\"literal\">false</span>   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4，添加背景图片-设置透明和边框圆角\"><a href=\"#4，添加背景图片-设置透明和边框圆角\" class=\"headerlink\" title=\"4，添加背景图片,设置透明和边框圆角\"></a>4，添加背景图片,设置透明和边框圆角</h2><ul>\n<li><p>进入 <code>themes\\next\\source\\css</code> 目录中</p>\n</li>\n<li><p>打开 <code>main.styl</code> 文件</p>\n</li>\n<li><p>在末尾添加 <code>css</code> 代码即可</p>\n</li>\n<li><p>背景图片位于 <code>themes\\next\\source\\images</code> 路径下</p>\n</li>\n</ul>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义样式</span><br><span class=\"line\">// --------------------------------------------------</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/images/background.png</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lato&#x27;</span>, <span class=\"string\">&quot;PingFang SC&quot;</span>, <span class=\"string\">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边标题栏</span><br><span class=\"line\"><span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边头像栏</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.4s</span>;  </span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;  // 透明度</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 侧边头像框内部</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--content-bg-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.09</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 中心文章栏</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第一个文章</span><br><span class=\"line\"><span class=\"selector-class\">.post-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--content-bg-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//之后的所有文章</span><br><span class=\"line\"><span class=\"selector-class\">.post-block</span> + <span class=\"selector-class\">.post-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>; //边框圆角</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span> -<span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.06</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.12</span>), <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0.5px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.09</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，插入图片\"><a href=\"#5，插入图片\" class=\"headerlink\" title=\"5，插入图片\"></a>5，插入图片</h2><h3 id=\"全局资源文件夹\"><a href=\"#全局资源文件夹\" class=\"headerlink\" title=\"全局资源文件夹\"></a>全局资源文件夹</h3><p>  ​\t\t资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>\n<h3 id=\"文章资源文件夹\"><a href=\"#文章资源文件夹\" class=\"headerlink\" title=\"文章资源文件夹\"></a>文章资源文件夹</h3><p>  ​\t\t对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">_config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>  ​\t当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] </code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 </p>\n<h3 id=\"图片插件\"><a href=\"#图片插件\" class=\"headerlink\" title=\"图片插件\"></a>图片插件</h3><p>  ​\t插件hexo-renderer-marked解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在<code>config.yaml</code>中更改配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t之后就可以在使用<code>![](image.jpg)</code>的方式愉快的插入图片了。</p>"},{"title":"Video for Linux two(简称v4l2)","date":"2023-04-13T03:56:11.000Z","comments":0,"description":null,"typora-root-url":"1-V4l2","_content":"\n<div align = \"center\">Video for Linux two(简称v4l2)</div>\n\n\n# 一、概述\n\n vl42是video for Linux 2的缩写，是一套Linux内核视频设备的驱动框架，该驱动框架为应用层提供一套统一的操作接口(一系列的ioctl)。包括一套数据结构和底层V4L2驱动接口。只能在Linux下使用。\n\n<!--more-->\n\nV4L2在设计时，是要支持很多广泛的设备的，它们之中只有一部分在本质上是真正的视频设备，可以支持多种设备,它可以有以下几种接口\n\nvideo capture interface：视频采集接口，这种接口应用于摄像头，v4l2在最初设计的时候就是应用于这种功能\n\nvideo output interface：视频输出接口，将静止图像或图像序列编码为模拟视频信号，通过此接口，应用程序可以控制编码过程并将图像从用户空间移动到驱动程序\n\nvideo overlay interface：视频直接传输接口，可以将采集到的视频数据直接传输到显示设备，不需要cpu参与，这种方式的显示图像的效率比其他方式高得多\n\n其他接口这里就不介绍了，下面来看一下v4l2的API\n\n\n# 二、作用\n\n它使程序有发现设备和操作设备的能力。它主要是用一系列的回调函数来实现这些功能。像设置摄像头的频率、帧频、视频压缩格式和图像参数等等。并使得它们的输出标准化。当然也可以用于其他多媒体的开发，如音频等。\n\n# 三、存放位置\n\n在Linux下，所有外设都被看成一种特殊的文件，成为“设备文件”，可以象访问普通文件一样对其进行读写。一般来说，采用V4L2驱动的摄像头设备文是/dev/v4l/video0。为了通用，可以建立一个到/dev/video0的链接。V4L2支持两种方式来采集图像：内存映射方式(mmap)和直接读取方式(read)。V4L2在include/linux/videodev.h文件中定义了一些重要的数据结构，在采集图像的过程中，就是通过对这些数据的操作来获得最终的图像数据。Linux系统V4L2的能力可在Linux内核编译阶段配置，默认情况下都有此开发接口。V4L2从Linux 2.5.x版本的内核中开始出现。结构体详细参数可以在/include/uapi/linux/videodev2.h中查看。\n\n# 四、V4l2框架操作流程\n\n```c\n//1.打开视频设备文件\nint fd = open(\"/dev/video0\",O_RDWR);\n//2.查询视频设备属性，如：是否具有视频输入或者音频输入输出等\nioctl(fd,VIDIOC_QUERYCAP,&cap);\n//3.选择视频输入，一个视频设备可以有多个视频输入\n//4.设置视频采集的参数:视频的制式，图像的采集窗口，帧格式，帧率，旋转方式\nioctl(fd,VIDIOC_S_FMT,&fmt);\n//5.向驱动申请视频流数据的帧缓冲区，一般为4个。\nioctl(fd, VIDIOC_REQBUFS, &req);\n//6.查询帧缓冲区在内核空间中的长度和偏移量 \nioctl(fd, VIDIOC_QUERYBUF, &buf);\n//7.将申请到的帧缓冲映射到用户空间mmap，这样可以直接操作采集到的帧，不用复制\nbuffers[i].length = buf.length;\nbuffers[i].start = mmap(NULL, buffers[i].length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, buffers[i].offset);;\n//8.将申请到的帧缓冲全部放入视频采集输出队列，以便存放采集的数据\nioctl (fd, VIDIOC_QBUF, &buf);\n//9.开始视频采集\nioctl (fd, VIDIOC_STREAMON, &type);\n//10.出列以取得已采集数据的帧缓冲，取得原始数据\nioctl (fd, VIDIOC_DQBUF, &buf);\n//此时应用程序处理该帧缓冲区的数据，如：进行数据的处理和保存，\nfp = fopen(picture.yuv,\"w\");//保存图片\"w\"，保存视频\"a\"追加写\nfwrite(addr,1,length,fp);\nfclose(fp);\n//11.处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集\nioctl (fd, VIDIOC_QBUF, &buf);\n//12.停止视频的采集\nioctl (fd, VIDIOC_STREAMOFF, &type);\n//13.释放申请的视频帧缓冲区\nunmap;\n//14.关闭视频设备文件\nclose(fd);\n```\n\n\n\n# 五、V4l2的常用IOCTL接口命令-->>结构体介绍\n\n## 1、常用的IOCTL接口命令\n\n在内核目录include/linux/videodev2.h中定义\n\n```c\nVIDIOC_QUERYCAP        //查询驱动功能 \nVIDIOC_QUERYSTD     //检查当前视频设备支持的标准，例如PAL或NTSC。\nVIDIOC_S_INPUT\nVIDIOC_ENUMINPUT\t//枚举所有可用的输入\nVIDIOC_S_PARM\nVIDIOC_ENUM_FMT        //获取当前驱动支持的视频格式 \nVIDIOC_S_FMT        //设置当前驱动的频捕获格式 \nVIDIOC_G_FMT        //读取当前驱动的频捕获格式 \nVIDIOC_TRY_FMT        //验证当前驱动的显示格式 \nVIDIOC_CROPCAP        //查询驱动的修剪能力 \nVIDIOC_S_CROP        //设置视频信号的矩形边框 \nVIDIOC_G_CROP        //读取视频信号的矩形边框\nVIDIOC_REQBUFS\t\t //分配内存 \nVIDIOC_QUERYBUF //把VIDIOC_REQBUFS中分配的数据缓存转换成物理地址\nVIDIOC_QBUF        //把数据从缓存中读取出来 \nVIDIOC_DQBUF        //把数据放回缓存队列 \nVIDIOC_STREAMON        //开始视频显示函数 \nVIDIOC_STREAMOFF        //结束视频显示函数 \nVIDIOC_EXPBUF        //\n```\n\n## 2、常用的结构体\n\n在内核目录include/linux/videodev2.h中定义。参见/include/uapi/linux/videodev2.h\n\n```c\nstruct v4l2_capability        //视频设备的功能，对应命令VIDIOC_QUERYCAP \nstruct v4l2_std_id        //视频制式\nstruct v4l2_input        //视频输入信息，对应命令VIDIOC_ENUMINPUT\nstruct v4l2_streamparm //结构体v4l2_streamparm来描述视频流的属性\nstruct v4l2_standard        //视频的制式，比如PAL，NTSC，对应命令VIDIOC_ENUMSTD \nstruct v4l2_format        //帧的格式，对应命令VIDIOC_G_FMT、VIDIOC_S_FMT等\nstruct v4l2_crop        //视频信号矩形边框\nstruct v4l2_requestbuffers        //申请帧缓冲，对应命令VIDIOC_REQBUFS\nstruct v4l2_buffer        //驱动中的一帧图像缓存，对应命令VIDIOC_QUERYBUF\nstruct v4l2_exportbuffer //导出fd\n```\n\n### 1、v4l2_capability\n\n```c\nstruct v4l2_capability\n{\n\tu8 driver[16]; // 驱动名字\n\tu8 card[32]; // 设备名字\n\tu8 bus_info[32]; // 设备在系统中的位置\n\tu32 version; // 驱动版本号\n\tu32 capabilities; // 设备支持的操作\n\tu32 reserved[4]; // 保留字段\n};\n```\n\n其中域 capabilities 代表设备支持的操作模式，常见的值有 V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING 表示是一个视频捕捉设备并且具有数据流控制模式；另外 driver 域需要和 struct video_device 中的 name 匹配。\n\n### 2、v4l2_input\n\n```c\nstruct v4l2_input {\n\t__u32\t     index;\t\t/*  Which input */\n\t__u8\t     name[32];\t\t/*  Label */\n\t__u32\t     type;\t\t/*  Type of input */\n\t__u32\t     audioset;\t\t/*  Associated audios (bitfield) */\n\t__u32        tuner;             /*  Associated tuner */\n\tv4l2_std_id  std;\n\t__u32\t     status;\n\t__u32\t     reserved[4];\n};\n```\n\n视频捕获的应用首先要通过VIDIOC_ENUMINPUT命令来枚举所有可用的输入。在V4L2层，这个调用会转换成调用一个驱动中对应的回调函数：\n int (*vidioc_enum_input)(struct file *file, void *private_data,  struct v4l2_input *input);\n\n### 3、v4l2_format\n\n```c\nstruct v4l2_format { \n    enum v4l2_buf_type type; \n    union { \n        struct v4l2_pix_format         pix;     /* V4L2_BUF_TYPE_VIDEO_CAPTURE */ \n        struct v4l2_window             win;     /* V4L2_BUF_TYPE_VIDEO_OVERLAY */ \n        struct v4l2_vbi_format         vbi;     /* V4L2_BUF_TYPE_VBI_CAPTURE */ \n        struct v4l2_sliced_vbi_format  sliced;  /* V4L2_BUF_TYPE_SLICED_VBI_CAPTURE */ \n        __u8   raw_data[200];                   /* user-defined */ \n    } fmt; \n}; \n \nenum v4l2_buf_type { \n    V4L2_BUF_TYPE_VIDEO_CAPTURE        = 1, //视频捕获模式\n    V4L2_BUF_TYPE_VIDEO_OUTPUT         = 2, \n    V4L2_BUF_TYPE_VIDEO_OVERLAY        = 3, \n    ... \n    V4L2_BUF_TYPE_PRIVATE              = 0x80, \n}; \n   \nstruct v4l2_pix_format { \n    __u32                   width; //视频的宽\n    __u32                   height; //视频的高\n    __u32                   pixelformat; //视频数据格式\n    enum v4l2_field         field; \n    __u32                   bytesperline;   /* for padding, zero if unused */ \n    __u32                   sizeimage; \n    enum v4l2_colorspace    colorspace; \n    __u32                   priv;           /* private data, depends on pixelformat */ \n};\n```\n\n常见的捕获模式为 V4L2_BUF_TYPE_VIDEO_CAPTURE 即视频捕捉模式，在此模式下 fmt 联合体采用域 v4l2_pix_format：其中 width 为视频的宽、height 为视频的高、pixelformat 为视频数据格式（常见的值有 V4L2_PIX_FMT_YUV422P | V4L2_PIX_FMT_RGB565）、bytesperline 为一行图像占用的字节数、sizeimage 则为图像占用的总字节数、colorspace 指定设备的颜色空间。\n\n### 4、v4l2_requestbuffers\n\n```c\nstruct v4l2_requestbuffers {\n    __u32                   count;\n    enum v4l2_buf_type      type;\n    enum v4l2_memory        memory;\n    __u32                   reserved[2];\n};\nenum v4l2_memory {\n    V4L2_MEMORY_MMAP             = 1,\n    V4L2_MEMORY_USERPTR          = 2,\n    V4L2_MEMORY_OVERLAY          = 3,\n};\n```\n\nVIDIOC_REQBUFS 命令通过结构 v4l2_requestbuffers 请求驱动申请一片连续的内存用于缓存视频信息;count 指定根据图像占用空间大小申请的缓存区个数，type 为视频捕获模式，memory 为内存区的使用方式.\n\n### 5、v4l2_buffer\n\n```c\nstruct v4l2_buffer {\n    __u32   index;\t//buffer 序号 \n    enum v4l2_buf_type    type;\t//buffer 类型 \n    __u32    bytesused;\t//缓存已使用空间大小，buffer 中已使用的字节数\n    __u32    flags;\t//区分是MMAP 还是USERPTR\n    enum v4l2_field  field;\n    struct timeval    timestamp;\t//获取第一个字节时的系统时间 \n    struct v4l2_timecode   timecode;\n    __u32     sequence;\t//队列中的序号\n  \n    /* memory location */\n    enum v4l2_memory    memory;\t//缓存使用方式\n    union {\n            __u32   offset;//当前缓存与内存区起始地址的偏移，缓冲帧地址，只对MMAP 有效  \n            unsigned long   userptr;\n            struct v4l2_plane *planes;\n    } m;\n    __u32    length;\t//缓冲帧长度\n    __u32    input;\n    __u32    reserved;\t//一般用于传递物理地址值\n};\n\nstruct v4l2_plane {\n\t__u32\t\t\tbytesused;\n\t__u32\t\t\tlength;\n\tunion {\n\t\t__u32\t\tmem_offset;//offset是放在m.mem_offset中返回用户空间的\n\t\tunsigned long\tuserptr;\n\t\t__s32\t\tfd;\n\t} m;\n\t__u32\t\t\tdata_offset;\n\t__u32\t\t\treserved[11];\n};\n```\n\nflags 为缓存当前状态（常见值有 V4L2_BUF_FLAG_MAPPED | V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE，分别代表当前缓存已经映射、缓存可以采集数据、缓存可以提取数据）\n\n另外 VIDIOC_QUERYBUF，VIDIOC_QBUF 和 VIDIOC_DQBUF 命令都采用结构 v4l2_buffer 与驱动通信：VIDIOC_QBUF 命令向驱动传递应用程序已经处理完的缓存，即将缓存加入空闲可捕获视频的队列，传递的主要参数为 index；VIDIOC_DQBUF 命令向驱动获取已经存放有视频数据的缓存，v4l2_buffer 的各个域几乎都会被更新，但主要的参数也是 index，应用程序会根据 index 确定可用数据的起始地址和范围。\n\n### 6、v4l2_captureparm\n\n设置Stream参数。(主要是采集帧数)\n\n```c\nstruct v4l2_streamparm parms;\nparms.parm.capture.timeperframe.numerator=1;\nparms.parm.capture.timeperframe.denominator=60;\nrel = ioctl(fdUsbCam,VIDIOC_S_PARM, setfps);\n```\n\n对于捕获设备而言，parm.capture字段是要关注的内容，这个结构体如下：\n\n```c\nstruct v4l2_captureparm\n    {\n       __u32             capability;\n       __u32             capturemode;\n       structv4l2_fract  timeperframe;\n       __u32             extendedmode;\n       __u32          readbuffers;\n       __u32             reserved[4];\n   }; \ntimeperframe字段用于指定想要使用的帧频率，它又是一个结构体：\n    struct v4l2_fract{\n       __u32  numerator;\n       __u32  denominator;\n    };\n```\n\nnumerator和denominator所描述的系数给出的是成功的帧之间的时间间隔。numerator 分子， denominator 分母。主要表达每次帧之间时间间隔。 numerator/ denominator秒一帧。\n\n### 7、v4l2_exportbuffer\n\n```c\nstruct v4l2_exportbuffer {\n\t__u32\t\ttype; /* enum v4l2_buf_type */\n\t__u32\t\tindex;\n\t__u32\t\tplane;\n\t__u32\t\tflags;\n\t__s32\t\tfd;\n\t__u32\t\treserved[11];\n};\n```\n\n\n\n# 六、应用程序代码分析\n\n## 1、保存图像picture.yuv\n\n见code中，camera_app_pic.c\n\n```c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <linux/videodev2.h>\n#include <sys/ioctl.h>\n#include <stdlib.h>\n#include <sys/mman.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <unistd.h>\n#include <string.h>\n\ntypedef struct VideoBuffer {\n\tvoid   *start;//帧缓存mmap映射后的首地址\n\tsize_t  length;//缓存大小\n} VideoBuffer;\nVideoBuffer *buffers;//用来存放映射后的帧缓存区地址\n\nint camera_device_open(void)\n{\n\tint fd;\n\t//用阻塞模式打开摄像头设备\n\tfd = open(\"/dev/video0\",O_RDWR,0);//设备节点\n\tif(fd < 0){\n\t\tperror(\"open /dev/video0 is fail.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\treturn fd;\n}\n\nint init_camera_attribute(int fd)\n{\n\tint numBufs;//\n\tv4l2_std_id id;\n\tstruct v4l2_format fmt;\n\tstruct v4l2_requestbuffers  req;\n\tstruct v4l2_buffer    buf;\n\n\t//检查当前视频设备支持的标准\n\tioctl(fd,VIDIOC_QUERYSTD,&id);\n\t\n\t//设置视频捕获格式\n\tmemset(&fmt,0,sizeof(fmt));\n\tfmt.type  = V4L2_BUF_TYPE_VIDEO_CAPTURE;//视频捕获模式\n\tfmt.fmt.pix.width = 640;//视频的宽\n\tfmt.fmt.pix.height = 480;//视频的高\n\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;//视频数据格式YUYV\n//\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YVU420;\n\tfmt.fmt.pix.field = V4L2_FIELD_INTERLACED;\n\n\tif(ioctl(fd,VIDIOC_S_FMT,&fmt) == -1){\n\t\tperror(\"set VIDIOC_S_FMT is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\t\n\t//分配内存，申请帧缓存，\n\tmemset(&req,0,sizeof(req));\n\treq.count = 4;//帧缓存的个数，一般不大于5\n\treq.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\treq.memory = V4L2_MEMORY_MMAP;//内存区的使用方式，mmap映射\n\t\n\tif(ioctl(fd,VIDIOC_REQBUFS,&req) == -1){\n\t\tperror(\"set VIDIOC_REQBUFS is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//获取并记录缓存的物理空间\n\tbuffers = calloc(req.count,sizeof(*buffers));\n\tfor(numBufs = 0; numBufs < req.count; numBufs ++){\n\t\tmemset(&buf,0,sizeof(buf));\n\t\tbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\t\tbuf.memory = V4L2_MEMORY_MMAP;\n\t\tbuf.index = numBufs;//缓存编号，4帧缓存\n\n\t\t//读取缓存，查询帧缓冲区在内核空间中的长度和偏移量\n\t\tif(ioctl(fd,VIDIOC_QUERYBUF,&buf) == -1){\n\t\t\tperror(\"set VIDIOC_REQBUFS is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\t // 转换成相对地址，将申请到的帧缓冲映射到用户空间mmap\n\t\tbuffers[numBufs].length = buf.length;\n\t\tbuffers[numBufs].start  = mmap(NULL,buf.length,PROT_READ|PROT_WRITE,\n\t\t\t\tMAP_SHARED,fd,buf.m.offset);\n\t\tif(buffers[numBufs].start == MAP_FAILED){\n\t\t\tperror(\"mmap is fail\");\n\t\t\texit(EXIT_FAILURE);\t\n\t\t}\n\n\t\t// 放入缓存队列\n\t\tif(ioctl(fd,VIDIOC_QBUF,&buf) == -1){\n\t\t\tperror(\"set VIDIOC_QBUF is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\nint start_capturing(int fd)\n{\n\tenum v4l2_buf_type type;\n\n\t//开始采集数据\n\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tif(ioctl(fd,VIDIOC_STREAMON,&type) == -1){\n\t\tperror(\"start capturing is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n}\n//保存图片\nint build_picture(void *addr,int length)\n{\n\tFILE *fp;\n\tstatic int num=0;\n\tchar picture_name[20];\n\tsprintf(picture_name,\"picture%d.yuv\",num++);\n\t\n\tfp = fopen(picture_name,\"w\");\n\tif(fp == NULL){\n\t\tperror(\"fail to open \");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tfwrite(addr,1,length,fp);\n\n\tfclose(fp);\n\n\treturn 0;\n}\n\nint read_image(int fd)\n{\n\tstruct v4l2_buffer buf;\n\tmemset(&buf,0,sizeof(buf));\n\tbuf.type=V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tbuf.memory=V4L2_MEMORY_MMAP;\n\tbuf.index=0;\n\n\t//读取缓存，出列以取得已采集数据的帧缓冲，取得原始数据\n\tif(ioctl(fd,VIDIOC_DQBUF,&buf) == -1){\n\t\tperror(\"set VIDIOC_DQBUF is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//将数据存为图片\n\tbuild_picture(buffers[buf.index].start,buffers[buf.index].length);\n\n\t//重新放入缓存队列，处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集\n\tif(ioctl(fd,VIDIOC_QBUF,&buf) == -1){\n\t\tperror(\"reset VIDIOC_QBUF is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n\n}\n\nint when_to_read(int fd)\n{\n\tint i=0;\n\tfor(i=0;i<3;i++)//保存三张图片\n\t{\n\t\tfd_set rfds;//指定内核监测的文件描述符集合\n\t\tstruct timeval tv;//设置超时时间\n\t\tint retval;\n\n\t\tFD_ZERO(&rfds);//清空集合\n\t\tFD_SET(fd, &rfds);//将fd添加到集合中\n\n\t\ttv.tv_sec = 2;\n\t\ttv.tv_usec = 0;\n\t\t//当有数据采集好在缓冲区准备好时，开始读取缓存数据\n\t\tretval = select(fd+1, &rfds, NULL, NULL, &tv);\n\t\tif(retval == -1){\n\t\t\t perror(\"select()\");\n\t\t\t exit(EXIT_FAILURE);\n\t\t}else if(retval == 0){\n\t\t\tprintf(\"select is timeout\\n\");\n\t\t}else{\n\t\t\tread_image(fd);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nint stop_capturing(int fd)\n{\n\tenum v4l2_buf_type type;\n\n\t//停止采集数据\n\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tif(ioctl(fd,VIDIOC_STREAMOFF,&type) == -1){\n\t\tperror(\"stop capturing is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n}\n\nint uninit_camera(int fd)\n{\n\tint i;\n\t//释放申请的视频帧缓冲区\n\tfor(i=0;i<4;i++){\n\t\tif(-1 == munmap(buffers[i].start,buffers[i].length))\n\t\t{\n\t\t\tperror(\"munmap is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t}\n\tfree(buffers);\n\t//关闭视频设备文件\n\tclose(fd);\n\treturn 0;\n}\nint main(int argc, const char *argv[])\n{\n\tint fd;\n\tfd = camera_device_open();\t\n\t\n\tinit_camera_attribute(fd);\n\t\n\tstart_capturing(fd);\n\t\n\twhen_to_read(fd);\n\n\tstop_capturing(fd);\n\t\n\tuninit_camera(fd);\n\n\treturn 0;\n}\n\n```\n\n\n\n## 2、保存视频video.yuv\n\n见code中，camera_app_mp4.c\n\n主要区别：fp = fopen(video_name,\"a\")，追加写的方式打开，进行采集\n\n# 七、V4l2驱动框架\n\n## 1、主要对象\n\n### 1、video_device\n\n```c\nstruct video_device\n\t\t{\n\t\t\tconst struct v4l2_file_operations *fops; \n\t\t\t//操作方法结构体\n\t\t\tstruct cdev *cdev;\t（file_opreations）\t\n\t\t\t//字符设备驱动\n\t\t\tstruct v4l2_device *v4l2_dev;\t/* v4l2_device parent */\n\t\t\tchar name[32]; \n\t\t\t//驱动的名字\n\t\t\tint minor;\n\t\t\t//次设备号\n\t\t\tvoid (*release)(struct video_device *vdev);\n\t\t\t//释放资源的函数\n\t\t\tconst struct v4l2_ioctl_ops *ioctl_ops;\n\t\t\t//ioctl的操作方法\n\t\t};\n```\n\n  一个字符设备，为用户空间提供设备节点(/dev/videox)，提供系统调用的相关操作(open、ioctl…) \n\n可以看到video_device中含有一个cdev还有v4l2_device，此外还有fops和ioctl_ops，从应用层进行系统调用会经过v4l2的核心层回调到这里 \n\n#### v4l2_file_operations\n\n```c\nstruct v4l2_file_operations {\n\tstruct module *owner;\n\tssize_t (*read) (struct file *, char __user *, size_t, loff_t *);\n\tssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);\n\tunsigned int (*poll) (struct file *, struct poll_table_struct *);\n\tlong (*ioctl) (struct file *, unsigned int, unsigned long);\n\tlong (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);\n\tunsigned long (*get_unmapped_area) (struct file *, unsigned long,\n\t\t\t\tunsigned long, unsigned long, unsigned long);\n\tint (*mmap) (struct file *, struct vm_area_struct *);\n\tint (*open) (struct file *);\n\tint (*release) (struct file *);\n};\n\n```\n\n#### v4l2_ioctl_ops\n\n```c\nstruct v4l2_ioctl_ops {\n\tint (*vidioc_querycap)(struct file *file, void *fh, struct v4l2_capability *cap);\n\t/* Buffer handlers */\n\tint (*vidioc_reqbufs) (struct file *file, void *fh, struct v4l2_requestbuffers *b);\n\tint (*vidioc_querybuf)(struct file *file, void *fh, struct v4l2_buffer *b);\n\tint (*vidioc_qbuf)    (struct file *file, void *fh, struct v4l2_buffer *b);\n\tint (*vidioc_dqbuf)   (struct file *file, void *fh, struct v4l2_buffer *b);\n    /* Stream on/off */\n\tint (*vidioc_streamon) (struct file *file, void *fh, enum v4l2_buf_type i);\n\tint (*vidioc_streamoff)(struct file *file, void *fh, enum v4l2_buf_type i);\n   \t...\n};\n```\n\n v4l2有很多ioctl操作，具体实现都在这里 \n\n### 2、v4l2_device\n\n```c\nstruct v4l2_device {\n\t/* used to keep track of the registered subdevs */\n\tstruct list_head subdevs;\n    ...\n};\n```\n\n  嵌入到video_device中，表示一个v4l2设备的实例 \n\n可以看到v4l2_device中有一个v4l2_subdev的链表，v4l2_device的主要目的时用来管理v4l2_subdev \n\n### 3、v4l2_subdev\n\n```c\nstruct v4l2_subdev {\n\tstruct list_head list;\n\tstruct v4l2_device *v4l2_dev;\n\tconst struct v4l2_subdev_ops *ops;\n};\n```\n\n 依附在v4l2_device之下，并表示一个v4l2设备的子设备，一个v4l2_devide下可以有多个sub_device \n\n v4l2_subdev中有一个v4l2_subdev_ops，实现了一系列的操作，供v4l2_device调用 \n\n **subdev的设计目的是为了多路复用，就是用一个v4l2_device可以服务多个v4l2_subdev** \n\n### 4、V4l2提供的注册接口\n\n```c\nint video_register_device(struct video_device *vdev, int type, int nr);//video_device注册\nvoid video_unregister_device(struct video_device *vdev);//video_device注销\nint v4l2_device_register(struct device *dev, struct v4l2_device *v4l2_dev);//v4l2_device注册\nvoid v4l2_device_unregister(struct v4l2_device *v4l2_dev);//v4l2_device注销\nint v4l2_device_register_subdev(struct v4l2_device *v4l2_dev,struct v4l2_subdev *sd);//v4l2_subdev注册\nvoid v4l2_device_unregister_subdev(struct v4l2_subdev *sd);//v4l2_subdev注销\n\n```\n\n\n\n## 2、图示\n\n<img src=\"1.png\"  />\n\n<img src=\"2.png\"  />\n\n<img src=\"3.png\" style=\"zoom:80%;\" />\n\n## 3、主要框架\n\n```c\n#include <...>\n\nstatic struct video_device* video_dev;\nstatic struct v4l2_device v4l2_dev;\n\n/* 实现各种系统调用 */\nstatic const struct v4l2_file_operations video_dev_fops = {\n\t.owner\t\t    = THIS_MODULE,\n\t.release        = vdev_close,\n\t.read           = vdev_read,\n\t.poll\t\t    = vdev_poll,\n\t.ioctl          = video_ioctl2,\n\t.mmap           = vdev_mmap,\n};\n\n/* 实现各种系统调用 */\nstatic const struct v4l2_ioctl_ops video_dev_ioctl_ops = {\n\t.vidioc_querycap      = vidioc_querycap,\n\t.vidioc_enum_fmt_vid_cap  = vidioc_enum_fmt_vid_cap,\n\t.vidioc_g_fmt_vid_cap     = vidioc_g_fmt_vid_cap,\n\t.vidioc_try_fmt_vid_cap   = vidioc_try_fmt_vid_cap,\n\t.vidioc_s_fmt_vid_cap     = vidioc_s_fmt_vid_cap,\n\t.vidioc_reqbufs       = vidioc_reqbufs,\n\t.vidioc_querybuf      = vidioc_querybuf,\n\t.vidioc_qbuf          = vidioc_qbuf,\n\t.vidioc_dqbuf         = vidioc_dqbuf,\n\t.vidioc_enum_input    = vidioc_enum_input,\n\t.vidioc_g_input       = vidioc_g_input,\n\t.vidioc_s_input       = vidioc_s_input,\n\t.vidioc_streamon      = vidioc_streamon,\n\t.vidioc_streamoff     = vidioc_streamoff,\n};\n\nstatic int __init video_init(void)\n{\n    /* 分配并设置一个video_device */\n    video_dev = video_device_alloc();\n    video_dev->fops = &video_dev_fops;\n    video_dev->ioctl_ops = &video_dev_ioctl_ops;\n    video_dev->release = video_device_release;\n    video_dev->tvnorms = V4L2_STD_525_60;\n    video_dev->current_norm = V4L2_STD_NTSC_M;\n\n    /* 注册一个v4l2_device */\n    v4l2_device_register(video_dev->dev, &v4l2_dev);    \n    video_dev->v4l2_dev = &video_dev;\n\n    /* 注册一个video_device字符设备 */\n    video_register_device(video_dev, VFL_TYPE_GRABBER, -1);\n\n    return 0;\n}\n\nstatic void __exit video_exit(void)\n{\n    //注销\n    video_unregister_device(video_dev);\n    v4l2_device_unregister(&v4l2_dev);\n    video_device_release(video_dev);\n}\n\nmodule_init(video_init);\nmodule_exit(video_exit);\nMODULE_LICENSE(\"GPL\")\n```\n\n# 八、多路video输入分析\n\n## 1、多路操作流程\n\n```c\n//1.设备初始化\n_Init(){\n    _open()｛\n        fd[i] = open(dev_name[i], O_RDWR /* required */  | O_NONBLOCK, 0);\n    ioctl(fd[i], VIDIOC_S_INPUT, &inp);//设置输入\n    ioctl(fd[i], VIDIOC_S_PARM, &parms);//主要用来设置采集帧数\n        ｝;//打开设备节点\n    _Fmtset()｛\n        ioctl(fd[i], VIDIOC_S_FMT, &fmt);//设置\n        ioctl(fd[i], VIDIOC_G_FMT, &fmt);//查询，判断设置是否成功\n        ｝;//设置视频捕获模式\n    _BuffReq()｛\n        ioctl(fd[i], VIDIOC_REQBUFS, &req);\n        ioctl(fd[i], VIDIOC_QUERYBUF, &buf);\n        ioctl(fd[i], VIDIOC_QBUF, &buf);\n        ｝;//申请帧缓存，查询缓存转换地址，放入队列\n    _ON{\n        ioctl(fd[i], VIDIOC_STREAMON, &type);\n    };//开启视频捕获\n}\n//2.创建多线程\npthread_create(&capture_pth, NULL,Video_Capture, NULL);\n//3.采集数据\nVideo_Capture(){\n    //用select监视文件描述符，等待采集，如果有准备好的\n    select(fd[3] + 1, &fdr, NULL, NULL, &tv);//IO多路复用\n    //当准备好时，采用互斥锁的方式，唤醒休眠的数据处理函数\n    if( FD_ISSET(fd[0],&fdr) && FD_ISSET(fd[1],&fdr) && \\\n\t\tFD_ISSET(fd[2],&fdr) && FD_ISSET(fd[3],&fdr))\n\t\t{\n            _Queryaddr(){\n                ioctl(fd[i], VIDIOC_DQBUF, &buf);//出列\n                VideoPhyAddr[i] = buf.m.planes[0].m.mem_offset;\n                ioctl(fd[i], VIDIOC_QBUF, &buf);//入列\n            };\n            pthread_mutex_lock(&VideoMutex);//上锁\n            pthread_cond_signal(&VideoCond);//唤醒休眠\n            pthread_mutex_unlock(&VideoMutex);//解锁\n        }\n};\n//4.数据处理\n_LoadVideoData(){\n    pthread_mutex_lock(&VideoMutex);//上锁\n\tpthread_cond_wait(&VideoCond, &VideoMutex);//休眠\n\tpthread_mutex_unlock(&VideoMutex);//解锁\n    //************************\n    //***原始视频流数据处理***\n    //************************\n};\n```\n\n","source":"_posts/1-V4l2.md","raw":"---\ntitle: Video for Linux two(简称v4l2)\ndate: 2023-4-13 11:56:11\ncategories: 笔记\ntags: 嵌入式\ncomments: false\ndescription: \ntypora-root-url: 1-V4l2\n---\n\n<div align = \"center\">Video for Linux two(简称v4l2)</div>\n\n\n# 一、概述\n\n vl42是video for Linux 2的缩写，是一套Linux内核视频设备的驱动框架，该驱动框架为应用层提供一套统一的操作接口(一系列的ioctl)。包括一套数据结构和底层V4L2驱动接口。只能在Linux下使用。\n\n<!--more-->\n\nV4L2在设计时，是要支持很多广泛的设备的，它们之中只有一部分在本质上是真正的视频设备，可以支持多种设备,它可以有以下几种接口\n\nvideo capture interface：视频采集接口，这种接口应用于摄像头，v4l2在最初设计的时候就是应用于这种功能\n\nvideo output interface：视频输出接口，将静止图像或图像序列编码为模拟视频信号，通过此接口，应用程序可以控制编码过程并将图像从用户空间移动到驱动程序\n\nvideo overlay interface：视频直接传输接口，可以将采集到的视频数据直接传输到显示设备，不需要cpu参与，这种方式的显示图像的效率比其他方式高得多\n\n其他接口这里就不介绍了，下面来看一下v4l2的API\n\n\n# 二、作用\n\n它使程序有发现设备和操作设备的能力。它主要是用一系列的回调函数来实现这些功能。像设置摄像头的频率、帧频、视频压缩格式和图像参数等等。并使得它们的输出标准化。当然也可以用于其他多媒体的开发，如音频等。\n\n# 三、存放位置\n\n在Linux下，所有外设都被看成一种特殊的文件，成为“设备文件”，可以象访问普通文件一样对其进行读写。一般来说，采用V4L2驱动的摄像头设备文是/dev/v4l/video0。为了通用，可以建立一个到/dev/video0的链接。V4L2支持两种方式来采集图像：内存映射方式(mmap)和直接读取方式(read)。V4L2在include/linux/videodev.h文件中定义了一些重要的数据结构，在采集图像的过程中，就是通过对这些数据的操作来获得最终的图像数据。Linux系统V4L2的能力可在Linux内核编译阶段配置，默认情况下都有此开发接口。V4L2从Linux 2.5.x版本的内核中开始出现。结构体详细参数可以在/include/uapi/linux/videodev2.h中查看。\n\n# 四、V4l2框架操作流程\n\n```c\n//1.打开视频设备文件\nint fd = open(\"/dev/video0\",O_RDWR);\n//2.查询视频设备属性，如：是否具有视频输入或者音频输入输出等\nioctl(fd,VIDIOC_QUERYCAP,&cap);\n//3.选择视频输入，一个视频设备可以有多个视频输入\n//4.设置视频采集的参数:视频的制式，图像的采集窗口，帧格式，帧率，旋转方式\nioctl(fd,VIDIOC_S_FMT,&fmt);\n//5.向驱动申请视频流数据的帧缓冲区，一般为4个。\nioctl(fd, VIDIOC_REQBUFS, &req);\n//6.查询帧缓冲区在内核空间中的长度和偏移量 \nioctl(fd, VIDIOC_QUERYBUF, &buf);\n//7.将申请到的帧缓冲映射到用户空间mmap，这样可以直接操作采集到的帧，不用复制\nbuffers[i].length = buf.length;\nbuffers[i].start = mmap(NULL, buffers[i].length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, buffers[i].offset);;\n//8.将申请到的帧缓冲全部放入视频采集输出队列，以便存放采集的数据\nioctl (fd, VIDIOC_QBUF, &buf);\n//9.开始视频采集\nioctl (fd, VIDIOC_STREAMON, &type);\n//10.出列以取得已采集数据的帧缓冲，取得原始数据\nioctl (fd, VIDIOC_DQBUF, &buf);\n//此时应用程序处理该帧缓冲区的数据，如：进行数据的处理和保存，\nfp = fopen(picture.yuv,\"w\");//保存图片\"w\"，保存视频\"a\"追加写\nfwrite(addr,1,length,fp);\nfclose(fp);\n//11.处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集\nioctl (fd, VIDIOC_QBUF, &buf);\n//12.停止视频的采集\nioctl (fd, VIDIOC_STREAMOFF, &type);\n//13.释放申请的视频帧缓冲区\nunmap;\n//14.关闭视频设备文件\nclose(fd);\n```\n\n\n\n# 五、V4l2的常用IOCTL接口命令-->>结构体介绍\n\n## 1、常用的IOCTL接口命令\n\n在内核目录include/linux/videodev2.h中定义\n\n```c\nVIDIOC_QUERYCAP        //查询驱动功能 \nVIDIOC_QUERYSTD     //检查当前视频设备支持的标准，例如PAL或NTSC。\nVIDIOC_S_INPUT\nVIDIOC_ENUMINPUT\t//枚举所有可用的输入\nVIDIOC_S_PARM\nVIDIOC_ENUM_FMT        //获取当前驱动支持的视频格式 \nVIDIOC_S_FMT        //设置当前驱动的频捕获格式 \nVIDIOC_G_FMT        //读取当前驱动的频捕获格式 \nVIDIOC_TRY_FMT        //验证当前驱动的显示格式 \nVIDIOC_CROPCAP        //查询驱动的修剪能力 \nVIDIOC_S_CROP        //设置视频信号的矩形边框 \nVIDIOC_G_CROP        //读取视频信号的矩形边框\nVIDIOC_REQBUFS\t\t //分配内存 \nVIDIOC_QUERYBUF //把VIDIOC_REQBUFS中分配的数据缓存转换成物理地址\nVIDIOC_QBUF        //把数据从缓存中读取出来 \nVIDIOC_DQBUF        //把数据放回缓存队列 \nVIDIOC_STREAMON        //开始视频显示函数 \nVIDIOC_STREAMOFF        //结束视频显示函数 \nVIDIOC_EXPBUF        //\n```\n\n## 2、常用的结构体\n\n在内核目录include/linux/videodev2.h中定义。参见/include/uapi/linux/videodev2.h\n\n```c\nstruct v4l2_capability        //视频设备的功能，对应命令VIDIOC_QUERYCAP \nstruct v4l2_std_id        //视频制式\nstruct v4l2_input        //视频输入信息，对应命令VIDIOC_ENUMINPUT\nstruct v4l2_streamparm //结构体v4l2_streamparm来描述视频流的属性\nstruct v4l2_standard        //视频的制式，比如PAL，NTSC，对应命令VIDIOC_ENUMSTD \nstruct v4l2_format        //帧的格式，对应命令VIDIOC_G_FMT、VIDIOC_S_FMT等\nstruct v4l2_crop        //视频信号矩形边框\nstruct v4l2_requestbuffers        //申请帧缓冲，对应命令VIDIOC_REQBUFS\nstruct v4l2_buffer        //驱动中的一帧图像缓存，对应命令VIDIOC_QUERYBUF\nstruct v4l2_exportbuffer //导出fd\n```\n\n### 1、v4l2_capability\n\n```c\nstruct v4l2_capability\n{\n\tu8 driver[16]; // 驱动名字\n\tu8 card[32]; // 设备名字\n\tu8 bus_info[32]; // 设备在系统中的位置\n\tu32 version; // 驱动版本号\n\tu32 capabilities; // 设备支持的操作\n\tu32 reserved[4]; // 保留字段\n};\n```\n\n其中域 capabilities 代表设备支持的操作模式，常见的值有 V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING 表示是一个视频捕捉设备并且具有数据流控制模式；另外 driver 域需要和 struct video_device 中的 name 匹配。\n\n### 2、v4l2_input\n\n```c\nstruct v4l2_input {\n\t__u32\t     index;\t\t/*  Which input */\n\t__u8\t     name[32];\t\t/*  Label */\n\t__u32\t     type;\t\t/*  Type of input */\n\t__u32\t     audioset;\t\t/*  Associated audios (bitfield) */\n\t__u32        tuner;             /*  Associated tuner */\n\tv4l2_std_id  std;\n\t__u32\t     status;\n\t__u32\t     reserved[4];\n};\n```\n\n视频捕获的应用首先要通过VIDIOC_ENUMINPUT命令来枚举所有可用的输入。在V4L2层，这个调用会转换成调用一个驱动中对应的回调函数：\n int (*vidioc_enum_input)(struct file *file, void *private_data,  struct v4l2_input *input);\n\n### 3、v4l2_format\n\n```c\nstruct v4l2_format { \n    enum v4l2_buf_type type; \n    union { \n        struct v4l2_pix_format         pix;     /* V4L2_BUF_TYPE_VIDEO_CAPTURE */ \n        struct v4l2_window             win;     /* V4L2_BUF_TYPE_VIDEO_OVERLAY */ \n        struct v4l2_vbi_format         vbi;     /* V4L2_BUF_TYPE_VBI_CAPTURE */ \n        struct v4l2_sliced_vbi_format  sliced;  /* V4L2_BUF_TYPE_SLICED_VBI_CAPTURE */ \n        __u8   raw_data[200];                   /* user-defined */ \n    } fmt; \n}; \n \nenum v4l2_buf_type { \n    V4L2_BUF_TYPE_VIDEO_CAPTURE        = 1, //视频捕获模式\n    V4L2_BUF_TYPE_VIDEO_OUTPUT         = 2, \n    V4L2_BUF_TYPE_VIDEO_OVERLAY        = 3, \n    ... \n    V4L2_BUF_TYPE_PRIVATE              = 0x80, \n}; \n   \nstruct v4l2_pix_format { \n    __u32                   width; //视频的宽\n    __u32                   height; //视频的高\n    __u32                   pixelformat; //视频数据格式\n    enum v4l2_field         field; \n    __u32                   bytesperline;   /* for padding, zero if unused */ \n    __u32                   sizeimage; \n    enum v4l2_colorspace    colorspace; \n    __u32                   priv;           /* private data, depends on pixelformat */ \n};\n```\n\n常见的捕获模式为 V4L2_BUF_TYPE_VIDEO_CAPTURE 即视频捕捉模式，在此模式下 fmt 联合体采用域 v4l2_pix_format：其中 width 为视频的宽、height 为视频的高、pixelformat 为视频数据格式（常见的值有 V4L2_PIX_FMT_YUV422P | V4L2_PIX_FMT_RGB565）、bytesperline 为一行图像占用的字节数、sizeimage 则为图像占用的总字节数、colorspace 指定设备的颜色空间。\n\n### 4、v4l2_requestbuffers\n\n```c\nstruct v4l2_requestbuffers {\n    __u32                   count;\n    enum v4l2_buf_type      type;\n    enum v4l2_memory        memory;\n    __u32                   reserved[2];\n};\nenum v4l2_memory {\n    V4L2_MEMORY_MMAP             = 1,\n    V4L2_MEMORY_USERPTR          = 2,\n    V4L2_MEMORY_OVERLAY          = 3,\n};\n```\n\nVIDIOC_REQBUFS 命令通过结构 v4l2_requestbuffers 请求驱动申请一片连续的内存用于缓存视频信息;count 指定根据图像占用空间大小申请的缓存区个数，type 为视频捕获模式，memory 为内存区的使用方式.\n\n### 5、v4l2_buffer\n\n```c\nstruct v4l2_buffer {\n    __u32   index;\t//buffer 序号 \n    enum v4l2_buf_type    type;\t//buffer 类型 \n    __u32    bytesused;\t//缓存已使用空间大小，buffer 中已使用的字节数\n    __u32    flags;\t//区分是MMAP 还是USERPTR\n    enum v4l2_field  field;\n    struct timeval    timestamp;\t//获取第一个字节时的系统时间 \n    struct v4l2_timecode   timecode;\n    __u32     sequence;\t//队列中的序号\n  \n    /* memory location */\n    enum v4l2_memory    memory;\t//缓存使用方式\n    union {\n            __u32   offset;//当前缓存与内存区起始地址的偏移，缓冲帧地址，只对MMAP 有效  \n            unsigned long   userptr;\n            struct v4l2_plane *planes;\n    } m;\n    __u32    length;\t//缓冲帧长度\n    __u32    input;\n    __u32    reserved;\t//一般用于传递物理地址值\n};\n\nstruct v4l2_plane {\n\t__u32\t\t\tbytesused;\n\t__u32\t\t\tlength;\n\tunion {\n\t\t__u32\t\tmem_offset;//offset是放在m.mem_offset中返回用户空间的\n\t\tunsigned long\tuserptr;\n\t\t__s32\t\tfd;\n\t} m;\n\t__u32\t\t\tdata_offset;\n\t__u32\t\t\treserved[11];\n};\n```\n\nflags 为缓存当前状态（常见值有 V4L2_BUF_FLAG_MAPPED | V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE，分别代表当前缓存已经映射、缓存可以采集数据、缓存可以提取数据）\n\n另外 VIDIOC_QUERYBUF，VIDIOC_QBUF 和 VIDIOC_DQBUF 命令都采用结构 v4l2_buffer 与驱动通信：VIDIOC_QBUF 命令向驱动传递应用程序已经处理完的缓存，即将缓存加入空闲可捕获视频的队列，传递的主要参数为 index；VIDIOC_DQBUF 命令向驱动获取已经存放有视频数据的缓存，v4l2_buffer 的各个域几乎都会被更新，但主要的参数也是 index，应用程序会根据 index 确定可用数据的起始地址和范围。\n\n### 6、v4l2_captureparm\n\n设置Stream参数。(主要是采集帧数)\n\n```c\nstruct v4l2_streamparm parms;\nparms.parm.capture.timeperframe.numerator=1;\nparms.parm.capture.timeperframe.denominator=60;\nrel = ioctl(fdUsbCam,VIDIOC_S_PARM, setfps);\n```\n\n对于捕获设备而言，parm.capture字段是要关注的内容，这个结构体如下：\n\n```c\nstruct v4l2_captureparm\n    {\n       __u32             capability;\n       __u32             capturemode;\n       structv4l2_fract  timeperframe;\n       __u32             extendedmode;\n       __u32          readbuffers;\n       __u32             reserved[4];\n   }; \ntimeperframe字段用于指定想要使用的帧频率，它又是一个结构体：\n    struct v4l2_fract{\n       __u32  numerator;\n       __u32  denominator;\n    };\n```\n\nnumerator和denominator所描述的系数给出的是成功的帧之间的时间间隔。numerator 分子， denominator 分母。主要表达每次帧之间时间间隔。 numerator/ denominator秒一帧。\n\n### 7、v4l2_exportbuffer\n\n```c\nstruct v4l2_exportbuffer {\n\t__u32\t\ttype; /* enum v4l2_buf_type */\n\t__u32\t\tindex;\n\t__u32\t\tplane;\n\t__u32\t\tflags;\n\t__s32\t\tfd;\n\t__u32\t\treserved[11];\n};\n```\n\n\n\n# 六、应用程序代码分析\n\n## 1、保存图像picture.yuv\n\n见code中，camera_app_pic.c\n\n```c\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <linux/videodev2.h>\n#include <sys/ioctl.h>\n#include <stdlib.h>\n#include <sys/mman.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <unistd.h>\n#include <string.h>\n\ntypedef struct VideoBuffer {\n\tvoid   *start;//帧缓存mmap映射后的首地址\n\tsize_t  length;//缓存大小\n} VideoBuffer;\nVideoBuffer *buffers;//用来存放映射后的帧缓存区地址\n\nint camera_device_open(void)\n{\n\tint fd;\n\t//用阻塞模式打开摄像头设备\n\tfd = open(\"/dev/video0\",O_RDWR,0);//设备节点\n\tif(fd < 0){\n\t\tperror(\"open /dev/video0 is fail.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\treturn fd;\n}\n\nint init_camera_attribute(int fd)\n{\n\tint numBufs;//\n\tv4l2_std_id id;\n\tstruct v4l2_format fmt;\n\tstruct v4l2_requestbuffers  req;\n\tstruct v4l2_buffer    buf;\n\n\t//检查当前视频设备支持的标准\n\tioctl(fd,VIDIOC_QUERYSTD,&id);\n\t\n\t//设置视频捕获格式\n\tmemset(&fmt,0,sizeof(fmt));\n\tfmt.type  = V4L2_BUF_TYPE_VIDEO_CAPTURE;//视频捕获模式\n\tfmt.fmt.pix.width = 640;//视频的宽\n\tfmt.fmt.pix.height = 480;//视频的高\n\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;//视频数据格式YUYV\n//\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YVU420;\n\tfmt.fmt.pix.field = V4L2_FIELD_INTERLACED;\n\n\tif(ioctl(fd,VIDIOC_S_FMT,&fmt) == -1){\n\t\tperror(\"set VIDIOC_S_FMT is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\t\n\t//分配内存，申请帧缓存，\n\tmemset(&req,0,sizeof(req));\n\treq.count = 4;//帧缓存的个数，一般不大于5\n\treq.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\treq.memory = V4L2_MEMORY_MMAP;//内存区的使用方式，mmap映射\n\t\n\tif(ioctl(fd,VIDIOC_REQBUFS,&req) == -1){\n\t\tperror(\"set VIDIOC_REQBUFS is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//获取并记录缓存的物理空间\n\tbuffers = calloc(req.count,sizeof(*buffers));\n\tfor(numBufs = 0; numBufs < req.count; numBufs ++){\n\t\tmemset(&buf,0,sizeof(buf));\n\t\tbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\t\tbuf.memory = V4L2_MEMORY_MMAP;\n\t\tbuf.index = numBufs;//缓存编号，4帧缓存\n\n\t\t//读取缓存，查询帧缓冲区在内核空间中的长度和偏移量\n\t\tif(ioctl(fd,VIDIOC_QUERYBUF,&buf) == -1){\n\t\t\tperror(\"set VIDIOC_REQBUFS is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\t // 转换成相对地址，将申请到的帧缓冲映射到用户空间mmap\n\t\tbuffers[numBufs].length = buf.length;\n\t\tbuffers[numBufs].start  = mmap(NULL,buf.length,PROT_READ|PROT_WRITE,\n\t\t\t\tMAP_SHARED,fd,buf.m.offset);\n\t\tif(buffers[numBufs].start == MAP_FAILED){\n\t\t\tperror(\"mmap is fail\");\n\t\t\texit(EXIT_FAILURE);\t\n\t\t}\n\n\t\t// 放入缓存队列\n\t\tif(ioctl(fd,VIDIOC_QBUF,&buf) == -1){\n\t\t\tperror(\"set VIDIOC_QBUF is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\nint start_capturing(int fd)\n{\n\tenum v4l2_buf_type type;\n\n\t//开始采集数据\n\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tif(ioctl(fd,VIDIOC_STREAMON,&type) == -1){\n\t\tperror(\"start capturing is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n}\n//保存图片\nint build_picture(void *addr,int length)\n{\n\tFILE *fp;\n\tstatic int num=0;\n\tchar picture_name[20];\n\tsprintf(picture_name,\"picture%d.yuv\",num++);\n\t\n\tfp = fopen(picture_name,\"w\");\n\tif(fp == NULL){\n\t\tperror(\"fail to open \");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tfwrite(addr,1,length,fp);\n\n\tfclose(fp);\n\n\treturn 0;\n}\n\nint read_image(int fd)\n{\n\tstruct v4l2_buffer buf;\n\tmemset(&buf,0,sizeof(buf));\n\tbuf.type=V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tbuf.memory=V4L2_MEMORY_MMAP;\n\tbuf.index=0;\n\n\t//读取缓存，出列以取得已采集数据的帧缓冲，取得原始数据\n\tif(ioctl(fd,VIDIOC_DQBUF,&buf) == -1){\n\t\tperror(\"set VIDIOC_DQBUF is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//将数据存为图片\n\tbuild_picture(buffers[buf.index].start,buffers[buf.index].length);\n\n\t//重新放入缓存队列，处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集\n\tif(ioctl(fd,VIDIOC_QBUF,&buf) == -1){\n\t\tperror(\"reset VIDIOC_QBUF is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n\n}\n\nint when_to_read(int fd)\n{\n\tint i=0;\n\tfor(i=0;i<3;i++)//保存三张图片\n\t{\n\t\tfd_set rfds;//指定内核监测的文件描述符集合\n\t\tstruct timeval tv;//设置超时时间\n\t\tint retval;\n\n\t\tFD_ZERO(&rfds);//清空集合\n\t\tFD_SET(fd, &rfds);//将fd添加到集合中\n\n\t\ttv.tv_sec = 2;\n\t\ttv.tv_usec = 0;\n\t\t//当有数据采集好在缓冲区准备好时，开始读取缓存数据\n\t\tretval = select(fd+1, &rfds, NULL, NULL, &tv);\n\t\tif(retval == -1){\n\t\t\t perror(\"select()\");\n\t\t\t exit(EXIT_FAILURE);\n\t\t}else if(retval == 0){\n\t\t\tprintf(\"select is timeout\\n\");\n\t\t}else{\n\t\t\tread_image(fd);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nint stop_capturing(int fd)\n{\n\tenum v4l2_buf_type type;\n\n\t//停止采集数据\n\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tif(ioctl(fd,VIDIOC_STREAMOFF,&type) == -1){\n\t\tperror(\"stop capturing is fail\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn 0;\n}\n\nint uninit_camera(int fd)\n{\n\tint i;\n\t//释放申请的视频帧缓冲区\n\tfor(i=0;i<4;i++){\n\t\tif(-1 == munmap(buffers[i].start,buffers[i].length))\n\t\t{\n\t\t\tperror(\"munmap is fail\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t}\n\tfree(buffers);\n\t//关闭视频设备文件\n\tclose(fd);\n\treturn 0;\n}\nint main(int argc, const char *argv[])\n{\n\tint fd;\n\tfd = camera_device_open();\t\n\t\n\tinit_camera_attribute(fd);\n\t\n\tstart_capturing(fd);\n\t\n\twhen_to_read(fd);\n\n\tstop_capturing(fd);\n\t\n\tuninit_camera(fd);\n\n\treturn 0;\n}\n\n```\n\n\n\n## 2、保存视频video.yuv\n\n见code中，camera_app_mp4.c\n\n主要区别：fp = fopen(video_name,\"a\")，追加写的方式打开，进行采集\n\n# 七、V4l2驱动框架\n\n## 1、主要对象\n\n### 1、video_device\n\n```c\nstruct video_device\n\t\t{\n\t\t\tconst struct v4l2_file_operations *fops; \n\t\t\t//操作方法结构体\n\t\t\tstruct cdev *cdev;\t（file_opreations）\t\n\t\t\t//字符设备驱动\n\t\t\tstruct v4l2_device *v4l2_dev;\t/* v4l2_device parent */\n\t\t\tchar name[32]; \n\t\t\t//驱动的名字\n\t\t\tint minor;\n\t\t\t//次设备号\n\t\t\tvoid (*release)(struct video_device *vdev);\n\t\t\t//释放资源的函数\n\t\t\tconst struct v4l2_ioctl_ops *ioctl_ops;\n\t\t\t//ioctl的操作方法\n\t\t};\n```\n\n  一个字符设备，为用户空间提供设备节点(/dev/videox)，提供系统调用的相关操作(open、ioctl…) \n\n可以看到video_device中含有一个cdev还有v4l2_device，此外还有fops和ioctl_ops，从应用层进行系统调用会经过v4l2的核心层回调到这里 \n\n#### v4l2_file_operations\n\n```c\nstruct v4l2_file_operations {\n\tstruct module *owner;\n\tssize_t (*read) (struct file *, char __user *, size_t, loff_t *);\n\tssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);\n\tunsigned int (*poll) (struct file *, struct poll_table_struct *);\n\tlong (*ioctl) (struct file *, unsigned int, unsigned long);\n\tlong (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);\n\tunsigned long (*get_unmapped_area) (struct file *, unsigned long,\n\t\t\t\tunsigned long, unsigned long, unsigned long);\n\tint (*mmap) (struct file *, struct vm_area_struct *);\n\tint (*open) (struct file *);\n\tint (*release) (struct file *);\n};\n\n```\n\n#### v4l2_ioctl_ops\n\n```c\nstruct v4l2_ioctl_ops {\n\tint (*vidioc_querycap)(struct file *file, void *fh, struct v4l2_capability *cap);\n\t/* Buffer handlers */\n\tint (*vidioc_reqbufs) (struct file *file, void *fh, struct v4l2_requestbuffers *b);\n\tint (*vidioc_querybuf)(struct file *file, void *fh, struct v4l2_buffer *b);\n\tint (*vidioc_qbuf)    (struct file *file, void *fh, struct v4l2_buffer *b);\n\tint (*vidioc_dqbuf)   (struct file *file, void *fh, struct v4l2_buffer *b);\n    /* Stream on/off */\n\tint (*vidioc_streamon) (struct file *file, void *fh, enum v4l2_buf_type i);\n\tint (*vidioc_streamoff)(struct file *file, void *fh, enum v4l2_buf_type i);\n   \t...\n};\n```\n\n v4l2有很多ioctl操作，具体实现都在这里 \n\n### 2、v4l2_device\n\n```c\nstruct v4l2_device {\n\t/* used to keep track of the registered subdevs */\n\tstruct list_head subdevs;\n    ...\n};\n```\n\n  嵌入到video_device中，表示一个v4l2设备的实例 \n\n可以看到v4l2_device中有一个v4l2_subdev的链表，v4l2_device的主要目的时用来管理v4l2_subdev \n\n### 3、v4l2_subdev\n\n```c\nstruct v4l2_subdev {\n\tstruct list_head list;\n\tstruct v4l2_device *v4l2_dev;\n\tconst struct v4l2_subdev_ops *ops;\n};\n```\n\n 依附在v4l2_device之下，并表示一个v4l2设备的子设备，一个v4l2_devide下可以有多个sub_device \n\n v4l2_subdev中有一个v4l2_subdev_ops，实现了一系列的操作，供v4l2_device调用 \n\n **subdev的设计目的是为了多路复用，就是用一个v4l2_device可以服务多个v4l2_subdev** \n\n### 4、V4l2提供的注册接口\n\n```c\nint video_register_device(struct video_device *vdev, int type, int nr);//video_device注册\nvoid video_unregister_device(struct video_device *vdev);//video_device注销\nint v4l2_device_register(struct device *dev, struct v4l2_device *v4l2_dev);//v4l2_device注册\nvoid v4l2_device_unregister(struct v4l2_device *v4l2_dev);//v4l2_device注销\nint v4l2_device_register_subdev(struct v4l2_device *v4l2_dev,struct v4l2_subdev *sd);//v4l2_subdev注册\nvoid v4l2_device_unregister_subdev(struct v4l2_subdev *sd);//v4l2_subdev注销\n\n```\n\n\n\n## 2、图示\n\n<img src=\"1.png\"  />\n\n<img src=\"2.png\"  />\n\n<img src=\"3.png\" style=\"zoom:80%;\" />\n\n## 3、主要框架\n\n```c\n#include <...>\n\nstatic struct video_device* video_dev;\nstatic struct v4l2_device v4l2_dev;\n\n/* 实现各种系统调用 */\nstatic const struct v4l2_file_operations video_dev_fops = {\n\t.owner\t\t    = THIS_MODULE,\n\t.release        = vdev_close,\n\t.read           = vdev_read,\n\t.poll\t\t    = vdev_poll,\n\t.ioctl          = video_ioctl2,\n\t.mmap           = vdev_mmap,\n};\n\n/* 实现各种系统调用 */\nstatic const struct v4l2_ioctl_ops video_dev_ioctl_ops = {\n\t.vidioc_querycap      = vidioc_querycap,\n\t.vidioc_enum_fmt_vid_cap  = vidioc_enum_fmt_vid_cap,\n\t.vidioc_g_fmt_vid_cap     = vidioc_g_fmt_vid_cap,\n\t.vidioc_try_fmt_vid_cap   = vidioc_try_fmt_vid_cap,\n\t.vidioc_s_fmt_vid_cap     = vidioc_s_fmt_vid_cap,\n\t.vidioc_reqbufs       = vidioc_reqbufs,\n\t.vidioc_querybuf      = vidioc_querybuf,\n\t.vidioc_qbuf          = vidioc_qbuf,\n\t.vidioc_dqbuf         = vidioc_dqbuf,\n\t.vidioc_enum_input    = vidioc_enum_input,\n\t.vidioc_g_input       = vidioc_g_input,\n\t.vidioc_s_input       = vidioc_s_input,\n\t.vidioc_streamon      = vidioc_streamon,\n\t.vidioc_streamoff     = vidioc_streamoff,\n};\n\nstatic int __init video_init(void)\n{\n    /* 分配并设置一个video_device */\n    video_dev = video_device_alloc();\n    video_dev->fops = &video_dev_fops;\n    video_dev->ioctl_ops = &video_dev_ioctl_ops;\n    video_dev->release = video_device_release;\n    video_dev->tvnorms = V4L2_STD_525_60;\n    video_dev->current_norm = V4L2_STD_NTSC_M;\n\n    /* 注册一个v4l2_device */\n    v4l2_device_register(video_dev->dev, &v4l2_dev);    \n    video_dev->v4l2_dev = &video_dev;\n\n    /* 注册一个video_device字符设备 */\n    video_register_device(video_dev, VFL_TYPE_GRABBER, -1);\n\n    return 0;\n}\n\nstatic void __exit video_exit(void)\n{\n    //注销\n    video_unregister_device(video_dev);\n    v4l2_device_unregister(&v4l2_dev);\n    video_device_release(video_dev);\n}\n\nmodule_init(video_init);\nmodule_exit(video_exit);\nMODULE_LICENSE(\"GPL\")\n```\n\n# 八、多路video输入分析\n\n## 1、多路操作流程\n\n```c\n//1.设备初始化\n_Init(){\n    _open()｛\n        fd[i] = open(dev_name[i], O_RDWR /* required */  | O_NONBLOCK, 0);\n    ioctl(fd[i], VIDIOC_S_INPUT, &inp);//设置输入\n    ioctl(fd[i], VIDIOC_S_PARM, &parms);//主要用来设置采集帧数\n        ｝;//打开设备节点\n    _Fmtset()｛\n        ioctl(fd[i], VIDIOC_S_FMT, &fmt);//设置\n        ioctl(fd[i], VIDIOC_G_FMT, &fmt);//查询，判断设置是否成功\n        ｝;//设置视频捕获模式\n    _BuffReq()｛\n        ioctl(fd[i], VIDIOC_REQBUFS, &req);\n        ioctl(fd[i], VIDIOC_QUERYBUF, &buf);\n        ioctl(fd[i], VIDIOC_QBUF, &buf);\n        ｝;//申请帧缓存，查询缓存转换地址，放入队列\n    _ON{\n        ioctl(fd[i], VIDIOC_STREAMON, &type);\n    };//开启视频捕获\n}\n//2.创建多线程\npthread_create(&capture_pth, NULL,Video_Capture, NULL);\n//3.采集数据\nVideo_Capture(){\n    //用select监视文件描述符，等待采集，如果有准备好的\n    select(fd[3] + 1, &fdr, NULL, NULL, &tv);//IO多路复用\n    //当准备好时，采用互斥锁的方式，唤醒休眠的数据处理函数\n    if( FD_ISSET(fd[0],&fdr) && FD_ISSET(fd[1],&fdr) && \\\n\t\tFD_ISSET(fd[2],&fdr) && FD_ISSET(fd[3],&fdr))\n\t\t{\n            _Queryaddr(){\n                ioctl(fd[i], VIDIOC_DQBUF, &buf);//出列\n                VideoPhyAddr[i] = buf.m.planes[0].m.mem_offset;\n                ioctl(fd[i], VIDIOC_QBUF, &buf);//入列\n            };\n            pthread_mutex_lock(&VideoMutex);//上锁\n            pthread_cond_signal(&VideoCond);//唤醒休眠\n            pthread_mutex_unlock(&VideoMutex);//解锁\n        }\n};\n//4.数据处理\n_LoadVideoData(){\n    pthread_mutex_lock(&VideoMutex);//上锁\n\tpthread_cond_wait(&VideoCond, &VideoMutex);//休眠\n\tpthread_mutex_unlock(&VideoMutex);//解锁\n    //************************\n    //***原始视频流数据处理***\n    //************************\n};\n```\n\n","slug":"1-V4l2","published":1,"updated":"2023-04-13T04:21:44.991Z","_id":"clgelnnse0002rgob33xj3z9r","layout":"post","photos":[],"link":"","content":"<div align = \"center\">Video for Linux two(简称v4l2)</div>\n\n\n<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p> vl42是video for Linux 2的缩写，是一套Linux内核视频设备的驱动框架，该驱动框架为应用层提供一套统一的操作接口(一系列的ioctl)。包括一套数据结构和底层V4L2驱动接口。只能在Linux下使用。</p>\n<span id=\"more\"></span>\n\n<p>V4L2在设计时，是要支持很多广泛的设备的，它们之中只有一部分在本质上是真正的视频设备，可以支持多种设备,它可以有以下几种接口</p>\n<p>video capture interface：视频采集接口，这种接口应用于摄像头，v4l2在最初设计的时候就是应用于这种功能</p>\n<p>video output interface：视频输出接口，将静止图像或图像序列编码为模拟视频信号，通过此接口，应用程序可以控制编码过程并将图像从用户空间移动到驱动程序</p>\n<p>video overlay interface：视频直接传输接口，可以将采集到的视频数据直接传输到显示设备，不需要cpu参与，这种方式的显示图像的效率比其他方式高得多</p>\n<p>其他接口这里就不介绍了，下面来看一下v4l2的API</p>\n<h1 id=\"二、作用\"><a href=\"#二、作用\" class=\"headerlink\" title=\"二、作用\"></a>二、作用</h1><p>它使程序有发现设备和操作设备的能力。它主要是用一系列的回调函数来实现这些功能。像设置摄像头的频率、帧频、视频压缩格式和图像参数等等。并使得它们的输出标准化。当然也可以用于其他多媒体的开发，如音频等。</p>\n<h1 id=\"三、存放位置\"><a href=\"#三、存放位置\" class=\"headerlink\" title=\"三、存放位置\"></a>三、存放位置</h1><p>在Linux下，所有外设都被看成一种特殊的文件，成为“设备文件”，可以象访问普通文件一样对其进行读写。一般来说，采用V4L2驱动的摄像头设备文是&#x2F;dev&#x2F;v4l&#x2F;video0。为了通用，可以建立一个到&#x2F;dev&#x2F;video0的链接。V4L2支持两种方式来采集图像：内存映射方式(mmap)和直接读取方式(read)。V4L2在include&#x2F;linux&#x2F;videodev.h文件中定义了一些重要的数据结构，在采集图像的过程中，就是通过对这些数据的操作来获得最终的图像数据。Linux系统V4L2的能力可在Linux内核编译阶段配置，默认情况下都有此开发接口。V4L2从Linux 2.5.x版本的内核中开始出现。结构体详细参数可以在&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;videodev2.h中查看。</p>\n<h1 id=\"四、V4l2框架操作流程\"><a href=\"#四、V4l2框架操作流程\" class=\"headerlink\" title=\"四、V4l2框架操作流程\"></a>四、V4l2框架操作流程</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.打开视频设备文件</span></span><br><span class=\"line\"><span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;/dev/video0&quot;</span>,O_RDWR);</span><br><span class=\"line\"><span class=\"comment\">//2.查询视频设备属性，如：是否具有视频输入或者音频输入输出等</span></span><br><span class=\"line\">ioctl(fd,VIDIOC_QUERYCAP,&amp;cap);</span><br><span class=\"line\"><span class=\"comment\">//3.选择视频输入，一个视频设备可以有多个视频输入</span></span><br><span class=\"line\"><span class=\"comment\">//4.设置视频采集的参数:视频的制式，图像的采集窗口，帧格式，帧率，旋转方式</span></span><br><span class=\"line\">ioctl(fd,VIDIOC_S_FMT,&amp;fmt);</span><br><span class=\"line\"><span class=\"comment\">//5.向驱动申请视频流数据的帧缓冲区，一般为4个。</span></span><br><span class=\"line\">ioctl(fd, VIDIOC_REQBUFS, &amp;req);</span><br><span class=\"line\"><span class=\"comment\">//6.查询帧缓冲区在内核空间中的长度和偏移量 </span></span><br><span class=\"line\">ioctl(fd, VIDIOC_QUERYBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//7.将申请到的帧缓冲映射到用户空间mmap，这样可以直接操作采集到的帧，不用复制</span></span><br><span class=\"line\">buffers[i].length = buf.length;</span><br><span class=\"line\">buffers[i].start = mmap(<span class=\"literal\">NULL</span>, buffers[i].length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, buffers[i].offset);;</span><br><span class=\"line\"><span class=\"comment\">//8.将申请到的帧缓冲全部放入视频采集输出队列，以便存放采集的数据</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//9.开始视频采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_STREAMON, &amp;type);</span><br><span class=\"line\"><span class=\"comment\">//10.出列以取得已采集数据的帧缓冲，取得原始数据</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_DQBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//此时应用程序处理该帧缓冲区的数据，如：进行数据的处理和保存，</span></span><br><span class=\"line\">fp = fopen(picture.yuv,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//保存图片&quot;w&quot;，保存视频&quot;a&quot;追加写</span></span><br><span class=\"line\">fwrite(addr,<span class=\"number\">1</span>,length,fp);</span><br><span class=\"line\">fclose(fp);</span><br><span class=\"line\"><span class=\"comment\">//11.处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//12.停止视频的采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_STREAMOFF, &amp;type);</span><br><span class=\"line\"><span class=\"comment\">//13.释放申请的视频帧缓冲区</span></span><br><span class=\"line\">unmap;</span><br><span class=\"line\"><span class=\"comment\">//14.关闭视频设备文件</span></span><br><span class=\"line\">close(fd);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五、V4l2的常用IOCTL接口命令–-gt-gt-结构体介绍\"><a href=\"#五、V4l2的常用IOCTL接口命令–-gt-gt-结构体介绍\" class=\"headerlink\" title=\"五、V4l2的常用IOCTL接口命令–&gt;&gt;结构体介绍\"></a>五、V4l2的常用IOCTL接口命令–&gt;&gt;结构体介绍</h1><h2 id=\"1、常用的IOCTL接口命令\"><a href=\"#1、常用的IOCTL接口命令\" class=\"headerlink\" title=\"1、常用的IOCTL接口命令\"></a>1、常用的IOCTL接口命令</h2><p>在内核目录include&#x2F;linux&#x2F;videodev2.h中定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VIDIOC_QUERYCAP        <span class=\"comment\">//查询驱动功能 </span></span><br><span class=\"line\">VIDIOC_QUERYSTD     <span class=\"comment\">//检查当前视频设备支持的标准，例如PAL或NTSC。</span></span><br><span class=\"line\">VIDIOC_S_INPUT</span><br><span class=\"line\">VIDIOC_ENUMINPUT\t<span class=\"comment\">//枚举所有可用的输入</span></span><br><span class=\"line\">VIDIOC_S_PARM</span><br><span class=\"line\">VIDIOC_ENUM_FMT        <span class=\"comment\">//获取当前驱动支持的视频格式 </span></span><br><span class=\"line\">VIDIOC_S_FMT        <span class=\"comment\">//设置当前驱动的频捕获格式 </span></span><br><span class=\"line\">VIDIOC_G_FMT        <span class=\"comment\">//读取当前驱动的频捕获格式 </span></span><br><span class=\"line\">VIDIOC_TRY_FMT        <span class=\"comment\">//验证当前驱动的显示格式 </span></span><br><span class=\"line\">VIDIOC_CROPCAP        <span class=\"comment\">//查询驱动的修剪能力 </span></span><br><span class=\"line\">VIDIOC_S_CROP        <span class=\"comment\">//设置视频信号的矩形边框 </span></span><br><span class=\"line\">VIDIOC_G_CROP        <span class=\"comment\">//读取视频信号的矩形边框</span></span><br><span class=\"line\">VIDIOC_REQBUFS\t\t <span class=\"comment\">//分配内存 </span></span><br><span class=\"line\">VIDIOC_QUERYBUF <span class=\"comment\">//把VIDIOC_REQBUFS中分配的数据缓存转换成物理地址</span></span><br><span class=\"line\">VIDIOC_QBUF        <span class=\"comment\">//把数据从缓存中读取出来 </span></span><br><span class=\"line\">VIDIOC_DQBUF        <span class=\"comment\">//把数据放回缓存队列 </span></span><br><span class=\"line\">VIDIOC_STREAMON        <span class=\"comment\">//开始视频显示函数 </span></span><br><span class=\"line\">VIDIOC_STREAMOFF        <span class=\"comment\">//结束视频显示函数 </span></span><br><span class=\"line\">VIDIOC_EXPBUF        <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、常用的结构体\"><a href=\"#2、常用的结构体\" class=\"headerlink\" title=\"2、常用的结构体\"></a>2、常用的结构体</h2><p>在内核目录include&#x2F;linux&#x2F;videodev2.h中定义。参见&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;videodev2.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_capability</span>        //视频设备的功能，对应命令<span class=\"title\">VIDIOC_QUERYCAP</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_std_id</span>        //视频制式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_input</span>        //视频输入信息，对应命令<span class=\"title\">VIDIOC_ENUMINPUT</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_streamparm</span> //结构体<span class=\"title\">v4l2_streamparm</span>来描述视频流的属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_standard</span>        //视频的制式，比如<span class=\"title\">PAL</span>，<span class=\"title\">NTSC</span>，对应命令<span class=\"title\">VIDIOC_ENUMSTD</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span>        //帧的格式，对应命令<span class=\"title\">VIDIOC_G_FMT</span>、<span class=\"title\">VIDIOC_S_FMT</span>等</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_crop</span>        //视频信号矩形边框</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span>        //申请帧缓冲，对应命令<span class=\"title\">VIDIOC_REQBUFS</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span>        //驱动中的一帧图像缓存，对应命令<span class=\"title\">VIDIOC_QUERYBUF</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_exportbuffer</span> //导出<span class=\"title\">fd</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、v4l2-capability\"><a href=\"#1、v4l2-capability\" class=\"headerlink\" title=\"1、v4l2_capability\"></a>1、v4l2_capability</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_capability</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tu8 driver[<span class=\"number\">16</span>]; <span class=\"comment\">// 驱动名字</span></span><br><span class=\"line\">\tu8 card[<span class=\"number\">32</span>]; <span class=\"comment\">// 设备名字</span></span><br><span class=\"line\">\tu8 bus_info[<span class=\"number\">32</span>]; <span class=\"comment\">// 设备在系统中的位置</span></span><br><span class=\"line\">\tu32 version; <span class=\"comment\">// 驱动版本号</span></span><br><span class=\"line\">\tu32 capabilities; <span class=\"comment\">// 设备支持的操作</span></span><br><span class=\"line\">\tu32 reserved[<span class=\"number\">4</span>]; <span class=\"comment\">// 保留字段</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中域 capabilities 代表设备支持的操作模式，常见的值有 V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING 表示是一个视频捕捉设备并且具有数据流控制模式；另外 driver 域需要和 struct video_device 中的 name 匹配。</p>\n<h3 id=\"2、v4l2-input\"><a href=\"#2、v4l2-input\" class=\"headerlink\" title=\"2、v4l2_input\"></a>2、v4l2_input</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_input</span> &#123;</span></span><br><span class=\"line\">\t__u32\t     index;\t\t<span class=\"comment\">/*  Which input */</span></span><br><span class=\"line\">\t__u8\t     name[<span class=\"number\">32</span>];\t\t<span class=\"comment\">/*  Label */</span></span><br><span class=\"line\">\t__u32\t     type;\t\t<span class=\"comment\">/*  Type of input */</span></span><br><span class=\"line\">\t__u32\t     audioset;\t\t<span class=\"comment\">/*  Associated audios (bitfield) */</span></span><br><span class=\"line\">\t__u32        tuner;             <span class=\"comment\">/*  Associated tuner */</span></span><br><span class=\"line\">\tv4l2_std_id  <span class=\"built_in\">std</span>;</span><br><span class=\"line\">\t__u32\t     status;</span><br><span class=\"line\">\t__u32\t     reserved[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>视频捕获的应用首先要通过VIDIOC_ENUMINPUT命令来枚举所有可用的输入。在V4L2层，这个调用会转换成调用一个驱动中对应的回调函数：<br> int (*vidioc_enum_input)(struct file *file, void *private_data,  struct v4l2_input *input);</p>\n<h3 id=\"3、v4l2-format\"><a href=\"#3、v4l2-format\" class=\"headerlink\" title=\"3、v4l2_format\"></a>3、v4l2_format</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span> &#123;</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_pix_format</span>         <span class=\"title\">pix</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VIDEO_CAPTURE */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_window</span>             <span class=\"title\">win</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VIDEO_OVERLAY */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_vbi_format</span>         <span class=\"title\">vbi</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VBI_CAPTURE */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_sliced_vbi_format</span>  <span class=\"title\">sliced</span>;</span>  <span class=\"comment\">/* V4L2_BUF_TYPE_SLICED_VBI_CAPTURE */</span> </span><br><span class=\"line\">        __u8   raw_data[<span class=\"number\">200</span>];                   <span class=\"comment\">/* user-defined */</span> </span><br><span class=\"line\">    &#125; fmt; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> &#123;</span> </span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_CAPTURE        = <span class=\"number\">1</span>, <span class=\"comment\">//视频捕获模式</span></span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_OUTPUT         = <span class=\"number\">2</span>, </span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_OVERLAY        = <span class=\"number\">3</span>, </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    V4L2_BUF_TYPE_PRIVATE              = <span class=\"number\">0x80</span>, </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_pix_format</span> &#123;</span> </span><br><span class=\"line\">    __u32                   width; <span class=\"comment\">//视频的宽</span></span><br><span class=\"line\">    __u32                   height; <span class=\"comment\">//视频的高</span></span><br><span class=\"line\">    __u32                   pixelformat; <span class=\"comment\">//视频数据格式</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_field</span>         <span class=\"title\">field</span>;</span> </span><br><span class=\"line\">    __u32                   bytesperline;   <span class=\"comment\">/* for padding, zero if unused */</span> </span><br><span class=\"line\">    __u32                   sizeimage; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_colorspace</span>    <span class=\"title\">colorspace</span>;</span> </span><br><span class=\"line\">    __u32                   priv;           <span class=\"comment\">/* private data, depends on pixelformat */</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>常见的捕获模式为 V4L2_BUF_TYPE_VIDEO_CAPTURE 即视频捕捉模式，在此模式下 fmt 联合体采用域 v4l2_pix_format：其中 width 为视频的宽、height 为视频的高、pixelformat 为视频数据格式（常见的值有 V4L2_PIX_FMT_YUV422P | V4L2_PIX_FMT_RGB565）、bytesperline 为一行图像占用的字节数、sizeimage 则为图像占用的总字节数、colorspace 指定设备的颜色空间。</p>\n<h3 id=\"4、v4l2-requestbuffers\"><a href=\"#4、v4l2-requestbuffers\" class=\"headerlink\" title=\"4、v4l2_requestbuffers\"></a>4、v4l2_requestbuffers</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span> &#123;</span></span><br><span class=\"line\">    __u32                   count;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span>      <span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span>        <span class=\"title\">memory</span>;</span></span><br><span class=\"line\">    __u32                   reserved[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span> &#123;</span></span><br><span class=\"line\">    V4L2_MEMORY_MMAP             = <span class=\"number\">1</span>,</span><br><span class=\"line\">    V4L2_MEMORY_USERPTR          = <span class=\"number\">2</span>,</span><br><span class=\"line\">    V4L2_MEMORY_OVERLAY          = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>VIDIOC_REQBUFS 命令通过结构 v4l2_requestbuffers 请求驱动申请一片连续的内存用于缓存视频信息;count 指定根据图像占用空间大小申请的缓存区个数，type 为视频捕获模式，memory 为内存区的使用方式.</p>\n<h3 id=\"5、v4l2-buffer\"><a href=\"#5、v4l2-buffer\" class=\"headerlink\" title=\"5、v4l2_buffer\"></a>5、v4l2_buffer</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span> &#123;</span></span><br><span class=\"line\">    __u32   index;\t<span class=\"comment\">//buffer 序号 </span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span>    <span class=\"title\">type</span>;</span>\t<span class=\"comment\">//buffer 类型 </span></span><br><span class=\"line\">    __u32    bytesused;\t<span class=\"comment\">//缓存已使用空间大小，buffer 中已使用的字节数</span></span><br><span class=\"line\">    __u32    flags;\t<span class=\"comment\">//区分是MMAP 还是USERPTR</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_field</span>  <span class=\"title\">field</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span>    <span class=\"title\">timestamp</span>;</span>\t<span class=\"comment\">//获取第一个字节时的系统时间 </span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_timecode</span>   <span class=\"title\">timecode</span>;</span></span><br><span class=\"line\">    __u32     sequence;\t<span class=\"comment\">//队列中的序号</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* memory location */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span>    <span class=\"title\">memory</span>;</span>\t<span class=\"comment\">//缓存使用方式</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">            __u32   offset;<span class=\"comment\">//当前缓存与内存区起始地址的偏移，缓冲帧地址，只对MMAP 有效  </span></span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">long</span>   userptr;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_plane</span> *<span class=\"title\">planes</span>;</span></span><br><span class=\"line\">    &#125; m;</span><br><span class=\"line\">    __u32    length;\t<span class=\"comment\">//缓冲帧长度</span></span><br><span class=\"line\">    __u32    input;</span><br><span class=\"line\">    __u32    reserved;\t<span class=\"comment\">//一般用于传递物理地址值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_plane</span> &#123;</span></span><br><span class=\"line\">\t__u32\t\t\tbytesused;</span><br><span class=\"line\">\t__u32\t\t\tlength;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">\t\t__u32\t\tmem_offset;<span class=\"comment\">//offset是放在m.mem_offset中返回用户空间的</span></span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span>\tuserptr;</span><br><span class=\"line\">\t\t__s32\t\tfd;</span><br><span class=\"line\">\t&#125; m;</span><br><span class=\"line\">\t__u32\t\t\tdata_offset;</span><br><span class=\"line\">\t__u32\t\t\treserved[<span class=\"number\">11</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>flags 为缓存当前状态（常见值有 V4L2_BUF_FLAG_MAPPED | V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE，分别代表当前缓存已经映射、缓存可以采集数据、缓存可以提取数据）</p>\n<p>另外 VIDIOC_QUERYBUF，VIDIOC_QBUF 和 VIDIOC_DQBUF 命令都采用结构 v4l2_buffer 与驱动通信：VIDIOC_QBUF 命令向驱动传递应用程序已经处理完的缓存，即将缓存加入空闲可捕获视频的队列，传递的主要参数为 index；VIDIOC_DQBUF 命令向驱动获取已经存放有视频数据的缓存，v4l2_buffer 的各个域几乎都会被更新，但主要的参数也是 index，应用程序会根据 index 确定可用数据的起始地址和范围。</p>\n<h3 id=\"6、v4l2-captureparm\"><a href=\"#6、v4l2-captureparm\" class=\"headerlink\" title=\"6、v4l2_captureparm\"></a>6、v4l2_captureparm</h3><p>设置Stream参数。(主要是采集帧数)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_streamparm</span> <span class=\"title\">parms</span>;</span></span><br><span class=\"line\">parms.parm.capture.timeperframe.numerator=<span class=\"number\">1</span>;</span><br><span class=\"line\">parms.parm.capture.timeperframe.denominator=<span class=\"number\">60</span>;</span><br><span class=\"line\">rel = ioctl(fdUsbCam,VIDIOC_S_PARM, setfps);</span><br></pre></td></tr></table></figure>\n\n<p>对于捕获设备而言，parm.capture字段是要关注的内容，这个结构体如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_captureparm</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">       __u32             capability;</span><br><span class=\"line\">       __u32             capturemode;</span><br><span class=\"line\">       structv4l2_fract  timeperframe;</span><br><span class=\"line\">       __u32             extendedmode;</span><br><span class=\"line\">       __u32          readbuffers;</span><br><span class=\"line\">       __u32             reserved[<span class=\"number\">4</span>];</span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">timeperframe字段用于指定想要使用的帧频率，它又是一个结构体：</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_fract</span>&#123;</span></span><br><span class=\"line\">       __u32  numerator;</span><br><span class=\"line\">       __u32  denominator;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>numerator和denominator所描述的系数给出的是成功的帧之间的时间间隔。numerator 分子， denominator 分母。主要表达每次帧之间时间间隔。 numerator&#x2F; denominator秒一帧。</p>\n<h3 id=\"7、v4l2-exportbuffer\"><a href=\"#7、v4l2-exportbuffer\" class=\"headerlink\" title=\"7、v4l2_exportbuffer\"></a>7、v4l2_exportbuffer</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_exportbuffer</span> &#123;</span></span><br><span class=\"line\">\t__u32\t\ttype; <span class=\"comment\">/* enum v4l2_buf_type */</span></span><br><span class=\"line\">\t__u32\t\tindex;</span><br><span class=\"line\">\t__u32\t\tplane;</span><br><span class=\"line\">\t__u32\t\tflags;</span><br><span class=\"line\">\t__s32\t\tfd;</span><br><span class=\"line\">\t__u32\t\treserved[<span class=\"number\">11</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"六、应用程序代码分析\"><a href=\"#六、应用程序代码分析\" class=\"headerlink\" title=\"六、应用程序代码分析\"></a>六、应用程序代码分析</h1><h2 id=\"1、保存图像picture-yuv\"><a href=\"#1、保存图像picture-yuv\" class=\"headerlink\" title=\"1、保存图像picture.yuv\"></a>1、保存图像picture.yuv</h2><p>见code中，camera_app_pic.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/videodev2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VideoBuffer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span>   *start;<span class=\"comment\">//帧缓存mmap映射后的首地址</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>  length;<span class=\"comment\">//缓存大小</span></span><br><span class=\"line\">&#125; VideoBuffer;</span><br><span class=\"line\">VideoBuffer *buffers;<span class=\"comment\">//用来存放映射后的帧缓存区地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">camera_device_open</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"comment\">//用阻塞模式打开摄像头设备</span></span><br><span class=\"line\">\tfd = open(<span class=\"string\">&quot;/dev/video0&quot;</span>,O_RDWR,<span class=\"number\">0</span>);<span class=\"comment\">//设备节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fd &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;open /dev/video0 is fail.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">init_camera_attribute</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> numBufs;<span class=\"comment\">//</span></span><br><span class=\"line\">\tv4l2_std_id id;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span> <span class=\"title\">fmt</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span>  <span class=\"title\">req</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span>    <span class=\"title\">buf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//检查当前视频设备支持的标准</span></span><br><span class=\"line\">\tioctl(fd,VIDIOC_QUERYSTD,&amp;id);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//设置视频捕获格式</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;fmt,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(fmt));</span><br><span class=\"line\">\tfmt.type  = V4L2_BUF_TYPE_VIDEO_CAPTURE;<span class=\"comment\">//视频捕获模式</span></span><br><span class=\"line\">\tfmt.fmt.pix.width = <span class=\"number\">640</span>;<span class=\"comment\">//视频的宽</span></span><br><span class=\"line\">\tfmt.fmt.pix.height = <span class=\"number\">480</span>;<span class=\"comment\">//视频的高</span></span><br><span class=\"line\">\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;<span class=\"comment\">//视频数据格式YUYV</span></span><br><span class=\"line\"><span class=\"comment\">//\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YVU420;</span></span><br><span class=\"line\">\tfmt.fmt.pix.field = V4L2_FIELD_INTERLACED;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_S_FMT,&amp;fmt) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_S_FMT is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//分配内存，申请帧缓存，</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;req,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(req));</span><br><span class=\"line\">\treq.count = <span class=\"number\">4</span>;<span class=\"comment\">//帧缓存的个数，一般不大于5</span></span><br><span class=\"line\">\treq.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\treq.memory = V4L2_MEMORY_MMAP;<span class=\"comment\">//内存区的使用方式，mmap映射</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_REQBUFS,&amp;req) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_REQBUFS is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取并记录缓存的物理空间</span></span><br><span class=\"line\">\tbuffers = <span class=\"built_in\">calloc</span>(req.count,<span class=\"keyword\">sizeof</span>(*buffers));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(numBufs = <span class=\"number\">0</span>; numBufs &lt; req.count; numBufs ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(&amp;buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\tbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t\tbuf.memory = V4L2_MEMORY_MMAP;</span><br><span class=\"line\">\t\tbuf.index = numBufs;<span class=\"comment\">//缓存编号，4帧缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//读取缓存，查询帧缓冲区在内核空间中的长度和偏移量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QUERYBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;set VIDIOC_REQBUFS is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t <span class=\"comment\">// 转换成相对地址，将申请到的帧缓冲映射到用户空间mmap</span></span><br><span class=\"line\">\t\tbuffers[numBufs].length = buf.length;</span><br><span class=\"line\">\t\tbuffers[numBufs].start  = mmap(<span class=\"literal\">NULL</span>,buf.length,PROT_READ|PROT_WRITE,</span><br><span class=\"line\">\t\t\t\tMAP_SHARED,fd,buf.m.offset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buffers[numBufs].start == MAP_FAILED)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;mmap is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 放入缓存队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;set VIDIOC_QBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">start_capturing</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//开始采集数据</span></span><br><span class=\"line\">\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_STREAMON,&amp;type) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;start capturing is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//保存图片</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">build_picture</span><span class=\"params\">(<span class=\"type\">void</span> *addr,<span class=\"type\">int</span> length)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *fp;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> picture_name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(picture_name,<span class=\"string\">&quot;picture%d.yuv&quot;</span>,num++);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfp = fopen(picture_name,<span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fp == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;fail to open &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfwrite(addr,<span class=\"number\">1</span>,length,fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read_image</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\tbuf.type=V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\tbuf.memory=V4L2_MEMORY_MMAP;</span><br><span class=\"line\">\tbuf.index=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//读取缓存，出列以取得已采集数据的帧缓冲，取得原始数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_DQBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_DQBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将数据存为图片</span></span><br><span class=\"line\">\tbuild_picture(buffers[buf.index].start,buffers[buf.index].length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重新放入缓存队列，处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;reset VIDIOC_QBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">when_to_read</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)<span class=\"comment\">//保存三张图片</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfd_set rfds;<span class=\"comment\">//指定内核监测的文件描述符集合</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span><span class=\"comment\">//设置超时时间</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> retval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFD_ZERO(&amp;rfds);<span class=\"comment\">//清空集合</span></span><br><span class=\"line\">\t\tFD_SET(fd, &amp;rfds);<span class=\"comment\">//将fd添加到集合中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttv.tv_sec = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\ttv.tv_usec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//当有数据采集好在缓冲区准备好时，开始读取缓存数据</span></span><br><span class=\"line\">\t\tretval = select(fd+<span class=\"number\">1</span>, &amp;rfds, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(retval == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t perror(<span class=\"string\">&quot;select()&quot;</span>);</span><br><span class=\"line\">\t\t\t <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(retval == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;select is timeout\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tread_image(fd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">stop_capturing</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//停止采集数据</span></span><br><span class=\"line\">\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_STREAMOFF,&amp;type) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;stop capturing is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">uninit_camera</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"comment\">//释放申请的视频帧缓冲区</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == munmap(buffers[i].start,buffers[i].length))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;munmap is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buffers);</span><br><span class=\"line\">\t<span class=\"comment\">//关闭视频设备文件</span></span><br><span class=\"line\">\tclose(fd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\tfd = camera_device_open();\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinit_camera_attribute(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstart_capturing(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhen_to_read(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstop_capturing(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuninit_camera(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、保存视频video-yuv\"><a href=\"#2、保存视频video-yuv\" class=\"headerlink\" title=\"2、保存视频video.yuv\"></a>2、保存视频video.yuv</h2><p>见code中，camera_app_mp4.c</p>\n<p>主要区别：fp &#x3D; fopen(video_name,”a”)，追加写的方式打开，进行采集</p>\n<h1 id=\"七、V4l2驱动框架\"><a href=\"#七、V4l2驱动框架\" class=\"headerlink\" title=\"七、V4l2驱动框架\"></a>七、V4l2驱动框架</h1><h2 id=\"1、主要对象\"><a href=\"#1、主要对象\" class=\"headerlink\" title=\"1、主要对象\"></a>1、主要对象</h2><h3 id=\"1、video-device\"><a href=\"#1、video-device\" class=\"headerlink\" title=\"1、video_device\"></a>1、video_device</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">video_device</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> *<span class=\"title\">fops</span>;</span> </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//操作方法结构体</span></span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cdev</span> *<span class=\"title\">cdev</span>;</span>\t（file_opreations）\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//字符设备驱动</span></span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> *<span class=\"title\">v4l2_dev</span>;</span>\t<span class=\"comment\">/* v4l2_device parent */</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span> name[<span class=\"number\">32</span>]; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//驱动的名字</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> minor;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//次设备号</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">void</span> (*release)(<span class=\"keyword\">struct</span> video_device *vdev);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//释放资源的函数</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> *<span class=\"title\">ioctl_ops</span>;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//ioctl的操作方法</span></span><br><span class=\"line\">\t\t&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>  一个字符设备，为用户空间提供设备节点(&#x2F;dev&#x2F;videox)，提供系统调用的相关操作(open、ioctl…) </p>\n<p>可以看到video_device中含有一个cdev还有v4l2_device，此外还有fops和ioctl_ops，从应用层进行系统调用会经过v4l2的核心层回调到这里 </p>\n<h4 id=\"v4l2-file-operations\"><a href=\"#v4l2-file-operations\" class=\"headerlink\" title=\"v4l2_file_operations\"></a>v4l2_file_operations</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> (*read) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">char</span> __user *, <span class=\"type\">size_t</span>, <span class=\"type\">loff_t</span> *);</span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> (*write) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">const</span> <span class=\"type\">char</span> __user *, <span class=\"type\">size_t</span>, <span class=\"type\">loff_t</span> *);</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"title function_\">int</span> <span class=\"params\">(*poll)</span> <span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"keyword\">struct</span> poll_table_struct *)</span>;</span><br><span class=\"line\">\t<span class=\"type\">long</span> (*ioctl) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">int</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>);</span><br><span class=\"line\">\t<span class=\"type\">long</span> (*unlocked_ioctl) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">int</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>);</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"title function_\">long</span> <span class=\"params\">(*get_unmapped_area)</span> <span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>)</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*mmap) (<span class=\"keyword\">struct</span> file *, <span class=\"keyword\">struct</span> vm_area_struct *);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*open) (<span class=\"keyword\">struct</span> file *);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*release) (<span class=\"keyword\">struct</span> file *);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v4l2-ioctl-ops\"><a href=\"#v4l2-ioctl-ops\" class=\"headerlink\" title=\"v4l2_ioctl_ops\"></a>v4l2_ioctl_ops</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_querycap)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_capability *cap);</span><br><span class=\"line\">\t<span class=\"comment\">/* Buffer handlers */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_reqbufs) (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_requestbuffers *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_querybuf)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_qbuf)    (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_dqbuf)   (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">    <span class=\"comment\">/* Stream on/off */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_streamon) (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">enum</span> v4l2_buf_type i);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_streamoff)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">enum</span> v4l2_buf_type i);</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p> v4l2有很多ioctl操作，具体实现都在这里 </p>\n<h3 id=\"2、v4l2-device\"><a href=\"#2、v4l2-device\" class=\"headerlink\" title=\"2、v4l2_device\"></a>2、v4l2_device</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/* used to keep track of the registered subdevs */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">subdevs</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>  嵌入到video_device中，表示一个v4l2设备的实例 </p>\n<p>可以看到v4l2_device中有一个v4l2_subdev的链表，v4l2_device的主要目的时用来管理v4l2_subdev </p>\n<h3 id=\"3、v4l2-subdev\"><a href=\"#3、v4l2-subdev\" class=\"headerlink\" title=\"3、v4l2_subdev\"></a>3、v4l2_subdev</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_subdev</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> *<span class=\"title\">v4l2_dev</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_subdev_ops</span> *<span class=\"title\">ops</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p> 依附在v4l2_device之下，并表示一个v4l2设备的子设备，一个v4l2_devide下可以有多个sub_device </p>\n<p> v4l2_subdev中有一个v4l2_subdev_ops，实现了一系列的操作，供v4l2_device调用 </p>\n<p> <strong>subdev的设计目的是为了多路复用，就是用一个v4l2_device可以服务多个v4l2_subdev</strong> </p>\n<h3 id=\"4、V4l2提供的注册接口\"><a href=\"#4、V4l2提供的注册接口\" class=\"headerlink\" title=\"4、V4l2提供的注册接口\"></a>4、V4l2提供的注册接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">video_register_device</span><span class=\"params\">(<span class=\"keyword\">struct</span> video_device *vdev, <span class=\"type\">int</span> type, <span class=\"type\">int</span> nr)</span>;<span class=\"comment\">//video_device注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">video_unregister_device</span><span class=\"params\">(<span class=\"keyword\">struct</span> video_device *vdev)</span>;<span class=\"comment\">//video_device注销</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">v4l2_device_register</span><span class=\"params\">(<span class=\"keyword\">struct</span> device *dev, <span class=\"keyword\">struct</span> v4l2_device *v4l2_dev)</span>;<span class=\"comment\">//v4l2_device注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">v4l2_device_unregister</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_device *v4l2_dev)</span>;<span class=\"comment\">//v4l2_device注销</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">v4l2_device_register_subdev</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_device *v4l2_dev,<span class=\"keyword\">struct</span> v4l2_subdev *sd)</span>;<span class=\"comment\">//v4l2_subdev注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">v4l2_device_unregister_subdev</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_subdev *sd)</span>;<span class=\"comment\">//v4l2_subdev注销</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、图示\"><a href=\"#2、图示\" class=\"headerlink\" title=\"2、图示\"></a>2、图示</h2><img src=\"1.png\"  />\n\n<img src=\"2.png\"  />\n\n<img src=\"3.png\" style=\"zoom:80%;\" />\n\n<h2 id=\"3、主要框架\"><a href=\"#3、主要框架\" class=\"headerlink\" title=\"3、主要框架\"></a>3、主要框架</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;...&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">video_device</span>* <span class=\"title\">video_dev</span>;</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> <span class=\"title\">v4l2_dev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实现各种系统调用 */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> <span class=\"title\">video_dev_fops</span> =</span> &#123;</span><br><span class=\"line\">\t.owner\t\t    = THIS_MODULE,</span><br><span class=\"line\">\t.release        = vdev_close,</span><br><span class=\"line\">\t.read           = vdev_read,</span><br><span class=\"line\">\t.poll\t\t    = vdev_poll,</span><br><span class=\"line\">\t.ioctl          = video_ioctl2,</span><br><span class=\"line\">\t.mmap           = vdev_mmap,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实现各种系统调用 */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> <span class=\"title\">video_dev_ioctl_ops</span> =</span> &#123;</span><br><span class=\"line\">\t.vidioc_querycap      = vidioc_querycap,</span><br><span class=\"line\">\t.vidioc_enum_fmt_vid_cap  = vidioc_enum_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_g_fmt_vid_cap     = vidioc_g_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_try_fmt_vid_cap   = vidioc_try_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_s_fmt_vid_cap     = vidioc_s_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_reqbufs       = vidioc_reqbufs,</span><br><span class=\"line\">\t.vidioc_querybuf      = vidioc_querybuf,</span><br><span class=\"line\">\t.vidioc_qbuf          = vidioc_qbuf,</span><br><span class=\"line\">\t.vidioc_dqbuf         = vidioc_dqbuf,</span><br><span class=\"line\">\t.vidioc_enum_input    = vidioc_enum_input,</span><br><span class=\"line\">\t.vidioc_g_input       = vidioc_g_input,</span><br><span class=\"line\">\t.vidioc_s_input       = vidioc_s_input,</span><br><span class=\"line\">\t.vidioc_streamon      = vidioc_streamon,</span><br><span class=\"line\">\t.vidioc_streamoff     = vidioc_streamoff,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> __init <span class=\"title function_\">video_init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 分配并设置一个video_device */</span></span><br><span class=\"line\">    video_dev = video_device_alloc();</span><br><span class=\"line\">    video_dev-&gt;fops = &amp;video_dev_fops;</span><br><span class=\"line\">    video_dev-&gt;ioctl_ops = &amp;video_dev_ioctl_ops;</span><br><span class=\"line\">    video_dev-&gt;release = video_device_release;</span><br><span class=\"line\">    video_dev-&gt;tvnorms = V4L2_STD_525_60;</span><br><span class=\"line\">    video_dev-&gt;current_norm = V4L2_STD_NTSC_M;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册一个v4l2_device */</span></span><br><span class=\"line\">    v4l2_device_register(video_dev-&gt;dev, &amp;v4l2_dev);    </span><br><span class=\"line\">    video_dev-&gt;v4l2_dev = &amp;video_dev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册一个video_device字符设备 */</span></span><br><span class=\"line\">    video_register_device(video_dev, VFL_TYPE_GRABBER, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> __exit <span class=\"title function_\">video_exit</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注销</span></span><br><span class=\"line\">    video_unregister_device(video_dev);</span><br><span class=\"line\">    v4l2_device_unregister(&amp;v4l2_dev);</span><br><span class=\"line\">    video_device_release(video_dev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(video_init);</span><br><span class=\"line\">module_exit(video_exit);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">&quot;GPL&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八、多路video输入分析\"><a href=\"#八、多路video输入分析\" class=\"headerlink\" title=\"八、多路video输入分析\"></a>八、多路video输入分析</h1><h2 id=\"1、多路操作流程\"><a href=\"#1、多路操作流程\" class=\"headerlink\" title=\"1、多路操作流程\"></a>1、多路操作流程</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.设备初始化</span></span><br><span class=\"line\">_Init()&#123;</span><br><span class=\"line\">    _open()｛</span><br><span class=\"line\">        fd[i] = open(dev_name[i], O_RDWR <span class=\"comment\">/* required */</span>  | O_NONBLOCK, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ioctl(fd[i], VIDIOC_S_INPUT, &amp;inp);<span class=\"comment\">//设置输入</span></span><br><span class=\"line\">    ioctl(fd[i], VIDIOC_S_PARM, &amp;parms);<span class=\"comment\">//主要用来设置采集帧数</span></span><br><span class=\"line\">        ｝;<span class=\"comment\">//打开设备节点</span></span><br><span class=\"line\">    _Fmtset()｛</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_S_FMT, &amp;fmt);<span class=\"comment\">//设置</span></span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_G_FMT, &amp;fmt);<span class=\"comment\">//查询，判断设置是否成功</span></span><br><span class=\"line\">        ｝;<span class=\"comment\">//设置视频捕获模式</span></span><br><span class=\"line\">    _BuffReq()｛</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_REQBUFS, &amp;req);</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_QUERYBUF, &amp;buf);</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\">        ｝;<span class=\"comment\">//申请帧缓存，查询缓存转换地址，放入队列</span></span><br><span class=\"line\">    _ON&#123;</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_STREAMON, &amp;type);</span><br><span class=\"line\">    &#125;;<span class=\"comment\">//开启视频捕获</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.创建多线程</span></span><br><span class=\"line\">pthread_create(&amp;capture_pth, <span class=\"literal\">NULL</span>,Video_Capture, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">//3.采集数据</span></span><br><span class=\"line\">Video_Capture()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用select监视文件描述符，等待采集，如果有准备好的</span></span><br><span class=\"line\">    select(fd[<span class=\"number\">3</span>] + <span class=\"number\">1</span>, &amp;fdr, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);<span class=\"comment\">//IO多路复用</span></span><br><span class=\"line\">    <span class=\"comment\">//当准备好时，采用互斥锁的方式，唤醒休眠的数据处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( FD_ISSET(fd[<span class=\"number\">0</span>],&amp;fdr) &amp;&amp; FD_ISSET(fd[<span class=\"number\">1</span>],&amp;fdr) &amp;&amp; \\</span><br><span class=\"line\">\t\tFD_ISSET(fd[<span class=\"number\">2</span>],&amp;fdr) &amp;&amp; FD_ISSET(fd[<span class=\"number\">3</span>],&amp;fdr))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            _Queryaddr()&#123;</span><br><span class=\"line\">                ioctl(fd[i], VIDIOC_DQBUF, &amp;buf);<span class=\"comment\">//出列</span></span><br><span class=\"line\">                VideoPhyAddr[i] = buf.m.planes[<span class=\"number\">0</span>].m.mem_offset;</span><br><span class=\"line\">                ioctl(fd[i], VIDIOC_QBUF, &amp;buf);<span class=\"comment\">//入列</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            pthread_mutex_lock(&amp;VideoMutex);<span class=\"comment\">//上锁</span></span><br><span class=\"line\">            pthread_cond_signal(&amp;VideoCond);<span class=\"comment\">//唤醒休眠</span></span><br><span class=\"line\">            pthread_mutex_unlock(&amp;VideoMutex);<span class=\"comment\">//解锁</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//4.数据处理</span></span><br><span class=\"line\">_LoadVideoData()&#123;</span><br><span class=\"line\">    pthread_mutex_lock(&amp;VideoMutex);<span class=\"comment\">//上锁</span></span><br><span class=\"line\">\tpthread_cond_wait(&amp;VideoCond, &amp;VideoMutex);<span class=\"comment\">//休眠</span></span><br><span class=\"line\">\tpthread_mutex_unlock(&amp;VideoMutex);<span class=\"comment\">//解锁</span></span><br><span class=\"line\">    <span class=\"comment\">//************************</span></span><br><span class=\"line\">    <span class=\"comment\">//***原始视频流数据处理***</span></span><br><span class=\"line\">    <span class=\"comment\">//************************</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"style":""}},"length":18186,"excerpt":"<div align = \"center\">Video for Linux two(简称v4l2)</div>\n\n\n<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p> vl42是video for Linux 2的缩写，是一套Linux内核视频设备的驱动框架，该驱动框架为应用层提供一套统一的操作接口(一系列的ioctl)。包括一套数据结构和底层V4L2驱动接口。只能在Linux下使用。</p>","more":"<p>V4L2在设计时，是要支持很多广泛的设备的，它们之中只有一部分在本质上是真正的视频设备，可以支持多种设备,它可以有以下几种接口</p>\n<p>video capture interface：视频采集接口，这种接口应用于摄像头，v4l2在最初设计的时候就是应用于这种功能</p>\n<p>video output interface：视频输出接口，将静止图像或图像序列编码为模拟视频信号，通过此接口，应用程序可以控制编码过程并将图像从用户空间移动到驱动程序</p>\n<p>video overlay interface：视频直接传输接口，可以将采集到的视频数据直接传输到显示设备，不需要cpu参与，这种方式的显示图像的效率比其他方式高得多</p>\n<p>其他接口这里就不介绍了，下面来看一下v4l2的API</p>\n<h1 id=\"二、作用\"><a href=\"#二、作用\" class=\"headerlink\" title=\"二、作用\"></a>二、作用</h1><p>它使程序有发现设备和操作设备的能力。它主要是用一系列的回调函数来实现这些功能。像设置摄像头的频率、帧频、视频压缩格式和图像参数等等。并使得它们的输出标准化。当然也可以用于其他多媒体的开发，如音频等。</p>\n<h1 id=\"三、存放位置\"><a href=\"#三、存放位置\" class=\"headerlink\" title=\"三、存放位置\"></a>三、存放位置</h1><p>在Linux下，所有外设都被看成一种特殊的文件，成为“设备文件”，可以象访问普通文件一样对其进行读写。一般来说，采用V4L2驱动的摄像头设备文是&#x2F;dev&#x2F;v4l&#x2F;video0。为了通用，可以建立一个到&#x2F;dev&#x2F;video0的链接。V4L2支持两种方式来采集图像：内存映射方式(mmap)和直接读取方式(read)。V4L2在include&#x2F;linux&#x2F;videodev.h文件中定义了一些重要的数据结构，在采集图像的过程中，就是通过对这些数据的操作来获得最终的图像数据。Linux系统V4L2的能力可在Linux内核编译阶段配置，默认情况下都有此开发接口。V4L2从Linux 2.5.x版本的内核中开始出现。结构体详细参数可以在&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;videodev2.h中查看。</p>\n<h1 id=\"四、V4l2框架操作流程\"><a href=\"#四、V4l2框架操作流程\" class=\"headerlink\" title=\"四、V4l2框架操作流程\"></a>四、V4l2框架操作流程</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.打开视频设备文件</span></span><br><span class=\"line\"><span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;/dev/video0&quot;</span>,O_RDWR);</span><br><span class=\"line\"><span class=\"comment\">//2.查询视频设备属性，如：是否具有视频输入或者音频输入输出等</span></span><br><span class=\"line\">ioctl(fd,VIDIOC_QUERYCAP,&amp;cap);</span><br><span class=\"line\"><span class=\"comment\">//3.选择视频输入，一个视频设备可以有多个视频输入</span></span><br><span class=\"line\"><span class=\"comment\">//4.设置视频采集的参数:视频的制式，图像的采集窗口，帧格式，帧率，旋转方式</span></span><br><span class=\"line\">ioctl(fd,VIDIOC_S_FMT,&amp;fmt);</span><br><span class=\"line\"><span class=\"comment\">//5.向驱动申请视频流数据的帧缓冲区，一般为4个。</span></span><br><span class=\"line\">ioctl(fd, VIDIOC_REQBUFS, &amp;req);</span><br><span class=\"line\"><span class=\"comment\">//6.查询帧缓冲区在内核空间中的长度和偏移量 </span></span><br><span class=\"line\">ioctl(fd, VIDIOC_QUERYBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//7.将申请到的帧缓冲映射到用户空间mmap，这样可以直接操作采集到的帧，不用复制</span></span><br><span class=\"line\">buffers[i].length = buf.length;</span><br><span class=\"line\">buffers[i].start = mmap(<span class=\"literal\">NULL</span>, buffers[i].length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, buffers[i].offset);;</span><br><span class=\"line\"><span class=\"comment\">//8.将申请到的帧缓冲全部放入视频采集输出队列，以便存放采集的数据</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//9.开始视频采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_STREAMON, &amp;type);</span><br><span class=\"line\"><span class=\"comment\">//10.出列以取得已采集数据的帧缓冲，取得原始数据</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_DQBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//此时应用程序处理该帧缓冲区的数据，如：进行数据的处理和保存，</span></span><br><span class=\"line\">fp = fopen(picture.yuv,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//保存图片&quot;w&quot;，保存视频&quot;a&quot;追加写</span></span><br><span class=\"line\">fwrite(addr,<span class=\"number\">1</span>,length,fp);</span><br><span class=\"line\">fclose(fp);</span><br><span class=\"line\"><span class=\"comment\">//11.处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\"><span class=\"comment\">//12.停止视频的采集</span></span><br><span class=\"line\">ioctl (fd, VIDIOC_STREAMOFF, &amp;type);</span><br><span class=\"line\"><span class=\"comment\">//13.释放申请的视频帧缓冲区</span></span><br><span class=\"line\">unmap;</span><br><span class=\"line\"><span class=\"comment\">//14.关闭视频设备文件</span></span><br><span class=\"line\">close(fd);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五、V4l2的常用IOCTL接口命令–-gt-gt-结构体介绍\"><a href=\"#五、V4l2的常用IOCTL接口命令–-gt-gt-结构体介绍\" class=\"headerlink\" title=\"五、V4l2的常用IOCTL接口命令–&gt;&gt;结构体介绍\"></a>五、V4l2的常用IOCTL接口命令–&gt;&gt;结构体介绍</h1><h2 id=\"1、常用的IOCTL接口命令\"><a href=\"#1、常用的IOCTL接口命令\" class=\"headerlink\" title=\"1、常用的IOCTL接口命令\"></a>1、常用的IOCTL接口命令</h2><p>在内核目录include&#x2F;linux&#x2F;videodev2.h中定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VIDIOC_QUERYCAP        <span class=\"comment\">//查询驱动功能 </span></span><br><span class=\"line\">VIDIOC_QUERYSTD     <span class=\"comment\">//检查当前视频设备支持的标准，例如PAL或NTSC。</span></span><br><span class=\"line\">VIDIOC_S_INPUT</span><br><span class=\"line\">VIDIOC_ENUMINPUT\t<span class=\"comment\">//枚举所有可用的输入</span></span><br><span class=\"line\">VIDIOC_S_PARM</span><br><span class=\"line\">VIDIOC_ENUM_FMT        <span class=\"comment\">//获取当前驱动支持的视频格式 </span></span><br><span class=\"line\">VIDIOC_S_FMT        <span class=\"comment\">//设置当前驱动的频捕获格式 </span></span><br><span class=\"line\">VIDIOC_G_FMT        <span class=\"comment\">//读取当前驱动的频捕获格式 </span></span><br><span class=\"line\">VIDIOC_TRY_FMT        <span class=\"comment\">//验证当前驱动的显示格式 </span></span><br><span class=\"line\">VIDIOC_CROPCAP        <span class=\"comment\">//查询驱动的修剪能力 </span></span><br><span class=\"line\">VIDIOC_S_CROP        <span class=\"comment\">//设置视频信号的矩形边框 </span></span><br><span class=\"line\">VIDIOC_G_CROP        <span class=\"comment\">//读取视频信号的矩形边框</span></span><br><span class=\"line\">VIDIOC_REQBUFS\t\t <span class=\"comment\">//分配内存 </span></span><br><span class=\"line\">VIDIOC_QUERYBUF <span class=\"comment\">//把VIDIOC_REQBUFS中分配的数据缓存转换成物理地址</span></span><br><span class=\"line\">VIDIOC_QBUF        <span class=\"comment\">//把数据从缓存中读取出来 </span></span><br><span class=\"line\">VIDIOC_DQBUF        <span class=\"comment\">//把数据放回缓存队列 </span></span><br><span class=\"line\">VIDIOC_STREAMON        <span class=\"comment\">//开始视频显示函数 </span></span><br><span class=\"line\">VIDIOC_STREAMOFF        <span class=\"comment\">//结束视频显示函数 </span></span><br><span class=\"line\">VIDIOC_EXPBUF        <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、常用的结构体\"><a href=\"#2、常用的结构体\" class=\"headerlink\" title=\"2、常用的结构体\"></a>2、常用的结构体</h2><p>在内核目录include&#x2F;linux&#x2F;videodev2.h中定义。参见&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;videodev2.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_capability</span>        //视频设备的功能，对应命令<span class=\"title\">VIDIOC_QUERYCAP</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_std_id</span>        //视频制式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_input</span>        //视频输入信息，对应命令<span class=\"title\">VIDIOC_ENUMINPUT</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_streamparm</span> //结构体<span class=\"title\">v4l2_streamparm</span>来描述视频流的属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_standard</span>        //视频的制式，比如<span class=\"title\">PAL</span>，<span class=\"title\">NTSC</span>，对应命令<span class=\"title\">VIDIOC_ENUMSTD</span> </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span>        //帧的格式，对应命令<span class=\"title\">VIDIOC_G_FMT</span>、<span class=\"title\">VIDIOC_S_FMT</span>等</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_crop</span>        //视频信号矩形边框</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span>        //申请帧缓冲，对应命令<span class=\"title\">VIDIOC_REQBUFS</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span>        //驱动中的一帧图像缓存，对应命令<span class=\"title\">VIDIOC_QUERYBUF</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_exportbuffer</span> //导出<span class=\"title\">fd</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、v4l2-capability\"><a href=\"#1、v4l2-capability\" class=\"headerlink\" title=\"1、v4l2_capability\"></a>1、v4l2_capability</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_capability</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tu8 driver[<span class=\"number\">16</span>]; <span class=\"comment\">// 驱动名字</span></span><br><span class=\"line\">\tu8 card[<span class=\"number\">32</span>]; <span class=\"comment\">// 设备名字</span></span><br><span class=\"line\">\tu8 bus_info[<span class=\"number\">32</span>]; <span class=\"comment\">// 设备在系统中的位置</span></span><br><span class=\"line\">\tu32 version; <span class=\"comment\">// 驱动版本号</span></span><br><span class=\"line\">\tu32 capabilities; <span class=\"comment\">// 设备支持的操作</span></span><br><span class=\"line\">\tu32 reserved[<span class=\"number\">4</span>]; <span class=\"comment\">// 保留字段</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中域 capabilities 代表设备支持的操作模式，常见的值有 V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING 表示是一个视频捕捉设备并且具有数据流控制模式；另外 driver 域需要和 struct video_device 中的 name 匹配。</p>\n<h3 id=\"2、v4l2-input\"><a href=\"#2、v4l2-input\" class=\"headerlink\" title=\"2、v4l2_input\"></a>2、v4l2_input</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_input</span> &#123;</span></span><br><span class=\"line\">\t__u32\t     index;\t\t<span class=\"comment\">/*  Which input */</span></span><br><span class=\"line\">\t__u8\t     name[<span class=\"number\">32</span>];\t\t<span class=\"comment\">/*  Label */</span></span><br><span class=\"line\">\t__u32\t     type;\t\t<span class=\"comment\">/*  Type of input */</span></span><br><span class=\"line\">\t__u32\t     audioset;\t\t<span class=\"comment\">/*  Associated audios (bitfield) */</span></span><br><span class=\"line\">\t__u32        tuner;             <span class=\"comment\">/*  Associated tuner */</span></span><br><span class=\"line\">\tv4l2_std_id  <span class=\"built_in\">std</span>;</span><br><span class=\"line\">\t__u32\t     status;</span><br><span class=\"line\">\t__u32\t     reserved[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>视频捕获的应用首先要通过VIDIOC_ENUMINPUT命令来枚举所有可用的输入。在V4L2层，这个调用会转换成调用一个驱动中对应的回调函数：<br> int (*vidioc_enum_input)(struct file *file, void *private_data,  struct v4l2_input *input);</p>\n<h3 id=\"3、v4l2-format\"><a href=\"#3、v4l2-format\" class=\"headerlink\" title=\"3、v4l2_format\"></a>3、v4l2_format</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span> &#123;</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_pix_format</span>         <span class=\"title\">pix</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VIDEO_CAPTURE */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_window</span>             <span class=\"title\">win</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VIDEO_OVERLAY */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_vbi_format</span>         <span class=\"title\">vbi</span>;</span>     <span class=\"comment\">/* V4L2_BUF_TYPE_VBI_CAPTURE */</span> </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_sliced_vbi_format</span>  <span class=\"title\">sliced</span>;</span>  <span class=\"comment\">/* V4L2_BUF_TYPE_SLICED_VBI_CAPTURE */</span> </span><br><span class=\"line\">        __u8   raw_data[<span class=\"number\">200</span>];                   <span class=\"comment\">/* user-defined */</span> </span><br><span class=\"line\">    &#125; fmt; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> &#123;</span> </span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_CAPTURE        = <span class=\"number\">1</span>, <span class=\"comment\">//视频捕获模式</span></span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_OUTPUT         = <span class=\"number\">2</span>, </span><br><span class=\"line\">    V4L2_BUF_TYPE_VIDEO_OVERLAY        = <span class=\"number\">3</span>, </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    V4L2_BUF_TYPE_PRIVATE              = <span class=\"number\">0x80</span>, </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_pix_format</span> &#123;</span> </span><br><span class=\"line\">    __u32                   width; <span class=\"comment\">//视频的宽</span></span><br><span class=\"line\">    __u32                   height; <span class=\"comment\">//视频的高</span></span><br><span class=\"line\">    __u32                   pixelformat; <span class=\"comment\">//视频数据格式</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_field</span>         <span class=\"title\">field</span>;</span> </span><br><span class=\"line\">    __u32                   bytesperline;   <span class=\"comment\">/* for padding, zero if unused */</span> </span><br><span class=\"line\">    __u32                   sizeimage; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_colorspace</span>    <span class=\"title\">colorspace</span>;</span> </span><br><span class=\"line\">    __u32                   priv;           <span class=\"comment\">/* private data, depends on pixelformat */</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>常见的捕获模式为 V4L2_BUF_TYPE_VIDEO_CAPTURE 即视频捕捉模式，在此模式下 fmt 联合体采用域 v4l2_pix_format：其中 width 为视频的宽、height 为视频的高、pixelformat 为视频数据格式（常见的值有 V4L2_PIX_FMT_YUV422P | V4L2_PIX_FMT_RGB565）、bytesperline 为一行图像占用的字节数、sizeimage 则为图像占用的总字节数、colorspace 指定设备的颜色空间。</p>\n<h3 id=\"4、v4l2-requestbuffers\"><a href=\"#4、v4l2-requestbuffers\" class=\"headerlink\" title=\"4、v4l2_requestbuffers\"></a>4、v4l2_requestbuffers</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span> &#123;</span></span><br><span class=\"line\">    __u32                   count;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span>      <span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span>        <span class=\"title\">memory</span>;</span></span><br><span class=\"line\">    __u32                   reserved[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span> &#123;</span></span><br><span class=\"line\">    V4L2_MEMORY_MMAP             = <span class=\"number\">1</span>,</span><br><span class=\"line\">    V4L2_MEMORY_USERPTR          = <span class=\"number\">2</span>,</span><br><span class=\"line\">    V4L2_MEMORY_OVERLAY          = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>VIDIOC_REQBUFS 命令通过结构 v4l2_requestbuffers 请求驱动申请一片连续的内存用于缓存视频信息;count 指定根据图像占用空间大小申请的缓存区个数，type 为视频捕获模式，memory 为内存区的使用方式.</p>\n<h3 id=\"5、v4l2-buffer\"><a href=\"#5、v4l2-buffer\" class=\"headerlink\" title=\"5、v4l2_buffer\"></a>5、v4l2_buffer</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span> &#123;</span></span><br><span class=\"line\">    __u32   index;\t<span class=\"comment\">//buffer 序号 </span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span>    <span class=\"title\">type</span>;</span>\t<span class=\"comment\">//buffer 类型 </span></span><br><span class=\"line\">    __u32    bytesused;\t<span class=\"comment\">//缓存已使用空间大小，buffer 中已使用的字节数</span></span><br><span class=\"line\">    __u32    flags;\t<span class=\"comment\">//区分是MMAP 还是USERPTR</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_field</span>  <span class=\"title\">field</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span>    <span class=\"title\">timestamp</span>;</span>\t<span class=\"comment\">//获取第一个字节时的系统时间 </span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_timecode</span>   <span class=\"title\">timecode</span>;</span></span><br><span class=\"line\">    __u32     sequence;\t<span class=\"comment\">//队列中的序号</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* memory location */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_memory</span>    <span class=\"title\">memory</span>;</span>\t<span class=\"comment\">//缓存使用方式</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">            __u32   offset;<span class=\"comment\">//当前缓存与内存区起始地址的偏移，缓冲帧地址，只对MMAP 有效  </span></span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">long</span>   userptr;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_plane</span> *<span class=\"title\">planes</span>;</span></span><br><span class=\"line\">    &#125; m;</span><br><span class=\"line\">    __u32    length;\t<span class=\"comment\">//缓冲帧长度</span></span><br><span class=\"line\">    __u32    input;</span><br><span class=\"line\">    __u32    reserved;\t<span class=\"comment\">//一般用于传递物理地址值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_plane</span> &#123;</span></span><br><span class=\"line\">\t__u32\t\t\tbytesused;</span><br><span class=\"line\">\t__u32\t\t\tlength;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">\t\t__u32\t\tmem_offset;<span class=\"comment\">//offset是放在m.mem_offset中返回用户空间的</span></span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span>\tuserptr;</span><br><span class=\"line\">\t\t__s32\t\tfd;</span><br><span class=\"line\">\t&#125; m;</span><br><span class=\"line\">\t__u32\t\t\tdata_offset;</span><br><span class=\"line\">\t__u32\t\t\treserved[<span class=\"number\">11</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>flags 为缓存当前状态（常见值有 V4L2_BUF_FLAG_MAPPED | V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE，分别代表当前缓存已经映射、缓存可以采集数据、缓存可以提取数据）</p>\n<p>另外 VIDIOC_QUERYBUF，VIDIOC_QBUF 和 VIDIOC_DQBUF 命令都采用结构 v4l2_buffer 与驱动通信：VIDIOC_QBUF 命令向驱动传递应用程序已经处理完的缓存，即将缓存加入空闲可捕获视频的队列，传递的主要参数为 index；VIDIOC_DQBUF 命令向驱动获取已经存放有视频数据的缓存，v4l2_buffer 的各个域几乎都会被更新，但主要的参数也是 index，应用程序会根据 index 确定可用数据的起始地址和范围。</p>\n<h3 id=\"6、v4l2-captureparm\"><a href=\"#6、v4l2-captureparm\" class=\"headerlink\" title=\"6、v4l2_captureparm\"></a>6、v4l2_captureparm</h3><p>设置Stream参数。(主要是采集帧数)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_streamparm</span> <span class=\"title\">parms</span>;</span></span><br><span class=\"line\">parms.parm.capture.timeperframe.numerator=<span class=\"number\">1</span>;</span><br><span class=\"line\">parms.parm.capture.timeperframe.denominator=<span class=\"number\">60</span>;</span><br><span class=\"line\">rel = ioctl(fdUsbCam,VIDIOC_S_PARM, setfps);</span><br></pre></td></tr></table></figure>\n\n<p>对于捕获设备而言，parm.capture字段是要关注的内容，这个结构体如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_captureparm</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">       __u32             capability;</span><br><span class=\"line\">       __u32             capturemode;</span><br><span class=\"line\">       structv4l2_fract  timeperframe;</span><br><span class=\"line\">       __u32             extendedmode;</span><br><span class=\"line\">       __u32          readbuffers;</span><br><span class=\"line\">       __u32             reserved[<span class=\"number\">4</span>];</span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">timeperframe字段用于指定想要使用的帧频率，它又是一个结构体：</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_fract</span>&#123;</span></span><br><span class=\"line\">       __u32  numerator;</span><br><span class=\"line\">       __u32  denominator;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>numerator和denominator所描述的系数给出的是成功的帧之间的时间间隔。numerator 分子， denominator 分母。主要表达每次帧之间时间间隔。 numerator&#x2F; denominator秒一帧。</p>\n<h3 id=\"7、v4l2-exportbuffer\"><a href=\"#7、v4l2-exportbuffer\" class=\"headerlink\" title=\"7、v4l2_exportbuffer\"></a>7、v4l2_exportbuffer</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_exportbuffer</span> &#123;</span></span><br><span class=\"line\">\t__u32\t\ttype; <span class=\"comment\">/* enum v4l2_buf_type */</span></span><br><span class=\"line\">\t__u32\t\tindex;</span><br><span class=\"line\">\t__u32\t\tplane;</span><br><span class=\"line\">\t__u32\t\tflags;</span><br><span class=\"line\">\t__s32\t\tfd;</span><br><span class=\"line\">\t__u32\t\treserved[<span class=\"number\">11</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"六、应用程序代码分析\"><a href=\"#六、应用程序代码分析\" class=\"headerlink\" title=\"六、应用程序代码分析\"></a>六、应用程序代码分析</h1><h2 id=\"1、保存图像picture-yuv\"><a href=\"#1、保存图像picture-yuv\" class=\"headerlink\" title=\"1、保存图像picture.yuv\"></a>1、保存图像picture.yuv</h2><p>见code中，camera_app_pic.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/videodev2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VideoBuffer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span>   *start;<span class=\"comment\">//帧缓存mmap映射后的首地址</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>  length;<span class=\"comment\">//缓存大小</span></span><br><span class=\"line\">&#125; VideoBuffer;</span><br><span class=\"line\">VideoBuffer *buffers;<span class=\"comment\">//用来存放映射后的帧缓存区地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">camera_device_open</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"comment\">//用阻塞模式打开摄像头设备</span></span><br><span class=\"line\">\tfd = open(<span class=\"string\">&quot;/dev/video0&quot;</span>,O_RDWR,<span class=\"number\">0</span>);<span class=\"comment\">//设备节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fd &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;open /dev/video0 is fail.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">init_camera_attribute</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> numBufs;<span class=\"comment\">//</span></span><br><span class=\"line\">\tv4l2_std_id id;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_format</span> <span class=\"title\">fmt</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_requestbuffers</span>  <span class=\"title\">req</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span>    <span class=\"title\">buf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//检查当前视频设备支持的标准</span></span><br><span class=\"line\">\tioctl(fd,VIDIOC_QUERYSTD,&amp;id);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//设置视频捕获格式</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;fmt,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(fmt));</span><br><span class=\"line\">\tfmt.type  = V4L2_BUF_TYPE_VIDEO_CAPTURE;<span class=\"comment\">//视频捕获模式</span></span><br><span class=\"line\">\tfmt.fmt.pix.width = <span class=\"number\">640</span>;<span class=\"comment\">//视频的宽</span></span><br><span class=\"line\">\tfmt.fmt.pix.height = <span class=\"number\">480</span>;<span class=\"comment\">//视频的高</span></span><br><span class=\"line\">\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;<span class=\"comment\">//视频数据格式YUYV</span></span><br><span class=\"line\"><span class=\"comment\">//\tfmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YVU420;</span></span><br><span class=\"line\">\tfmt.fmt.pix.field = V4L2_FIELD_INTERLACED;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_S_FMT,&amp;fmt) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_S_FMT is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//分配内存，申请帧缓存，</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;req,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(req));</span><br><span class=\"line\">\treq.count = <span class=\"number\">4</span>;<span class=\"comment\">//帧缓存的个数，一般不大于5</span></span><br><span class=\"line\">\treq.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\treq.memory = V4L2_MEMORY_MMAP;<span class=\"comment\">//内存区的使用方式，mmap映射</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_REQBUFS,&amp;req) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_REQBUFS is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取并记录缓存的物理空间</span></span><br><span class=\"line\">\tbuffers = <span class=\"built_in\">calloc</span>(req.count,<span class=\"keyword\">sizeof</span>(*buffers));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(numBufs = <span class=\"number\">0</span>; numBufs &lt; req.count; numBufs ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(&amp;buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\tbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t\tbuf.memory = V4L2_MEMORY_MMAP;</span><br><span class=\"line\">\t\tbuf.index = numBufs;<span class=\"comment\">//缓存编号，4帧缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//读取缓存，查询帧缓冲区在内核空间中的长度和偏移量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QUERYBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;set VIDIOC_REQBUFS is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t <span class=\"comment\">// 转换成相对地址，将申请到的帧缓冲映射到用户空间mmap</span></span><br><span class=\"line\">\t\tbuffers[numBufs].length = buf.length;</span><br><span class=\"line\">\t\tbuffers[numBufs].start  = mmap(<span class=\"literal\">NULL</span>,buf.length,PROT_READ|PROT_WRITE,</span><br><span class=\"line\">\t\t\t\tMAP_SHARED,fd,buf.m.offset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buffers[numBufs].start == MAP_FAILED)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;mmap is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 放入缓存队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;set VIDIOC_QBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">start_capturing</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//开始采集数据</span></span><br><span class=\"line\">\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_STREAMON,&amp;type) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;start capturing is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//保存图片</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">build_picture</span><span class=\"params\">(<span class=\"type\">void</span> *addr,<span class=\"type\">int</span> length)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *fp;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> picture_name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(picture_name,<span class=\"string\">&quot;picture%d.yuv&quot;</span>,num++);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfp = fopen(picture_name,<span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fp == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;fail to open &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfwrite(addr,<span class=\"number\">1</span>,length,fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read_image</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_buffer</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\tbuf.type=V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\tbuf.memory=V4L2_MEMORY_MMAP;</span><br><span class=\"line\">\tbuf.index=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//读取缓存，出列以取得已采集数据的帧缓冲，取得原始数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_DQBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;set VIDIOC_DQBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将数据存为图片</span></span><br><span class=\"line\">\tbuild_picture(buffers[buf.index].start,buffers[buf.index].length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重新放入缓存队列，处理完后，将该帧缓冲区重新入列,这样便可以循环采集数据，直到停止采集</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_QBUF,&amp;buf) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;reset VIDIOC_QBUF is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">when_to_read</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)<span class=\"comment\">//保存三张图片</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfd_set rfds;<span class=\"comment\">//指定内核监测的文件描述符集合</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span><span class=\"comment\">//设置超时时间</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> retval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFD_ZERO(&amp;rfds);<span class=\"comment\">//清空集合</span></span><br><span class=\"line\">\t\tFD_SET(fd, &amp;rfds);<span class=\"comment\">//将fd添加到集合中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttv.tv_sec = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\ttv.tv_usec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//当有数据采集好在缓冲区准备好时，开始读取缓存数据</span></span><br><span class=\"line\">\t\tretval = select(fd+<span class=\"number\">1</span>, &amp;rfds, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(retval == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t perror(<span class=\"string\">&quot;select()&quot;</span>);</span><br><span class=\"line\">\t\t\t <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(retval == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;select is timeout\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tread_image(fd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">stop_capturing</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">v4l2_buf_type</span> <span class=\"title\">type</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//停止采集数据</span></span><br><span class=\"line\">\ttype = V4L2_BUF_TYPE_VIDEO_CAPTURE;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(fd,VIDIOC_STREAMOFF,&amp;type) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;stop capturing is fail&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">uninit_camera</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"comment\">//释放申请的视频帧缓冲区</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == munmap(buffers[i].start,buffers[i].length))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tperror(<span class=\"string\">&quot;munmap is fail&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buffers);</span><br><span class=\"line\">\t<span class=\"comment\">//关闭视频设备文件</span></span><br><span class=\"line\">\tclose(fd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\tfd = camera_device_open();\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinit_camera_attribute(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstart_capturing(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhen_to_read(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstop_capturing(fd);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuninit_camera(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、保存视频video-yuv\"><a href=\"#2、保存视频video-yuv\" class=\"headerlink\" title=\"2、保存视频video.yuv\"></a>2、保存视频video.yuv</h2><p>见code中，camera_app_mp4.c</p>\n<p>主要区别：fp &#x3D; fopen(video_name,”a”)，追加写的方式打开，进行采集</p>\n<h1 id=\"七、V4l2驱动框架\"><a href=\"#七、V4l2驱动框架\" class=\"headerlink\" title=\"七、V4l2驱动框架\"></a>七、V4l2驱动框架</h1><h2 id=\"1、主要对象\"><a href=\"#1、主要对象\" class=\"headerlink\" title=\"1、主要对象\"></a>1、主要对象</h2><h3 id=\"1、video-device\"><a href=\"#1、video-device\" class=\"headerlink\" title=\"1、video_device\"></a>1、video_device</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">video_device</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> *<span class=\"title\">fops</span>;</span> </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//操作方法结构体</span></span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cdev</span> *<span class=\"title\">cdev</span>;</span>\t（file_opreations）\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//字符设备驱动</span></span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> *<span class=\"title\">v4l2_dev</span>;</span>\t<span class=\"comment\">/* v4l2_device parent */</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span> name[<span class=\"number\">32</span>]; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//驱动的名字</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> minor;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//次设备号</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">void</span> (*release)(<span class=\"keyword\">struct</span> video_device *vdev);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//释放资源的函数</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> *<span class=\"title\">ioctl_ops</span>;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//ioctl的操作方法</span></span><br><span class=\"line\">\t\t&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>  一个字符设备，为用户空间提供设备节点(&#x2F;dev&#x2F;videox)，提供系统调用的相关操作(open、ioctl…) </p>\n<p>可以看到video_device中含有一个cdev还有v4l2_device，此外还有fops和ioctl_ops，从应用层进行系统调用会经过v4l2的核心层回调到这里 </p>\n<h4 id=\"v4l2-file-operations\"><a href=\"#v4l2-file-operations\" class=\"headerlink\" title=\"v4l2_file_operations\"></a>v4l2_file_operations</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> (*read) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">char</span> __user *, <span class=\"type\">size_t</span>, <span class=\"type\">loff_t</span> *);</span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> (*write) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">const</span> <span class=\"type\">char</span> __user *, <span class=\"type\">size_t</span>, <span class=\"type\">loff_t</span> *);</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"title function_\">int</span> <span class=\"params\">(*poll)</span> <span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"keyword\">struct</span> poll_table_struct *)</span>;</span><br><span class=\"line\">\t<span class=\"type\">long</span> (*ioctl) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">int</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>);</span><br><span class=\"line\">\t<span class=\"type\">long</span> (*unlocked_ioctl) (<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">int</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>);</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"title function_\">long</span> <span class=\"params\">(*get_unmapped_area)</span> <span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>, <span class=\"type\">unsigned</span> <span class=\"type\">long</span>)</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*mmap) (<span class=\"keyword\">struct</span> file *, <span class=\"keyword\">struct</span> vm_area_struct *);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*open) (<span class=\"keyword\">struct</span> file *);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*release) (<span class=\"keyword\">struct</span> file *);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v4l2-ioctl-ops\"><a href=\"#v4l2-ioctl-ops\" class=\"headerlink\" title=\"v4l2_ioctl_ops\"></a>v4l2_ioctl_ops</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_querycap)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_capability *cap);</span><br><span class=\"line\">\t<span class=\"comment\">/* Buffer handlers */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_reqbufs) (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_requestbuffers *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_querybuf)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_qbuf)    (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_dqbuf)   (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">struct</span> v4l2_buffer *b);</span><br><span class=\"line\">    <span class=\"comment\">/* Stream on/off */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_streamon) (<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">enum</span> v4l2_buf_type i);</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*vidioc_streamoff)(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">void</span> *fh, <span class=\"keyword\">enum</span> v4l2_buf_type i);</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p> v4l2有很多ioctl操作，具体实现都在这里 </p>\n<h3 id=\"2、v4l2-device\"><a href=\"#2、v4l2-device\" class=\"headerlink\" title=\"2、v4l2_device\"></a>2、v4l2_device</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/* used to keep track of the registered subdevs */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">subdevs</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>  嵌入到video_device中，表示一个v4l2设备的实例 </p>\n<p>可以看到v4l2_device中有一个v4l2_subdev的链表，v4l2_device的主要目的时用来管理v4l2_subdev </p>\n<h3 id=\"3、v4l2-subdev\"><a href=\"#3、v4l2-subdev\" class=\"headerlink\" title=\"3、v4l2_subdev\"></a>3、v4l2_subdev</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_subdev</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> *<span class=\"title\">v4l2_dev</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_subdev_ops</span> *<span class=\"title\">ops</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p> 依附在v4l2_device之下，并表示一个v4l2设备的子设备，一个v4l2_devide下可以有多个sub_device </p>\n<p> v4l2_subdev中有一个v4l2_subdev_ops，实现了一系列的操作，供v4l2_device调用 </p>\n<p> <strong>subdev的设计目的是为了多路复用，就是用一个v4l2_device可以服务多个v4l2_subdev</strong> </p>\n<h3 id=\"4、V4l2提供的注册接口\"><a href=\"#4、V4l2提供的注册接口\" class=\"headerlink\" title=\"4、V4l2提供的注册接口\"></a>4、V4l2提供的注册接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">video_register_device</span><span class=\"params\">(<span class=\"keyword\">struct</span> video_device *vdev, <span class=\"type\">int</span> type, <span class=\"type\">int</span> nr)</span>;<span class=\"comment\">//video_device注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">video_unregister_device</span><span class=\"params\">(<span class=\"keyword\">struct</span> video_device *vdev)</span>;<span class=\"comment\">//video_device注销</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">v4l2_device_register</span><span class=\"params\">(<span class=\"keyword\">struct</span> device *dev, <span class=\"keyword\">struct</span> v4l2_device *v4l2_dev)</span>;<span class=\"comment\">//v4l2_device注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">v4l2_device_unregister</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_device *v4l2_dev)</span>;<span class=\"comment\">//v4l2_device注销</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">v4l2_device_register_subdev</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_device *v4l2_dev,<span class=\"keyword\">struct</span> v4l2_subdev *sd)</span>;<span class=\"comment\">//v4l2_subdev注册</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">v4l2_device_unregister_subdev</span><span class=\"params\">(<span class=\"keyword\">struct</span> v4l2_subdev *sd)</span>;<span class=\"comment\">//v4l2_subdev注销</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、图示\"><a href=\"#2、图示\" class=\"headerlink\" title=\"2、图示\"></a>2、图示</h2><img src=\"1.png\"  />\n\n<img src=\"2.png\"  />\n\n<img src=\"3.png\" style=\"zoom:80%;\" />\n\n<h2 id=\"3、主要框架\"><a href=\"#3、主要框架\" class=\"headerlink\" title=\"3、主要框架\"></a>3、主要框架</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;...&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">video_device</span>* <span class=\"title\">video_dev</span>;</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_device</span> <span class=\"title\">v4l2_dev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实现各种系统调用 */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_file_operations</span> <span class=\"title\">video_dev_fops</span> =</span> &#123;</span><br><span class=\"line\">\t.owner\t\t    = THIS_MODULE,</span><br><span class=\"line\">\t.release        = vdev_close,</span><br><span class=\"line\">\t.read           = vdev_read,</span><br><span class=\"line\">\t.poll\t\t    = vdev_poll,</span><br><span class=\"line\">\t.ioctl          = video_ioctl2,</span><br><span class=\"line\">\t.mmap           = vdev_mmap,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实现各种系统调用 */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">v4l2_ioctl_ops</span> <span class=\"title\">video_dev_ioctl_ops</span> =</span> &#123;</span><br><span class=\"line\">\t.vidioc_querycap      = vidioc_querycap,</span><br><span class=\"line\">\t.vidioc_enum_fmt_vid_cap  = vidioc_enum_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_g_fmt_vid_cap     = vidioc_g_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_try_fmt_vid_cap   = vidioc_try_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_s_fmt_vid_cap     = vidioc_s_fmt_vid_cap,</span><br><span class=\"line\">\t.vidioc_reqbufs       = vidioc_reqbufs,</span><br><span class=\"line\">\t.vidioc_querybuf      = vidioc_querybuf,</span><br><span class=\"line\">\t.vidioc_qbuf          = vidioc_qbuf,</span><br><span class=\"line\">\t.vidioc_dqbuf         = vidioc_dqbuf,</span><br><span class=\"line\">\t.vidioc_enum_input    = vidioc_enum_input,</span><br><span class=\"line\">\t.vidioc_g_input       = vidioc_g_input,</span><br><span class=\"line\">\t.vidioc_s_input       = vidioc_s_input,</span><br><span class=\"line\">\t.vidioc_streamon      = vidioc_streamon,</span><br><span class=\"line\">\t.vidioc_streamoff     = vidioc_streamoff,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> __init <span class=\"title function_\">video_init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 分配并设置一个video_device */</span></span><br><span class=\"line\">    video_dev = video_device_alloc();</span><br><span class=\"line\">    video_dev-&gt;fops = &amp;video_dev_fops;</span><br><span class=\"line\">    video_dev-&gt;ioctl_ops = &amp;video_dev_ioctl_ops;</span><br><span class=\"line\">    video_dev-&gt;release = video_device_release;</span><br><span class=\"line\">    video_dev-&gt;tvnorms = V4L2_STD_525_60;</span><br><span class=\"line\">    video_dev-&gt;current_norm = V4L2_STD_NTSC_M;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册一个v4l2_device */</span></span><br><span class=\"line\">    v4l2_device_register(video_dev-&gt;dev, &amp;v4l2_dev);    </span><br><span class=\"line\">    video_dev-&gt;v4l2_dev = &amp;video_dev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册一个video_device字符设备 */</span></span><br><span class=\"line\">    video_register_device(video_dev, VFL_TYPE_GRABBER, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> __exit <span class=\"title function_\">video_exit</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注销</span></span><br><span class=\"line\">    video_unregister_device(video_dev);</span><br><span class=\"line\">    v4l2_device_unregister(&amp;v4l2_dev);</span><br><span class=\"line\">    video_device_release(video_dev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(video_init);</span><br><span class=\"line\">module_exit(video_exit);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">&quot;GPL&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八、多路video输入分析\"><a href=\"#八、多路video输入分析\" class=\"headerlink\" title=\"八、多路video输入分析\"></a>八、多路video输入分析</h1><h2 id=\"1、多路操作流程\"><a href=\"#1、多路操作流程\" class=\"headerlink\" title=\"1、多路操作流程\"></a>1、多路操作流程</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.设备初始化</span></span><br><span class=\"line\">_Init()&#123;</span><br><span class=\"line\">    _open()｛</span><br><span class=\"line\">        fd[i] = open(dev_name[i], O_RDWR <span class=\"comment\">/* required */</span>  | O_NONBLOCK, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ioctl(fd[i], VIDIOC_S_INPUT, &amp;inp);<span class=\"comment\">//设置输入</span></span><br><span class=\"line\">    ioctl(fd[i], VIDIOC_S_PARM, &amp;parms);<span class=\"comment\">//主要用来设置采集帧数</span></span><br><span class=\"line\">        ｝;<span class=\"comment\">//打开设备节点</span></span><br><span class=\"line\">    _Fmtset()｛</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_S_FMT, &amp;fmt);<span class=\"comment\">//设置</span></span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_G_FMT, &amp;fmt);<span class=\"comment\">//查询，判断设置是否成功</span></span><br><span class=\"line\">        ｝;<span class=\"comment\">//设置视频捕获模式</span></span><br><span class=\"line\">    _BuffReq()｛</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_REQBUFS, &amp;req);</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_QUERYBUF, &amp;buf);</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_QBUF, &amp;buf);</span><br><span class=\"line\">        ｝;<span class=\"comment\">//申请帧缓存，查询缓存转换地址，放入队列</span></span><br><span class=\"line\">    _ON&#123;</span><br><span class=\"line\">        ioctl(fd[i], VIDIOC_STREAMON, &amp;type);</span><br><span class=\"line\">    &#125;;<span class=\"comment\">//开启视频捕获</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.创建多线程</span></span><br><span class=\"line\">pthread_create(&amp;capture_pth, <span class=\"literal\">NULL</span>,Video_Capture, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">//3.采集数据</span></span><br><span class=\"line\">Video_Capture()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用select监视文件描述符，等待采集，如果有准备好的</span></span><br><span class=\"line\">    select(fd[<span class=\"number\">3</span>] + <span class=\"number\">1</span>, &amp;fdr, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);<span class=\"comment\">//IO多路复用</span></span><br><span class=\"line\">    <span class=\"comment\">//当准备好时，采用互斥锁的方式，唤醒休眠的数据处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( FD_ISSET(fd[<span class=\"number\">0</span>],&amp;fdr) &amp;&amp; FD_ISSET(fd[<span class=\"number\">1</span>],&amp;fdr) &amp;&amp; \\</span><br><span class=\"line\">\t\tFD_ISSET(fd[<span class=\"number\">2</span>],&amp;fdr) &amp;&amp; FD_ISSET(fd[<span class=\"number\">3</span>],&amp;fdr))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            _Queryaddr()&#123;</span><br><span class=\"line\">                ioctl(fd[i], VIDIOC_DQBUF, &amp;buf);<span class=\"comment\">//出列</span></span><br><span class=\"line\">                VideoPhyAddr[i] = buf.m.planes[<span class=\"number\">0</span>].m.mem_offset;</span><br><span class=\"line\">                ioctl(fd[i], VIDIOC_QBUF, &amp;buf);<span class=\"comment\">//入列</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            pthread_mutex_lock(&amp;VideoMutex);<span class=\"comment\">//上锁</span></span><br><span class=\"line\">            pthread_cond_signal(&amp;VideoCond);<span class=\"comment\">//唤醒休眠</span></span><br><span class=\"line\">            pthread_mutex_unlock(&amp;VideoMutex);<span class=\"comment\">//解锁</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//4.数据处理</span></span><br><span class=\"line\">_LoadVideoData()&#123;</span><br><span class=\"line\">    pthread_mutex_lock(&amp;VideoMutex);<span class=\"comment\">//上锁</span></span><br><span class=\"line\">\tpthread_cond_wait(&amp;VideoCond, &amp;VideoMutex);<span class=\"comment\">//休眠</span></span><br><span class=\"line\">\tpthread_mutex_unlock(&amp;VideoMutex);<span class=\"comment\">//解锁</span></span><br><span class=\"line\">    <span class=\"comment\">//************************</span></span><br><span class=\"line\">    <span class=\"comment\">//***原始视频流数据处理***</span></span><br><span class=\"line\">    <span class=\"comment\">//************************</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"图像格式之 YUV & RGB","date":"2023-04-13T04:56:11.000Z","comments":0,"description":null,"typora-root-url":"2-YUV&RGB","_content":"\n<div align = \"center\">图像格式之 YUV & RGB</div>\n\n# 一、图像颜色空间介绍\n\n## 1.RGB\n\n采样与编码格式\n\nR、G、B分别代表red、green、blue，三原色。将他们按照不同比例叠加，可得到更多不同颜色。\n\n![](1.png)\n\n每个像素点的颜色由R、G、B三原色表示。每一个颜色通道（原色）包含2^8= 256种不同的红/绿/蓝（八位二进制），占用8bit，也就是一字节，那么一个像素点也就占用了3字节。\n\n<!--more-->\n\n图片大小计算：一张 1280 * 720 大小的图片，就占用 1280 * 720 * 3 / 1024 / 1024 = 2.63 MB 存储空间。\n\n```c\n//RGB常见的的几种格式和描述：\nRGB565 每个像素用16位表示，RGB分量各使用5位、6位、5位；\nRGB555 每个像素用16位表示，RGB分量都使用5位（剩下1位不用）；\nRGB24 每个像素用24位表示，RGB分量各使用8位；\nRGB32 每个像素用32位表示，RGB分量各使用8位（剩下8位不用）；\nARGB32 每个像素用32位表示，RGB分量各使用8位（剩下的8位用于表示Alpha(透明度)通道值）；\n```\n\n常见的RGB格式有：RGB_565、RGB_888、ARGB_8888、ARGB_4444等。但是也有列外，尤其是搞安卓的同学要特别注意，谷歌在这里给我们挖了一个坑，那就是，ARGB_8888和ARGB_4444实际上在底层对应的是 RGBA_8888和RGBA_4444，例如ARGB_8888图像，其像素数据在内存中其实是以R G B A R G B A …的顺序排布的。\n\n## 2.YUV\n\n简介：与我们熟知的RGB类似，YUV也是一种颜色编码方法；主要用于电视系统以及模拟视频领域，它将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，\n\n这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。\n\n### 1）颜色空间\n\n在YUV颜色空间中，YUV（YCbCr ）格式也包含三个分量：\n\t\tY——明亮度（Luma），也成灰阶，没有UV分量也可成像，图像是黑白的（基础信号）\n\t\tUV——色度（Chroma）：色彩+色彩饱和度（正交调制信号）\n\n每个 Y 分量可以都有自己对应的 UV 分量，也可以几个 Y 分量共用 UV 分量，这就是为何会有YUV4:4:4、YUV4:2:2、YUV4:2:0采样格式出现，用于减小图像包含的数据量大小，便于传输和存储。\n\n![](2.png)\n\n```c\n//YUV种类分为很多，可以理解是一个二维的，即空间间，和空间内，这样的表述，借鉴了h264中的帧间和帧内的思想。\n空间-间：不同空间，即描述一个像素的bit数不同，比如yuv444，yuv422，yuv411，yuv420\n空间-内：相同空间，即描述一个像素的bit数相同，但是存储方式不同，比如对于yuv420而言，又可细分为yuv420p，yuv420sp，nv21，nv12，yv12，yu12，I420\n//为什么yuv444，yuv420，yuv422，yuv411都是用的4呢？\n-->因为用到了共享的思想，这是yuv和rgb的本质区别.\nrgb是一个像素是一个家庭，家庭成员是r，g，b，但是yuv是若干像素是一个家庭，不同像素的y共享同一个u和v，这样，引入了共享的思想，虽然最小单位是一个字节，但实际上描述一个像素点的字节，不一定是字节的整数倍\n```\n\n### 2）采样格式\n\n#### YUV 444\n\nYUV三个信道的信号全采样，每个像素的三个分量信息完整（每个分量一般用8bit），因此每个像素经量化后，未经压缩，占用3字节。\n\n```c\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n//一个家庭成员是[yuv]，每个Y对应一组UV，一个YUV占24bits 3个字节；\n\n//假设四个像素为:\t[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//存放的码流为:\tY0 U0 V0 Y1 U1 V1Y2 U2 V2Y3 U3 V3\n```\n\n\n\n#### YUV 422\n\n亮度Y分量保持不变；对UV分量进行采样，数据量减小一半。\n\n```c\n[yu][yv][yu][yv]\n[yv][yu][yv][yu]\n[yu][yv][yu][yv]\n[yv][yu][yv][yu]\n//一个家庭成员是[yu] [yv]，也就是2个Y公用一个UV，一个YUV占8+4+4=16bits 2个节。\n\n//假设四个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//采样码流为：[Y0 U0 ] [Y1 V1] [Y2 U2 ] [Y3 V3]\n```\n\n隔行扫描，行1出U分量，那么下一行行2则出V分量（即UV分量按照1:1的比例进行采样），最终相邻两个Y分量共用一组UV分量。\n\n#### YUV 420\n\n亮度Y分量保持不变；对UV分量进行采样，数据量只有1/4\n\n``` c\n//吐槽:yuv420的意思似乎是在yuv422的基础上，再拿掉两个v，这样不就没有v了吗？其实yuv420的取名方式不是很高明，更确切的命名为yuv420yuv402也就是第一行只有两个u，而第二行只有两个v，如下图；\n```\n\n```c\n[yu][y][yu][y]\n[yv][y][yv][y]\n[yu][y][yu][y]\n[yv][y][yv][y]\n//一个家庭成员是[yu][y],4个Y公用一组UV，每个YUV占用8+2+2=12bits，1.5个字节；\n//\t\t\t  [yv][y]\n//假设八个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//\t\t\t   [Y5 U5 V5] [Y6 U6 V6] [Y7 U7 V7] [Y8 U8 V8]\n//采样码流为：[Y0 U0 ] [Y1 ] [Y2 U2 ] [Y3 ]\n//\t\t\t[Y5 V5] [Y6 ] [Y7 V7] [Y8 ]\n//存放的码流为:\n//\t\t\t[Y0 U0 V5] [Y1 U0 V5] [Y2 U2 V7] [Y3 U2 V7]\n//\t\t\t[Y5 U0 V5] [Y6 U0 V5] [Y7 U2 V7] [Y8 U2 V7]\n```\n\n隔行扫描，且UV分量按照2:1的比例进行采样，第一个像素保留一半U/(V)数据，相邻第二个像素U和V分量全舍弃，第三个像素采集第二次U/(V)数据，第四个像素U和V分量全舍弃，第五个像素采集第一次V/(U)，最终相邻四个Y分量共用一组UV分量，而且是按照 2*2 的小方格的形式分布。\n\n#### 图示：\n\n![](3.png)\n\n黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量。\n\t\tYUV 4:4:4采样，每一个Y对应一组UV分量。\n\t\tYUV 4:2:2采样，每两个Y共用一组UV分量。\n\t\tYUV 4:2:0采样，每四个Y共用一组UV分量，如图中的红色部分。\n\n### 3)图像大小计算\n\n假设一幅图像，像素大小为1280*720\n\nYUV 4:4:4采样，(1280 * 720 * 3) / 1024 / 1024 ≈2.64M\n\nYUV 4:2:2采样，(1280 * 720 * 2) / 1024 / 1024 ≈1.76M\n\nYUV 4:2:0采样，(1280 * 720 * 3 / 2) / 1024 / 1024 ≈1.32M\n\n### 4）存储格式\n\n#### planar\n\n平面格式：指连续存储所有像素点的Y分量，然后存储U分量，最后是V分量，3个plane。\n\n#### packed \n\n打包模式：指每个像素点的Y、U、V分量是连续交叉存储的，1个plane。\n\n#### semi-planar:\n\nY连续存储，U、V交叉存储，如NV21、NV12，即2个plane。\n\n#### 图示：\n\n| YUV444 | YUV422         | YUV420         | YUV411 |\n| ------ | -------------- | -------------- | ------ |\n|        | YU16(YUV422P)  | YU12(YUV420P)  |        |\n|        | YV16(YUV422P)  | YV12(YUV420P)  |        |\n|        | NV16(YUV422SP) | NV12(YUV420SP) |        |\n|        | NV61(YUV422SP) | NV21(YUV420SP) |        |\n|        | YUYV422        |                |        |\n|        | UYVY           |                |        |\n\n# 二、图像格式介绍\n\n## 1.RGB\n\n### 1.RGB555(高彩色)\n\n​    RGB555是一种16位的RGB格式，R、G、B分量都用5位来表示，剩下的一位不用，存储格式如下图：\n\n![](4.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为short.，那么则有：\n\nR = color & 0x7C00, (获取高字节的5个bit)\nG = color & 0x03E0, (获取中间5个bit)\nB = color & 0x001F, (获取低字节5个bit)\n```\n\n### 2.RGB565(高彩色)\n\n   RGB565同样是一种16位的RGB格式，R和B分量用5位来表示，G分量用6位标志。存储格式如下图：\n\n![](5.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为short， 那么则有：\n\nR = color & 0xF800, (获取高字节的5个bit)\nG = color & 0x07E0, (获取中间6个bit)\nB = color & 0x001F, (获取低字节5个bit)\n```\n\n### 3.RGB24(真彩色)\n\nRGB24是一种24位的RGB格式，R、G、B分量都用8位来表示，每位取值范围都为0-255。存储格式如下图：\n\n![](6.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为int， 那么则有：\n    \nR = color & 0x000000FF,\nG = color & 0x0000FF00,\nB = color & 0x00FF0000,\n```\n\n### 4.RGB32(真彩色)\n\n  RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位用作Alpha通道或者不用。Alpha通道是一个8位的灰度通道，该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域，其中白表示不透明，黑表示透明，灰表示半透明。其结构如下：\n\n![](7.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为int，那么则有:\na、低8位保留\nR = color & 0x0000FF00\nG = color & 0x00FF0000,\nB = color & 0xFF000000,\nb、低8位为ALPHA值\nR = color & 0x0000FF00,\nG = color & 0x00FF0000,\nB = color & 0xFF000000,\nA = color & 0x000000FF,\n```\n\n\n\n## 2.YUV\n\n### 1.YUV420SP\n\n#### 1.NV12 \n\nNV21图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nV U   V U   V U  V U\nV U   V U   V U  V U\n```\n\n####  2.NV21\n\nNV12图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序（NV12和NV21只是U与V的位置相反）。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nU V   U V   U V  U V\nU V   U V   U V  U V\n```\n\n```c\n//NV12: YYYYYYYY UVUV =>YUV420SP\n//NV21: YYYYYYYY VUVU =>YUV420SP\n```\n\n### 2.YUV420P\n\n#### 1.YU12\n\nYU12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nU     U     U     U\nU     U     U     U\n\nV     V     V     V\nV     V     V     V\n```\n\n#### 2.YV12\n\nYV12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序（YV12和I420只是U与V的位置相反）。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nV     V     V     V\nV     V     V     V\n\nU     U     U     U\nU     U     U     U\n```\n\n```c\n//YU12: YYYYYYYY UU VV =>YUV420P\n//YV12: YYYYYYYY VV UU =>YUV420P\n```\n\n### 3．YUYV图像格式（打包格式存储）\n\nYUYV图像格式属于 YUV颜色空间中的YUV422格式，每两个Y分量共用一组U分量和V分量，Y、U、V交叉排序。\n\n```c\n//排列方式如：\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n```\n\n\n\n# 三、RGB与YUV的格式转换\n\n图像显示器——通过RGB模型显示图像\n\n传输图像数据——通过YUV模型传输 （YUV 模型可以节省带宽）\n\n![](8.png)\n\n## 转换公式：\n\n1.小数形式, YUV  ( U∈[-0.5-0.5] ,  R，G，B∈[0,1] )\n\n```c\nY =  0.299*R + 0.587*G + 0.114*B;\nU = -0.169*R - 0.331*G + 0.5  *B ;\nV =  0.5  *R - 0.419*G - 0.081*B;\n```\n\n```c\nR = Y + 1.4075 * V;  \nG = Y - 0.3455 * U - 0.7169*V;  \nB = Y + 1.779 * U; \n```\n\n# 四：一图看RGB与YUV\n\n## RGB格式\n\n ![](9.jpg)\n\n## YUV格式\n\n![](10.jpg)\n\n## YUV存储格式\n\n![](11.jpg)\n\n## ARGB\n\n![](12.jpg)\n\n...\n\n...","source":"_posts/2-YUV&RGB.md","raw":"---\ntitle: 图像格式之 YUV & RGB\ndate: 2023-4-13 12:56:11\ncategories: 笔记\ntags: 嵌入式\ncomments: false\ndescription:\ntypora-root-url: 2-YUV&RGB\n---\n\n<div align = \"center\">图像格式之 YUV & RGB</div>\n\n# 一、图像颜色空间介绍\n\n## 1.RGB\n\n采样与编码格式\n\nR、G、B分别代表red、green、blue，三原色。将他们按照不同比例叠加，可得到更多不同颜色。\n\n![](1.png)\n\n每个像素点的颜色由R、G、B三原色表示。每一个颜色通道（原色）包含2^8= 256种不同的红/绿/蓝（八位二进制），占用8bit，也就是一字节，那么一个像素点也就占用了3字节。\n\n<!--more-->\n\n图片大小计算：一张 1280 * 720 大小的图片，就占用 1280 * 720 * 3 / 1024 / 1024 = 2.63 MB 存储空间。\n\n```c\n//RGB常见的的几种格式和描述：\nRGB565 每个像素用16位表示，RGB分量各使用5位、6位、5位；\nRGB555 每个像素用16位表示，RGB分量都使用5位（剩下1位不用）；\nRGB24 每个像素用24位表示，RGB分量各使用8位；\nRGB32 每个像素用32位表示，RGB分量各使用8位（剩下8位不用）；\nARGB32 每个像素用32位表示，RGB分量各使用8位（剩下的8位用于表示Alpha(透明度)通道值）；\n```\n\n常见的RGB格式有：RGB_565、RGB_888、ARGB_8888、ARGB_4444等。但是也有列外，尤其是搞安卓的同学要特别注意，谷歌在这里给我们挖了一个坑，那就是，ARGB_8888和ARGB_4444实际上在底层对应的是 RGBA_8888和RGBA_4444，例如ARGB_8888图像，其像素数据在内存中其实是以R G B A R G B A …的顺序排布的。\n\n## 2.YUV\n\n简介：与我们熟知的RGB类似，YUV也是一种颜色编码方法；主要用于电视系统以及模拟视频领域，它将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，\n\n这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。\n\n### 1）颜色空间\n\n在YUV颜色空间中，YUV（YCbCr ）格式也包含三个分量：\n\t\tY——明亮度（Luma），也成灰阶，没有UV分量也可成像，图像是黑白的（基础信号）\n\t\tUV——色度（Chroma）：色彩+色彩饱和度（正交调制信号）\n\n每个 Y 分量可以都有自己对应的 UV 分量，也可以几个 Y 分量共用 UV 分量，这就是为何会有YUV4:4:4、YUV4:2:2、YUV4:2:0采样格式出现，用于减小图像包含的数据量大小，便于传输和存储。\n\n![](2.png)\n\n```c\n//YUV种类分为很多，可以理解是一个二维的，即空间间，和空间内，这样的表述，借鉴了h264中的帧间和帧内的思想。\n空间-间：不同空间，即描述一个像素的bit数不同，比如yuv444，yuv422，yuv411，yuv420\n空间-内：相同空间，即描述一个像素的bit数相同，但是存储方式不同，比如对于yuv420而言，又可细分为yuv420p，yuv420sp，nv21，nv12，yv12，yu12，I420\n//为什么yuv444，yuv420，yuv422，yuv411都是用的4呢？\n-->因为用到了共享的思想，这是yuv和rgb的本质区别.\nrgb是一个像素是一个家庭，家庭成员是r，g，b，但是yuv是若干像素是一个家庭，不同像素的y共享同一个u和v，这样，引入了共享的思想，虽然最小单位是一个字节，但实际上描述一个像素点的字节，不一定是字节的整数倍\n```\n\n### 2）采样格式\n\n#### YUV 444\n\nYUV三个信道的信号全采样，每个像素的三个分量信息完整（每个分量一般用8bit），因此每个像素经量化后，未经压缩，占用3字节。\n\n```c\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n[yuv][yuv][yuv][yuv]\n//一个家庭成员是[yuv]，每个Y对应一组UV，一个YUV占24bits 3个字节；\n\n//假设四个像素为:\t[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//存放的码流为:\tY0 U0 V0 Y1 U1 V1Y2 U2 V2Y3 U3 V3\n```\n\n\n\n#### YUV 422\n\n亮度Y分量保持不变；对UV分量进行采样，数据量减小一半。\n\n```c\n[yu][yv][yu][yv]\n[yv][yu][yv][yu]\n[yu][yv][yu][yv]\n[yv][yu][yv][yu]\n//一个家庭成员是[yu] [yv]，也就是2个Y公用一个UV，一个YUV占8+4+4=16bits 2个节。\n\n//假设四个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//采样码流为：[Y0 U0 ] [Y1 V1] [Y2 U2 ] [Y3 V3]\n```\n\n隔行扫描，行1出U分量，那么下一行行2则出V分量（即UV分量按照1:1的比例进行采样），最终相邻两个Y分量共用一组UV分量。\n\n#### YUV 420\n\n亮度Y分量保持不变；对UV分量进行采样，数据量只有1/4\n\n``` c\n//吐槽:yuv420的意思似乎是在yuv422的基础上，再拿掉两个v，这样不就没有v了吗？其实yuv420的取名方式不是很高明，更确切的命名为yuv420yuv402也就是第一行只有两个u，而第二行只有两个v，如下图；\n```\n\n```c\n[yu][y][yu][y]\n[yv][y][yv][y]\n[yu][y][yu][y]\n[yv][y][yv][y]\n//一个家庭成员是[yu][y],4个Y公用一组UV，每个YUV占用8+2+2=12bits，1.5个字节；\n//\t\t\t  [yv][y]\n//假设八个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]\n//\t\t\t   [Y5 U5 V5] [Y6 U6 V6] [Y7 U7 V7] [Y8 U8 V8]\n//采样码流为：[Y0 U0 ] [Y1 ] [Y2 U2 ] [Y3 ]\n//\t\t\t[Y5 V5] [Y6 ] [Y7 V7] [Y8 ]\n//存放的码流为:\n//\t\t\t[Y0 U0 V5] [Y1 U0 V5] [Y2 U2 V7] [Y3 U2 V7]\n//\t\t\t[Y5 U0 V5] [Y6 U0 V5] [Y7 U2 V7] [Y8 U2 V7]\n```\n\n隔行扫描，且UV分量按照2:1的比例进行采样，第一个像素保留一半U/(V)数据，相邻第二个像素U和V分量全舍弃，第三个像素采集第二次U/(V)数据，第四个像素U和V分量全舍弃，第五个像素采集第一次V/(U)，最终相邻四个Y分量共用一组UV分量，而且是按照 2*2 的小方格的形式分布。\n\n#### 图示：\n\n![](3.png)\n\n黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量。\n\t\tYUV 4:4:4采样，每一个Y对应一组UV分量。\n\t\tYUV 4:2:2采样，每两个Y共用一组UV分量。\n\t\tYUV 4:2:0采样，每四个Y共用一组UV分量，如图中的红色部分。\n\n### 3)图像大小计算\n\n假设一幅图像，像素大小为1280*720\n\nYUV 4:4:4采样，(1280 * 720 * 3) / 1024 / 1024 ≈2.64M\n\nYUV 4:2:2采样，(1280 * 720 * 2) / 1024 / 1024 ≈1.76M\n\nYUV 4:2:0采样，(1280 * 720 * 3 / 2) / 1024 / 1024 ≈1.32M\n\n### 4）存储格式\n\n#### planar\n\n平面格式：指连续存储所有像素点的Y分量，然后存储U分量，最后是V分量，3个plane。\n\n#### packed \n\n打包模式：指每个像素点的Y、U、V分量是连续交叉存储的，1个plane。\n\n#### semi-planar:\n\nY连续存储，U、V交叉存储，如NV21、NV12，即2个plane。\n\n#### 图示：\n\n| YUV444 | YUV422         | YUV420         | YUV411 |\n| ------ | -------------- | -------------- | ------ |\n|        | YU16(YUV422P)  | YU12(YUV420P)  |        |\n|        | YV16(YUV422P)  | YV12(YUV420P)  |        |\n|        | NV16(YUV422SP) | NV12(YUV420SP) |        |\n|        | NV61(YUV422SP) | NV21(YUV420SP) |        |\n|        | YUYV422        |                |        |\n|        | UYVY           |                |        |\n\n# 二、图像格式介绍\n\n## 1.RGB\n\n### 1.RGB555(高彩色)\n\n​    RGB555是一种16位的RGB格式，R、G、B分量都用5位来表示，剩下的一位不用，存储格式如下图：\n\n![](4.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为short.，那么则有：\n\nR = color & 0x7C00, (获取高字节的5个bit)\nG = color & 0x03E0, (获取中间5个bit)\nB = color & 0x001F, (获取低字节5个bit)\n```\n\n### 2.RGB565(高彩色)\n\n   RGB565同样是一种16位的RGB格式，R和B分量用5位来表示，G分量用6位标志。存储格式如下图：\n\n![](5.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为short， 那么则有：\n\nR = color & 0xF800, (获取高字节的5个bit)\nG = color & 0x07E0, (获取中间6个bit)\nB = color & 0x001F, (获取低字节5个bit)\n```\n\n### 3.RGB24(真彩色)\n\nRGB24是一种24位的RGB格式，R、G、B分量都用8位来表示，每位取值范围都为0-255。存储格式如下图：\n\n![](6.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为int， 那么则有：\n    \nR = color & 0x000000FF,\nG = color & 0x0000FF00,\nB = color & 0x00FF0000,\n```\n\n### 4.RGB32(真彩色)\n\n  RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位用作Alpha通道或者不用。Alpha通道是一个8位的灰度通道，该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域，其中白表示不透明，黑表示透明，灰表示半透明。其结构如下：\n\n![](7.png)\n\n```c\n//假设计算机中存储某一个像素点的变量为color, 数据类型为int，那么则有:\na、低8位保留\nR = color & 0x0000FF00\nG = color & 0x00FF0000,\nB = color & 0xFF000000,\nb、低8位为ALPHA值\nR = color & 0x0000FF00,\nG = color & 0x00FF0000,\nB = color & 0xFF000000,\nA = color & 0x000000FF,\n```\n\n\n\n## 2.YUV\n\n### 1.YUV420SP\n\n#### 1.NV12 \n\nNV21图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nV U   V U   V U  V U\nV U   V U   V U  V U\n```\n\n####  2.NV21\n\nNV12图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序（NV12和NV21只是U与V的位置相反）。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nU V   U V   U V  U V\nU V   U V   U V  U V\n```\n\n```c\n//NV12: YYYYYYYY UVUV =>YUV420SP\n//NV21: YYYYYYYY VUVU =>YUV420SP\n```\n\n### 2.YUV420P\n\n#### 1.YU12\n\nYU12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nU     U     U     U\nU     U     U     U\n\nV     V     V     V\nV     V     V     V\n```\n\n#### 2.YV12\n\nYV12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序（YV12和I420只是U与V的位置相反）。\n\n```c\n//排列方式如：\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\nY Y   Y Y   Y Y   Y Y\n\nV     V     V     V\nV     V     V     V\n\nU     U     U     U\nU     U     U     U\n```\n\n```c\n//YU12: YYYYYYYY UU VV =>YUV420P\n//YV12: YYYYYYYY VV UU =>YUV420P\n```\n\n### 3．YUYV图像格式（打包格式存储）\n\nYUYV图像格式属于 YUV颜色空间中的YUV422格式，每两个Y分量共用一组U分量和V分量，Y、U、V交叉排序。\n\n```c\n//排列方式如：\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n\nY U Y V   Y U Y V   Y U Y V   Y U Y V\n```\n\n\n\n# 三、RGB与YUV的格式转换\n\n图像显示器——通过RGB模型显示图像\n\n传输图像数据——通过YUV模型传输 （YUV 模型可以节省带宽）\n\n![](8.png)\n\n## 转换公式：\n\n1.小数形式, YUV  ( U∈[-0.5-0.5] ,  R，G，B∈[0,1] )\n\n```c\nY =  0.299*R + 0.587*G + 0.114*B;\nU = -0.169*R - 0.331*G + 0.5  *B ;\nV =  0.5  *R - 0.419*G - 0.081*B;\n```\n\n```c\nR = Y + 1.4075 * V;  \nG = Y - 0.3455 * U - 0.7169*V;  \nB = Y + 1.779 * U; \n```\n\n# 四：一图看RGB与YUV\n\n## RGB格式\n\n ![](9.jpg)\n\n## YUV格式\n\n![](10.jpg)\n\n## YUV存储格式\n\n![](11.jpg)\n\n## ARGB\n\n![](12.jpg)\n\n...\n\n...","slug":"2-YUV&RGB","published":1,"updated":"2023-04-13T04:59:18.240Z","_id":"clgeng1v90000vwobec6993p8","layout":"post","photos":[],"link":"","content":"<div align = \"center\">图像格式之 YUV & RGB</div>\n\n<h1 id=\"一、图像颜色空间介绍\"><a href=\"#一、图像颜色空间介绍\" class=\"headerlink\" title=\"一、图像颜色空间介绍\"></a>一、图像颜色空间介绍</h1><h2 id=\"1-RGB\"><a href=\"#1-RGB\" class=\"headerlink\" title=\"1.RGB\"></a>1.RGB</h2><p>采样与编码格式</p>\n<p>R、G、B分别代表red、green、blue，三原色。将他们按照不同比例叠加，可得到更多不同颜色。</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/1.png\"></p>\n<p>每个像素点的颜色由R、G、B三原色表示。每一个颜色通道（原色）包含2^8&#x3D; 256种不同的红&#x2F;绿&#x2F;蓝（八位二进制），占用8bit，也就是一字节，那么一个像素点也就占用了3字节。</p>\n<span id=\"more\"></span>\n\n<p>图片大小计算：一张 1280 * 720 大小的图片，就占用 1280 * 720 * 3 &#x2F; 1024 &#x2F; 1024 &#x3D; 2.63 MB 存储空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RGB常见的的几种格式和描述：</span></span><br><span class=\"line\">RGB565 每个像素用<span class=\"number\">16</span>位表示，RGB分量各使用<span class=\"number\">5</span>位、<span class=\"number\">6</span>位、<span class=\"number\">5</span>位；</span><br><span class=\"line\">RGB555 每个像素用<span class=\"number\">16</span>位表示，RGB分量都使用<span class=\"number\">5</span>位（剩下<span class=\"number\">1</span>位不用）；</span><br><span class=\"line\">RGB24 每个像素用<span class=\"number\">24</span>位表示，RGB分量各使用<span class=\"number\">8</span>位；</span><br><span class=\"line\">RGB32 每个像素用<span class=\"number\">32</span>位表示，RGB分量各使用<span class=\"number\">8</span>位（剩下<span class=\"number\">8</span>位不用）；</span><br><span class=\"line\">ARGB32 每个像素用<span class=\"number\">32</span>位表示，RGB分量各使用<span class=\"number\">8</span>位（剩下的<span class=\"number\">8</span>位用于表示Alpha(透明度)通道值）；</span><br></pre></td></tr></table></figure>\n\n<p>常见的RGB格式有：RGB_565、RGB_888、ARGB_8888、ARGB_4444等。但是也有列外，尤其是搞安卓的同学要特别注意，谷歌在这里给我们挖了一个坑，那就是，ARGB_8888和ARGB_4444实际上在底层对应的是 RGBA_8888和RGBA_4444，例如ARGB_8888图像，其像素数据在内存中其实是以R G B A R G B A …的顺序排布的。</p>\n<h2 id=\"2-YUV\"><a href=\"#2-YUV\" class=\"headerlink\" title=\"2.YUV\"></a>2.YUV</h2><p>简介：与我们熟知的RGB类似，YUV也是一种颜色编码方法；主要用于电视系统以及模拟视频领域，它将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，</p>\n<p>这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p>\n<h3 id=\"1）颜色空间\"><a href=\"#1）颜色空间\" class=\"headerlink\" title=\"1）颜色空间\"></a>1）颜色空间</h3><p>在YUV颜色空间中，YUV（YCbCr ）格式也包含三个分量：<br>        Y——明亮度（Luma），也成灰阶，没有UV分量也可成像，图像是黑白的（基础信号）<br>        UV——色度（Chroma）：色彩+色彩饱和度（正交调制信号）</p>\n<p>每个 Y 分量可以都有自己对应的 UV 分量，也可以几个 Y 分量共用 UV 分量，这就是为何会有YUV4:4:4、YUV4:2:2、YUV4:2:0采样格式出现，用于减小图像包含的数据量大小，便于传输和存储。</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/2.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//YUV种类分为很多，可以理解是一个二维的，即空间间，和空间内，这样的表述，借鉴了h264中的帧间和帧内的思想。</span></span><br><span class=\"line\">空间-间：不同空间，即描述一个像素的bit数不同，比如yuv444，yuv422，yuv411，yuv420</span><br><span class=\"line\">空间-内：相同空间，即描述一个像素的bit数相同，但是存储方式不同，比如对于yuv420而言，又可细分为yuv420p，yuv420sp，nv21，nv12，yv12，yu12，I420</span><br><span class=\"line\"><span class=\"comment\">//为什么yuv444，yuv420，yuv422，yuv411都是用的4呢？</span></span><br><span class=\"line\">--&gt;因为用到了共享的思想，这是yuv和rgb的本质区别.</span><br><span class=\"line\">rgb是一个像素是一个家庭，家庭成员是r，g，b，但是yuv是若干像素是一个家庭，不同像素的y共享同一个u和v，这样，引入了共享的思想，虽然最小单位是一个字节，但实际上描述一个像素点的字节，不一定是字节的整数倍</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）采样格式\"><a href=\"#2）采样格式\" class=\"headerlink\" title=\"2）采样格式\"></a>2）采样格式</h3><h4 id=\"YUV-444\"><a href=\"#YUV-444\" class=\"headerlink\" title=\"YUV 444\"></a>YUV 444</h4><p>YUV三个信道的信号全采样，每个像素的三个分量信息完整（每个分量一般用8bit），因此每个像素经量化后，未经压缩，占用3字节。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yuv]，每个Y对应一组UV，一个YUV占24bits 3个字节；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设四个像素为:\t[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//存放的码流为:\tY0 U0 V0 Y1 U1 V1Y2 U2 V2Y3 U3 V3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"YUV-422\"><a href=\"#YUV-422\" class=\"headerlink\" title=\"YUV 422\"></a>YUV 422</h4><p>亮度Y分量保持不变；对UV分量进行采样，数据量减小一半。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yu][yv][yu][yv]</span><br><span class=\"line\">[yv][yu][yv][yu]</span><br><span class=\"line\">[yu][yv][yu][yv]</span><br><span class=\"line\">[yv][yu][yv][yu]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yu] [yv]，也就是2个Y公用一个UV，一个YUV占8+4+4=16bits 2个节。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设四个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//采样码流为：[Y0 U0 ] [Y1 V1] [Y2 U2 ] [Y3 V3]</span></span><br></pre></td></tr></table></figure>\n\n<p>隔行扫描，行1出U分量，那么下一行行2则出V分量（即UV分量按照1:1的比例进行采样），最终相邻两个Y分量共用一组UV分量。</p>\n<h4 id=\"YUV-420\"><a href=\"#YUV-420\" class=\"headerlink\" title=\"YUV 420\"></a>YUV 420</h4><p>亮度Y分量保持不变；对UV分量进行采样，数据量只有1&#x2F;4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//吐槽:yuv420的意思似乎是在yuv422的基础上，再拿掉两个v，这样不就没有v了吗？其实yuv420的取名方式不是很高明，更确切的命名为yuv420yuv402也就是第一行只有两个u，而第二行只有两个v，如下图；</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yu][y][yu][y]</span><br><span class=\"line\">[yv][y][yv][y]</span><br><span class=\"line\">[yu][y][yu][y]</span><br><span class=\"line\">[yv][y][yv][y]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yu][y],4个Y公用一组UV，每个YUV占用8+2+2=12bits，1.5个字节；</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t  [yv][y]</span></span><br><span class=\"line\"><span class=\"comment\">//假设八个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t   [Y5 U5 V5] [Y6 U6 V6] [Y7 U7 V7] [Y8 U8 V8]</span></span><br><span class=\"line\"><span class=\"comment\">//采样码流为：[Y0 U0 ] [Y1 ] [Y2 U2 ] [Y3 ]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y5 V5] [Y6 ] [Y7 V7] [Y8 ]</span></span><br><span class=\"line\"><span class=\"comment\">//存放的码流为:</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y0 U0 V5] [Y1 U0 V5] [Y2 U2 V7] [Y3 U2 V7]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y5 U0 V5] [Y6 U0 V5] [Y7 U2 V7] [Y8 U2 V7]</span></span><br></pre></td></tr></table></figure>\n\n<p>隔行扫描，且UV分量按照2:1的比例进行采样，第一个像素保留一半U&#x2F;(V)数据，相邻第二个像素U和V分量全舍弃，第三个像素采集第二次U&#x2F;(V)数据，第四个像素U和V分量全舍弃，第五个像素采集第一次V&#x2F;(U)，最终相邻四个Y分量共用一组UV分量，而且是按照 2*2 的小方格的形式分布。</p>\n<h4 id=\"图示：\"><a href=\"#图示：\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><p><img src=\"/2023/04/13/2-YUV&RGB/3.png\"></p>\n<p>黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量。<br>        YUV 4:4:4采样，每一个Y对应一组UV分量。<br>        YUV 4:2:2采样，每两个Y共用一组UV分量。<br>        YUV 4:2:0采样，每四个Y共用一组UV分量，如图中的红色部分。</p>\n<h3 id=\"3-图像大小计算\"><a href=\"#3-图像大小计算\" class=\"headerlink\" title=\"3)图像大小计算\"></a>3)图像大小计算</h3><p>假设一幅图像，像素大小为1280*720</p>\n<p>YUV 4:4:4采样，(1280 * 720 * 3) &#x2F; 1024 &#x2F; 1024 ≈2.64M</p>\n<p>YUV 4:2:2采样，(1280 * 720 * 2) &#x2F; 1024 &#x2F; 1024 ≈1.76M</p>\n<p>YUV 4:2:0采样，(1280 * 720 * 3 &#x2F; 2) &#x2F; 1024 &#x2F; 1024 ≈1.32M</p>\n<h3 id=\"4）存储格式\"><a href=\"#4）存储格式\" class=\"headerlink\" title=\"4）存储格式\"></a>4）存储格式</h3><h4 id=\"planar\"><a href=\"#planar\" class=\"headerlink\" title=\"planar\"></a>planar</h4><p>平面格式：指连续存储所有像素点的Y分量，然后存储U分量，最后是V分量，3个plane。</p>\n<h4 id=\"packed\"><a href=\"#packed\" class=\"headerlink\" title=\"packed\"></a>packed</h4><p>打包模式：指每个像素点的Y、U、V分量是连续交叉存储的，1个plane。</p>\n<h4 id=\"semi-planar\"><a href=\"#semi-planar\" class=\"headerlink\" title=\"semi-planar:\"></a>semi-planar:</h4><p>Y连续存储，U、V交叉存储，如NV21、NV12，即2个plane。</p>\n<h4 id=\"图示：-1\"><a href=\"#图示：-1\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><table>\n<thead>\n<tr>\n<th>YUV444</th>\n<th>YUV422</th>\n<th>YUV420</th>\n<th>YUV411</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>YU16(YUV422P)</td>\n<td>YU12(YUV420P)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>YV16(YUV422P)</td>\n<td>YV12(YUV420P)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>NV16(YUV422SP)</td>\n<td>NV12(YUV420SP)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>NV61(YUV422SP)</td>\n<td>NV21(YUV420SP)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>YUYV422</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>UYVY</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、图像格式介绍\"><a href=\"#二、图像格式介绍\" class=\"headerlink\" title=\"二、图像格式介绍\"></a>二、图像格式介绍</h1><h2 id=\"1-RGB-1\"><a href=\"#1-RGB-1\" class=\"headerlink\" title=\"1.RGB\"></a>1.RGB</h2><h3 id=\"1-RGB555-高彩色\"><a href=\"#1-RGB555-高彩色\" class=\"headerlink\" title=\"1.RGB555(高彩色)\"></a>1.RGB555(高彩色)</h3><p>​    RGB555是一种16位的RGB格式，R、G、B分量都用5位来表示，剩下的一位不用，存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/4.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为short.，那么则有：</span></span><br><span class=\"line\"></span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x7C00</span>, (获取高字节的<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x03E0</span>, (获取中间<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x001F</span>, (获取低字节<span class=\"number\">5</span>个bit)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-RGB565-高彩色\"><a href=\"#2-RGB565-高彩色\" class=\"headerlink\" title=\"2.RGB565(高彩色)\"></a>2.RGB565(高彩色)</h3><p>   RGB565同样是一种16位的RGB格式，R和B分量用5位来表示，G分量用6位标志。存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/5.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为short， 那么则有：</span></span><br><span class=\"line\"></span><br><span class=\"line\">R = color &amp; <span class=\"number\">0xF800</span>, (获取高字节的<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x07E0</span>, (获取中间<span class=\"number\">6</span>个bit)</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x001F</span>, (获取低字节<span class=\"number\">5</span>个bit)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-RGB24-真彩色\"><a href=\"#3-RGB24-真彩色\" class=\"headerlink\" title=\"3.RGB24(真彩色)\"></a>3.RGB24(真彩色)</h3><p>RGB24是一种24位的RGB格式，R、G、B分量都用8位来表示，每位取值范围都为0-255。存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/6.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为int， 那么则有：</span></span><br><span class=\"line\">    </span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x000000FF</span>,</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x0000FF00</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-RGB32-真彩色\"><a href=\"#4-RGB32-真彩色\" class=\"headerlink\" title=\"4.RGB32(真彩色)\"></a>4.RGB32(真彩色)</h3><p>  RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位用作Alpha通道或者不用。Alpha通道是一个8位的灰度通道，该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域，其中白表示不透明，黑表示透明，灰表示半透明。其结构如下：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/7.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为int，那么则有:</span></span><br><span class=\"line\">a、低<span class=\"number\">8</span>位保留</span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x0000FF00</span></span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0xFF000000</span>,</span><br><span class=\"line\">b、低<span class=\"number\">8</span>位为ALPHA值</span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x0000FF00</span>,</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0xFF000000</span>,</span><br><span class=\"line\">A = color &amp; <span class=\"number\">0x000000FF</span>,</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-YUV-1\"><a href=\"#2-YUV-1\" class=\"headerlink\" title=\"2.YUV\"></a>2.YUV</h2><h3 id=\"1-YUV420SP\"><a href=\"#1-YUV420SP\" class=\"headerlink\" title=\"1.YUV420SP\"></a>1.YUV420SP</h3><h4 id=\"1-NV12\"><a href=\"#1-NV12\" class=\"headerlink\" title=\"1.NV12\"></a>1.NV12</h4><p>NV21图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">V U   V U   V U  V U</span><br><span class=\"line\">V U   V U   V U  V U</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-NV21\"><a href=\"#2-NV21\" class=\"headerlink\" title=\"2.NV21\"></a>2.NV21</h4><p>NV12图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序（NV12和NV21只是U与V的位置相反）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">U V   U V   U V  U V</span><br><span class=\"line\">U V   U V   U V  U V</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//NV12: YYYYYYYY UVUV =&gt;YUV420SP</span></span><br><span class=\"line\"><span class=\"comment\">//NV21: YYYYYYYY VUVU =&gt;YUV420SP</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-YUV420P\"><a href=\"#2-YUV420P\" class=\"headerlink\" title=\"2.YUV420P\"></a>2.YUV420P</h3><h4 id=\"1-YU12\"><a href=\"#1-YU12\" class=\"headerlink\" title=\"1.YU12\"></a>1.YU12</h4><p>YU12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\"></span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\">V     V     V     V</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-YV12\"><a href=\"#2-YV12\" class=\"headerlink\" title=\"2.YV12\"></a>2.YV12</h4><p>YV12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序（YV12和I420只是U与V的位置相反）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\"></span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\">U     U     U     U</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//YU12: YYYYYYYY UU VV =&gt;YUV420P</span></span><br><span class=\"line\"><span class=\"comment\">//YV12: YYYYYYYY VV UU =&gt;YUV420P</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3．YUYV图像格式（打包格式存储）\"><a href=\"#3．YUYV图像格式（打包格式存储）\" class=\"headerlink\" title=\"3．YUYV图像格式（打包格式存储）\"></a>3．YUYV图像格式（打包格式存储）</h3><p>YUYV图像格式属于 YUV颜色空间中的YUV422格式，每两个Y分量共用一组U分量和V分量，Y、U、V交叉排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"三、RGB与YUV的格式转换\"><a href=\"#三、RGB与YUV的格式转换\" class=\"headerlink\" title=\"三、RGB与YUV的格式转换\"></a>三、RGB与YUV的格式转换</h1><p>图像显示器——通过RGB模型显示图像</p>\n<p>传输图像数据——通过YUV模型传输 （YUV 模型可以节省带宽）</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/8.png\"></p>\n<h2 id=\"转换公式：\"><a href=\"#转换公式：\" class=\"headerlink\" title=\"转换公式：\"></a>转换公式：</h2><p>1.小数形式, YUV  ( U∈[-0.5-0.5] ,  R，G，B∈[0,1] )</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y =  <span class=\"number\">0.299</span>*R + <span class=\"number\">0.587</span>*G + <span class=\"number\">0.114</span>*B;</span><br><span class=\"line\">U = <span class=\"number\">-0.169</span>*R - <span class=\"number\">0.331</span>*G + <span class=\"number\">0.5</span>  *B ;</span><br><span class=\"line\">V =  <span class=\"number\">0.5</span>  *R - <span class=\"number\">0.419</span>*G - <span class=\"number\">0.081</span>*B;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R = Y + <span class=\"number\">1.4075</span> * V;  </span><br><span class=\"line\">G = Y - <span class=\"number\">0.3455</span> * U - <span class=\"number\">0.7169</span>*V;  </span><br><span class=\"line\">B = Y + <span class=\"number\">1.779</span> * U; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：一图看RGB与YUV\"><a href=\"#四：一图看RGB与YUV\" class=\"headerlink\" title=\"四：一图看RGB与YUV\"></a>四：一图看RGB与YUV</h1><h2 id=\"RGB格式\"><a href=\"#RGB格式\" class=\"headerlink\" title=\"RGB格式\"></a>RGB格式</h2><p> <img src=\"/2023/04/13/2-YUV&RGB/9.jpg\"></p>\n<h2 id=\"YUV格式\"><a href=\"#YUV格式\" class=\"headerlink\" title=\"YUV格式\"></a>YUV格式</h2><p><img src=\"/2023/04/13/2-YUV&RGB/10.jpg\"></p>\n<h2 id=\"YUV存储格式\"><a href=\"#YUV存储格式\" class=\"headerlink\" title=\"YUV存储格式\"></a>YUV存储格式</h2><p><img src=\"/2023/04/13/2-YUV&RGB/11.jpg\"></p>\n<h2 id=\"ARGB\"><a href=\"#ARGB\" class=\"headerlink\" title=\"ARGB\"></a>ARGB</h2><p><img src=\"/2023/04/13/2-YUV&RGB/12.jpg\"></p>\n<p>…</p>\n<p>…</p>\n","site":{"data":{"style":""}},"length":5340,"excerpt":"<div align = \"center\">图像格式之 YUV & RGB</div>\n\n<h1 id=\"一、图像颜色空间介绍\"><a href=\"#一、图像颜色空间介绍\" class=\"headerlink\" title=\"一、图像颜色空间介绍\"></a>一、图像颜色空间介绍</h1><h2 id=\"1-RGB\"><a href=\"#1-RGB\" class=\"headerlink\" title=\"1.RGB\"></a>1.RGB</h2><p>采样与编码格式</p>\n<p>R、G、B分别代表red、green、blue，三原色。将他们按照不同比例叠加，可得到更多不同颜色。</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/1.png\"></p>\n<p>每个像素点的颜色由R、G、B三原色表示。每一个颜色通道（原色）包含2^8&#x3D; 256种不同的红&#x2F;绿&#x2F;蓝（八位二进制），占用8bit，也就是一字节，那么一个像素点也就占用了3字节。</p>","more":"<p>图片大小计算：一张 1280 * 720 大小的图片，就占用 1280 * 720 * 3 &#x2F; 1024 &#x2F; 1024 &#x3D; 2.63 MB 存储空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RGB常见的的几种格式和描述：</span></span><br><span class=\"line\">RGB565 每个像素用<span class=\"number\">16</span>位表示，RGB分量各使用<span class=\"number\">5</span>位、<span class=\"number\">6</span>位、<span class=\"number\">5</span>位；</span><br><span class=\"line\">RGB555 每个像素用<span class=\"number\">16</span>位表示，RGB分量都使用<span class=\"number\">5</span>位（剩下<span class=\"number\">1</span>位不用）；</span><br><span class=\"line\">RGB24 每个像素用<span class=\"number\">24</span>位表示，RGB分量各使用<span class=\"number\">8</span>位；</span><br><span class=\"line\">RGB32 每个像素用<span class=\"number\">32</span>位表示，RGB分量各使用<span class=\"number\">8</span>位（剩下<span class=\"number\">8</span>位不用）；</span><br><span class=\"line\">ARGB32 每个像素用<span class=\"number\">32</span>位表示，RGB分量各使用<span class=\"number\">8</span>位（剩下的<span class=\"number\">8</span>位用于表示Alpha(透明度)通道值）；</span><br></pre></td></tr></table></figure>\n\n<p>常见的RGB格式有：RGB_565、RGB_888、ARGB_8888、ARGB_4444等。但是也有列外，尤其是搞安卓的同学要特别注意，谷歌在这里给我们挖了一个坑，那就是，ARGB_8888和ARGB_4444实际上在底层对应的是 RGBA_8888和RGBA_4444，例如ARGB_8888图像，其像素数据在内存中其实是以R G B A R G B A …的顺序排布的。</p>\n<h2 id=\"2-YUV\"><a href=\"#2-YUV\" class=\"headerlink\" title=\"2.YUV\"></a>2.YUV</h2><p>简介：与我们熟知的RGB类似，YUV也是一种颜色编码方法；主要用于电视系统以及模拟视频领域，它将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，</p>\n<p>这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p>\n<h3 id=\"1）颜色空间\"><a href=\"#1）颜色空间\" class=\"headerlink\" title=\"1）颜色空间\"></a>1）颜色空间</h3><p>在YUV颜色空间中，YUV（YCbCr ）格式也包含三个分量：<br>        Y——明亮度（Luma），也成灰阶，没有UV分量也可成像，图像是黑白的（基础信号）<br>        UV——色度（Chroma）：色彩+色彩饱和度（正交调制信号）</p>\n<p>每个 Y 分量可以都有自己对应的 UV 分量，也可以几个 Y 分量共用 UV 分量，这就是为何会有YUV4:4:4、YUV4:2:2、YUV4:2:0采样格式出现，用于减小图像包含的数据量大小，便于传输和存储。</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/2.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//YUV种类分为很多，可以理解是一个二维的，即空间间，和空间内，这样的表述，借鉴了h264中的帧间和帧内的思想。</span></span><br><span class=\"line\">空间-间：不同空间，即描述一个像素的bit数不同，比如yuv444，yuv422，yuv411，yuv420</span><br><span class=\"line\">空间-内：相同空间，即描述一个像素的bit数相同，但是存储方式不同，比如对于yuv420而言，又可细分为yuv420p，yuv420sp，nv21，nv12，yv12，yu12，I420</span><br><span class=\"line\"><span class=\"comment\">//为什么yuv444，yuv420，yuv422，yuv411都是用的4呢？</span></span><br><span class=\"line\">--&gt;因为用到了共享的思想，这是yuv和rgb的本质区别.</span><br><span class=\"line\">rgb是一个像素是一个家庭，家庭成员是r，g，b，但是yuv是若干像素是一个家庭，不同像素的y共享同一个u和v，这样，引入了共享的思想，虽然最小单位是一个字节，但实际上描述一个像素点的字节，不一定是字节的整数倍</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）采样格式\"><a href=\"#2）采样格式\" class=\"headerlink\" title=\"2）采样格式\"></a>2）采样格式</h3><h4 id=\"YUV-444\"><a href=\"#YUV-444\" class=\"headerlink\" title=\"YUV 444\"></a>YUV 444</h4><p>YUV三个信道的信号全采样，每个像素的三个分量信息完整（每个分量一般用8bit），因此每个像素经量化后，未经压缩，占用3字节。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\">[yuv][yuv][yuv][yuv]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yuv]，每个Y对应一组UV，一个YUV占24bits 3个字节；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设四个像素为:\t[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//存放的码流为:\tY0 U0 V0 Y1 U1 V1Y2 U2 V2Y3 U3 V3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"YUV-422\"><a href=\"#YUV-422\" class=\"headerlink\" title=\"YUV 422\"></a>YUV 422</h4><p>亮度Y分量保持不变；对UV分量进行采样，数据量减小一半。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yu][yv][yu][yv]</span><br><span class=\"line\">[yv][yu][yv][yu]</span><br><span class=\"line\">[yu][yv][yu][yv]</span><br><span class=\"line\">[yv][yu][yv][yu]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yu] [yv]，也就是2个Y公用一个UV，一个YUV占8+4+4=16bits 2个节。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设四个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//采样码流为：[Y0 U0 ] [Y1 V1] [Y2 U2 ] [Y3 V3]</span></span><br></pre></td></tr></table></figure>\n\n<p>隔行扫描，行1出U分量，那么下一行行2则出V分量（即UV分量按照1:1的比例进行采样），最终相邻两个Y分量共用一组UV分量。</p>\n<h4 id=\"YUV-420\"><a href=\"#YUV-420\" class=\"headerlink\" title=\"YUV 420\"></a>YUV 420</h4><p>亮度Y分量保持不变；对UV分量进行采样，数据量只有1&#x2F;4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//吐槽:yuv420的意思似乎是在yuv422的基础上，再拿掉两个v，这样不就没有v了吗？其实yuv420的取名方式不是很高明，更确切的命名为yuv420yuv402也就是第一行只有两个u，而第二行只有两个v，如下图；</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[yu][y][yu][y]</span><br><span class=\"line\">[yv][y][yv][y]</span><br><span class=\"line\">[yu][y][yu][y]</span><br><span class=\"line\">[yv][y][yv][y]</span><br><span class=\"line\"><span class=\"comment\">//一个家庭成员是[yu][y],4个Y公用一组UV，每个YUV占用8+2+2=12bits，1.5个字节；</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t  [yv][y]</span></span><br><span class=\"line\"><span class=\"comment\">//假设八个像素为:[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t   [Y5 U5 V5] [Y6 U6 V6] [Y7 U7 V7] [Y8 U8 V8]</span></span><br><span class=\"line\"><span class=\"comment\">//采样码流为：[Y0 U0 ] [Y1 ] [Y2 U2 ] [Y3 ]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y5 V5] [Y6 ] [Y7 V7] [Y8 ]</span></span><br><span class=\"line\"><span class=\"comment\">//存放的码流为:</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y0 U0 V5] [Y1 U0 V5] [Y2 U2 V7] [Y3 U2 V7]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t[Y5 U0 V5] [Y6 U0 V5] [Y7 U2 V7] [Y8 U2 V7]</span></span><br></pre></td></tr></table></figure>\n\n<p>隔行扫描，且UV分量按照2:1的比例进行采样，第一个像素保留一半U&#x2F;(V)数据，相邻第二个像素U和V分量全舍弃，第三个像素采集第二次U&#x2F;(V)数据，第四个像素U和V分量全舍弃，第五个像素采集第一次V&#x2F;(U)，最终相邻四个Y分量共用一组UV分量，而且是按照 2*2 的小方格的形式分布。</p>\n<h4 id=\"图示：\"><a href=\"#图示：\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><p><img src=\"/2023/04/13/2-YUV&RGB/3.png\"></p>\n<p>黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量。<br>        YUV 4:4:4采样，每一个Y对应一组UV分量。<br>        YUV 4:2:2采样，每两个Y共用一组UV分量。<br>        YUV 4:2:0采样，每四个Y共用一组UV分量，如图中的红色部分。</p>\n<h3 id=\"3-图像大小计算\"><a href=\"#3-图像大小计算\" class=\"headerlink\" title=\"3)图像大小计算\"></a>3)图像大小计算</h3><p>假设一幅图像，像素大小为1280*720</p>\n<p>YUV 4:4:4采样，(1280 * 720 * 3) &#x2F; 1024 &#x2F; 1024 ≈2.64M</p>\n<p>YUV 4:2:2采样，(1280 * 720 * 2) &#x2F; 1024 &#x2F; 1024 ≈1.76M</p>\n<p>YUV 4:2:0采样，(1280 * 720 * 3 &#x2F; 2) &#x2F; 1024 &#x2F; 1024 ≈1.32M</p>\n<h3 id=\"4）存储格式\"><a href=\"#4）存储格式\" class=\"headerlink\" title=\"4）存储格式\"></a>4）存储格式</h3><h4 id=\"planar\"><a href=\"#planar\" class=\"headerlink\" title=\"planar\"></a>planar</h4><p>平面格式：指连续存储所有像素点的Y分量，然后存储U分量，最后是V分量，3个plane。</p>\n<h4 id=\"packed\"><a href=\"#packed\" class=\"headerlink\" title=\"packed\"></a>packed</h4><p>打包模式：指每个像素点的Y、U、V分量是连续交叉存储的，1个plane。</p>\n<h4 id=\"semi-planar\"><a href=\"#semi-planar\" class=\"headerlink\" title=\"semi-planar:\"></a>semi-planar:</h4><p>Y连续存储，U、V交叉存储，如NV21、NV12，即2个plane。</p>\n<h4 id=\"图示：-1\"><a href=\"#图示：-1\" class=\"headerlink\" title=\"图示：\"></a>图示：</h4><table>\n<thead>\n<tr>\n<th>YUV444</th>\n<th>YUV422</th>\n<th>YUV420</th>\n<th>YUV411</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>YU16(YUV422P)</td>\n<td>YU12(YUV420P)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>YV16(YUV422P)</td>\n<td>YV12(YUV420P)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>NV16(YUV422SP)</td>\n<td>NV12(YUV420SP)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>NV61(YUV422SP)</td>\n<td>NV21(YUV420SP)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>YUYV422</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>UYVY</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、图像格式介绍\"><a href=\"#二、图像格式介绍\" class=\"headerlink\" title=\"二、图像格式介绍\"></a>二、图像格式介绍</h1><h2 id=\"1-RGB-1\"><a href=\"#1-RGB-1\" class=\"headerlink\" title=\"1.RGB\"></a>1.RGB</h2><h3 id=\"1-RGB555-高彩色\"><a href=\"#1-RGB555-高彩色\" class=\"headerlink\" title=\"1.RGB555(高彩色)\"></a>1.RGB555(高彩色)</h3><p>​    RGB555是一种16位的RGB格式，R、G、B分量都用5位来表示，剩下的一位不用，存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/4.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为short.，那么则有：</span></span><br><span class=\"line\"></span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x7C00</span>, (获取高字节的<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x03E0</span>, (获取中间<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x001F</span>, (获取低字节<span class=\"number\">5</span>个bit)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-RGB565-高彩色\"><a href=\"#2-RGB565-高彩色\" class=\"headerlink\" title=\"2.RGB565(高彩色)\"></a>2.RGB565(高彩色)</h3><p>   RGB565同样是一种16位的RGB格式，R和B分量用5位来表示，G分量用6位标志。存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/5.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为short， 那么则有：</span></span><br><span class=\"line\"></span><br><span class=\"line\">R = color &amp; <span class=\"number\">0xF800</span>, (获取高字节的<span class=\"number\">5</span>个bit)</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x07E0</span>, (获取中间<span class=\"number\">6</span>个bit)</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x001F</span>, (获取低字节<span class=\"number\">5</span>个bit)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-RGB24-真彩色\"><a href=\"#3-RGB24-真彩色\" class=\"headerlink\" title=\"3.RGB24(真彩色)\"></a>3.RGB24(真彩色)</h3><p>RGB24是一种24位的RGB格式，R、G、B分量都用8位来表示，每位取值范围都为0-255。存储格式如下图：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/6.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为int， 那么则有：</span></span><br><span class=\"line\">    </span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x000000FF</span>,</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x0000FF00</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-RGB32-真彩色\"><a href=\"#4-RGB32-真彩色\" class=\"headerlink\" title=\"4.RGB32(真彩色)\"></a>4.RGB32(真彩色)</h3><p>  RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位用作Alpha通道或者不用。Alpha通道是一个8位的灰度通道，该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域，其中白表示不透明，黑表示透明，灰表示半透明。其结构如下：</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/7.png\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设计算机中存储某一个像素点的变量为color, 数据类型为int，那么则有:</span></span><br><span class=\"line\">a、低<span class=\"number\">8</span>位保留</span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x0000FF00</span></span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0xFF000000</span>,</span><br><span class=\"line\">b、低<span class=\"number\">8</span>位为ALPHA值</span><br><span class=\"line\">R = color &amp; <span class=\"number\">0x0000FF00</span>,</span><br><span class=\"line\">G = color &amp; <span class=\"number\">0x00FF0000</span>,</span><br><span class=\"line\">B = color &amp; <span class=\"number\">0xFF000000</span>,</span><br><span class=\"line\">A = color &amp; <span class=\"number\">0x000000FF</span>,</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-YUV-1\"><a href=\"#2-YUV-1\" class=\"headerlink\" title=\"2.YUV\"></a>2.YUV</h2><h3 id=\"1-YUV420SP\"><a href=\"#1-YUV420SP\" class=\"headerlink\" title=\"1.YUV420SP\"></a>1.YUV420SP</h3><h4 id=\"1-NV12\"><a href=\"#1-NV12\" class=\"headerlink\" title=\"1.NV12\"></a>1.NV12</h4><p>NV21图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">V U   V U   V U  V U</span><br><span class=\"line\">V U   V U   V U  V U</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-NV21\"><a href=\"#2-NV21\" class=\"headerlink\" title=\"2.NV21\"></a>2.NV21</h4><p>NV12图像格式属于 YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序（NV12和NV21只是U与V的位置相反）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">U V   U V   U V  U V</span><br><span class=\"line\">U V   U V   U V  U V</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//NV12: YYYYYYYY UVUV =&gt;YUV420SP</span></span><br><span class=\"line\"><span class=\"comment\">//NV21: YYYYYYYY VUVU =&gt;YUV420SP</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-YUV420P\"><a href=\"#2-YUV420P\" class=\"headerlink\" title=\"2.YUV420P\"></a>2.YUV420P</h3><h4 id=\"1-YU12\"><a href=\"#1-YU12\" class=\"headerlink\" title=\"1.YU12\"></a>1.YU12</h4><p>YU12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\"></span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\">V     V     V     V</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-YV12\"><a href=\"#2-YV12\" class=\"headerlink\" title=\"2.YV12\"></a>2.YV12</h4><p>YV12图像格式属于 YUV颜色空间中的YUV420P格式，每四个Y分量共用一组U分量和V分量，Y、U、V各自连续排序（YV12和I420只是U与V的位置相反）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\">Y Y   Y Y   Y Y   Y Y</span><br><span class=\"line\"></span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\">V     V     V     V</span><br><span class=\"line\"></span><br><span class=\"line\">U     U     U     U</span><br><span class=\"line\">U     U     U     U</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//YU12: YYYYYYYY UU VV =&gt;YUV420P</span></span><br><span class=\"line\"><span class=\"comment\">//YV12: YYYYYYYY VV UU =&gt;YUV420P</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3．YUYV图像格式（打包格式存储）\"><a href=\"#3．YUYV图像格式（打包格式存储）\" class=\"headerlink\" title=\"3．YUYV图像格式（打包格式存储）\"></a>3．YUYV图像格式（打包格式存储）</h3><p>YUYV图像格式属于 YUV颜色空间中的YUV422格式，每两个Y分量共用一组U分量和V分量，Y、U、V交叉排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排列方式如：</span></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br><span class=\"line\"></span><br><span class=\"line\">Y U Y V   Y U Y V   Y U Y V   Y U Y V</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"三、RGB与YUV的格式转换\"><a href=\"#三、RGB与YUV的格式转换\" class=\"headerlink\" title=\"三、RGB与YUV的格式转换\"></a>三、RGB与YUV的格式转换</h1><p>图像显示器——通过RGB模型显示图像</p>\n<p>传输图像数据——通过YUV模型传输 （YUV 模型可以节省带宽）</p>\n<p><img src=\"/2023/04/13/2-YUV&RGB/8.png\"></p>\n<h2 id=\"转换公式：\"><a href=\"#转换公式：\" class=\"headerlink\" title=\"转换公式：\"></a>转换公式：</h2><p>1.小数形式, YUV  ( U∈[-0.5-0.5] ,  R，G，B∈[0,1] )</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y =  <span class=\"number\">0.299</span>*R + <span class=\"number\">0.587</span>*G + <span class=\"number\">0.114</span>*B;</span><br><span class=\"line\">U = <span class=\"number\">-0.169</span>*R - <span class=\"number\">0.331</span>*G + <span class=\"number\">0.5</span>  *B ;</span><br><span class=\"line\">V =  <span class=\"number\">0.5</span>  *R - <span class=\"number\">0.419</span>*G - <span class=\"number\">0.081</span>*B;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R = Y + <span class=\"number\">1.4075</span> * V;  </span><br><span class=\"line\">G = Y - <span class=\"number\">0.3455</span> * U - <span class=\"number\">0.7169</span>*V;  </span><br><span class=\"line\">B = Y + <span class=\"number\">1.779</span> * U; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：一图看RGB与YUV\"><a href=\"#四：一图看RGB与YUV\" class=\"headerlink\" title=\"四：一图看RGB与YUV\"></a>四：一图看RGB与YUV</h1><h2 id=\"RGB格式\"><a href=\"#RGB格式\" class=\"headerlink\" title=\"RGB格式\"></a>RGB格式</h2><p> <img src=\"/2023/04/13/2-YUV&RGB/9.jpg\"></p>\n<h2 id=\"YUV格式\"><a href=\"#YUV格式\" class=\"headerlink\" title=\"YUV格式\"></a>YUV格式</h2><p><img src=\"/2023/04/13/2-YUV&RGB/10.jpg\"></p>\n<h2 id=\"YUV存储格式\"><a href=\"#YUV存储格式\" class=\"headerlink\" title=\"YUV存储格式\"></a>YUV存储格式</h2><p><img src=\"/2023/04/13/2-YUV&RGB/11.jpg\"></p>\n<h2 id=\"ARGB\"><a href=\"#ARGB\" class=\"headerlink\" title=\"ARGB\"></a>ARGB</h2><p><img src=\"/2023/04/13/2-YUV&RGB/12.jpg\"></p>\n<p>…</p>\n<p>…</p>"},{"title":"G2D","date":"2023-04-14T10:08:11.000Z","comments":0,"description":null,"typora-root-url":"G2D","_content":"\n<div align = \"center\">G2D</div>\n## 1.什么是跟g2d？\n\n​\tG2D也就是我们说的2d加速。很久以前，绘图工作全部是由我们伟大而神圣的 CPU 来完成的，那时候的显卡，就是真正意义上用来“显示东西的卡”。它的工作就是把 CPU 处理好的数据“搬”到显示器上来。那时候 CPU 的工作可真是辛苦。现在好了，CPU 越来越快，可是做的工作却越来越少了。先来说说图形加速的几个阶段。2D 图像加速，Windows 加速 和 3D 图像加速。\n\n<!--more-->\n\n​\t2D 加速，是早就有的产物了。它的作用是用 显示芯片 来代替 CPU，整块整块的移动显存里的数据。比如，你要移动一个窗口，在没有 2D 加速的时代，CPU 所作的工作：1、找到窗口在显存中的地址，2、把一行数据拷贝到目的地址，3、重复 2 直到拷贝完所有的行。完成。这样一来，当窗口很大的时候，CPU 要处理的数据量就会成倍的增长，导致窗口的移动比蜗牛爬还慢…. 想体验一下吗？好，进入设备管理器，把你的显卡驱动删掉，然后重起…. 好好享受啊！呵呵 \n\n​\t有了 2D 加速呢，CPU 所做的事，减轻了很多，不过还是要指导 显示芯片 来干这搬运工的活。CPU 的工作：1、找到窗口在显存中的地址，2、给 显卡发送 “拷贝这一行到目的地”的命令。3、重复 2 直到拷贝完所有的行。初看起来好像和没有加速以前差不多，可是第 2 步就是关键所在哦。 \n\n​\t现在让我们把第二步分解来看：没有 2D 加速：1、读 32 Bit 数据(入门篇里的哦！)，把这 32 Bit 数据写入目的地。2、重复 1 直到一行所有的像素被处理完。而有了 2D 加速后的工作只有：1、发送命令让显卡去拷贝这一行。这样看来，2D 加速确实能很大程度的释放 CPU 的负担。所以大家现在随便提起一个窗口移动一下，很平滑不是吗？显卡负责了窗口的移动。\n\n\n\n## 2.支持的功能有哪些?\n\n​\t转码，缩放，位块传输......(不同芯片支持的具体功能不尽相同)\n\n![](1.png)\n\n```\n支持图层大小最高至2048*2048像素点\n支持输入/输出格式：YUV422（sp、planner）、YUV420（sp、planer）......\n支持水平和垂直翻转，顺时针 0/90/180/270度 旋转\n```\n\n\n\n## 3.函数接口命令\n\n```cpp\n//fd:G2D设备文件标识符，cmd:命令码，arg:对应结构体指针\nint ioctl(int * fd, int cmd, unsigned long arg);\n//常见cmd功能、与结构体对应关系\nG2D_CMD_BITBLT_H //实现单幅图的缩放，格式转换。实现foreground带缩放的ROP2处理 >> g2d_blt_h\nG2D_CMD_BITBLT //实现两个图层的运算，如：源拷贝到目标；源旋转放入目标；源和目标做alpha blending /colorkey 后拷到目标。>> g2d_blt \nG2D_CMD_STRETCHBLT\t//实现两个图层的运算，如：源缩放到目标大小后拷贝到目标；源缩放到目标大小后旋转放入目标；源缩放到目标大小后和目标做做alpha blending /colorkey 后拷到目标。>> g2d_stretchblt\nG2D_CMD_MEM_REQUEST //为测试程序提供内存申请接口 >>arg为申请buffer的size\nG2D_CMD_MEM_GETADR //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\nG2D_CMD_MEM_RELEALSE //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\n```\n\n​\t注意：G2D使用时，传入的地址只能是物理地址，不能是应用空间申请的虚拟地址。所以测试时，需要alloc_mem的方式申请一片内存空间，得到其物理地址，才能进行G2D调用。\n\n## 4.数据结构\n\n### g2d_blt_h\n\n```cpp\ntypedef struct {\n    g2d_blt_flags_h\tflag_h;//blt操作flag标志\n    g2d_image_enh\tsrc_image_h;//源图像信息\n    g2d_image_enh\tdst_image_h;//目标图像信息\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n} g2d_blt_h;\n```\n\n### g2d_blt\n\n```cpp\ntypedef struct {\n    g2d_blt_flags\tflag;//blt操作flag标志\n    g2d_image\t\tsrc_image;//源图像信息\n    g2d_rect\t\tsrc_rect;//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    g2d_image\t\tdst_image;//目标图像信息\n    __s32\t\t\tdst_x;//目标矩阵左上角x\n    __s32\t\t\tdst_y;//目标矩阵左上角y\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n}g2d_blt;\n```\n\n### g2d_stretchblt\n\n```cpp\ntypedef struct {\n    g2d_blt_flags\tflag;//blt操作flag标志\n    g2d_image\t\tsrc_image;//源图像信息\n    g2d_rect\t\tsrc_rect;//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    g2d_image\t\tdst_image;//目标图像信息\n\tg2d_rect\t\tdst_rect;//目标矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n}g2d_stretchblt;\n```\n\n### g2d_image\n\n主要用于描述image属性信息\n\n```cpp\ntypedef struct {\n    __u32\taddr[3];//图像帧的基地址，对于UV combined ，addr[0,1]有效，planner类型addr[0,1,2]有效，其他addr[0]有效\n    __u32\tw;//图像帧的宽\n    __u32\th;//图像帧的高\n    g2d_data_fmt\tformat;//图像帧buffer的像素格式\n    g2d_pixel_seq\tpixel_seq;//图像帧buffer的像素序列\n}g2d_image;\n```\n\n### g2d_image_enh\n\n​\t主要描述图片的宽高、存放地址、是否做Clip处理，是否为预乘等\n\n```cpp\ntypedef struct {\n    int\t\tbbuff;\n    g2d_fmt_enh\tformat;//图格式\n    __u32\tladdr[3];//起始低位地址\n    __u32\thaddr[3];//起始高位地址\n    __u32\twidth;//图宽\n    __u32\theight;//图高\n    __u32\talign[3];\n    g2d_rect\t\tclip_rect;//ROI矩形\n    __u32\tgamut;//图的色域\n    int\t\tbpremul;//是否为预乘\n    __u8\talpha;//面alpha值\n    g2d_alpha_mode_enh\tmode;//alpha模式设置\n}g2d_image_enh;\n```\n\n​\tladdr以及haddr是针对32为以及64位处理器的一个适配，32位处理器只需要填充laddr，64位则需要填充laddr和haddr\n\n### g2d_blt_flags\n\n```cpp\ntypedef enum{\n    G2D_BLT_NONE\t\t\t= 0x00000000,//纯拷贝\n    G2D_BLT_PIXEL_ALPHA\t\t= 0x00000001,//点alpha标志\n    G2D_BLT_PLANE_ALPHA \t= 0x00000002,//面alpha标志\n    G2D_BLT_MULTI_ALPHA \t=0x00000004,//混合alpha标志\n    G2D_BLT_SRC_COLORKEY \t= 0x00000008,//源colorkey标志\n    G2D_BLT_DST_COLORKEY \t= 0x00000010,//目标colorkey标志\n    G2D_BLT_FLIP_HORIZONTAL = 0x00000020,//水平翻转\n    G2D_BLT_VERTICAL\t\t= 0x00000040,//垂直翻转\n    G2D_BLT_ROTATE90\t\t= 0x00000080,//逆时针旋转90度\n    G2D_BLT_ROTATE180 \t\t= 0x00000100,//逆时针旋转180度\n    G2D_BLT_ROTATE270 \t\t= 0x00000200,//逆时针旋转270度\n    G2D_BLT_MIRROR45 \t\t= 0x00000400,//镜像45度\n    G2D_BLT_MIRROR135\t\t = 0x00000800,//镜像135度\n}g2d_blt_flags\n```\n\n### g2d_blt_flags_h\n\n```\n\n```\n\n\n\n## 5.举例\n\n1.可参考虚拟机中.../sdk_demo/G2dDemo。\n\n2.也可参考全志G2D开发指南\n\n### 1.旋转，缩放与格式转换\n\n```cpp\ng2d_blt_h blit;//实例化一个对象，进行参数填充\n\nblit.flag_h = G2D_BLT_NONE_0;//修改此参数实现旋转。如：G2D_ROT_90旋转90度\nblit.src_image_h.fd = src_buffd;//源图像\n//blit.src_image_h.format = G2D_FORMAT_YUV420_PLANAR;\nblit.src_image_h.format = G2D_FORMAT_ARGB8888;\nblit.src_image_h.mode = G2D_GLOBAL_ALPHA;\nblit.src_image_h.clip_rect.x = 0;\nblit.src_image_h.clip_rect.y = 0;\nblit.src_image_h.clip_rect.w = 320;\nblit.src_image_h.clip_rect.h = 480;\n blit.src_image_h.width = 320;\nblit.src_image_h.height = 480;\nblit.src_image_h.alpha = 0xff;\nblit.dst_image_h.fd = dst_buffd;//目标图像\n//blit.dst_image_h.format = G2D_FORMAT_YUV420_PLANAR;\t\nblit.dst_image_h.format = G2D_FORMAT_ARGB8888;//修改此格式可改变输出格式\nblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;\nblit.dst_image_h.clip_rect.x = 0;\nblit.dst_image_h.clip_rect.y = 0;\nblit.dst_image_h.clip_rect.w = 320;//修改此参数可实现缩放\nblit.dst_image_h.clip_rect.h = 480;//修改此参数可实现缩放\nblit.dst_image_h.alpha = 0xff; \nblit.dst_image_h.width = 320;//与上保持一致\nblit.dst_image_h.height = 480;//与上保持一致\n\nif(ioctl(g2d_fd,  G2D_CMD_BITBLT_H ,(unsigned long)(&blit)) < 0)\n{\n\tprintf(\"[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n\",__LINE__, __FILE__,__FUNCTION__);\n\treturn -1;\n}\n```\n\n### 2.输入输出\n\n```cpp\ng2d_blt blit;\n//设置BITBLT flag标志位\nblit.color = 0xff;\nblit.alpha = 0xff;\nblit.flag = G2D_BLT_NONE;//纯拷贝\n//设置源image和rect\nblit.src_image.addr[0] = memin;\nblit.src_image.w = 800;\nblit.src_image.h = 480;\nblit.src_image.format = G2D_FMT_RGBA8888;\t\nblit.src_image.pixel_seq = G2D_SEQ_NORMAL;\nblit.src_rect.x = 0;\nblit.src_rect.y = 0;\nblit.src_rect.w = 480;\nblit.src_rect.h = 272;\n//设置目标image和rect\nblit.dst_image.addr[0] = memout;\nblit.dst_image.w = 800;\nblit.dst_image.h = 480;\nblit.dst_image.format = G2D_FMT_RGBA8888;\nblit.dst_image.pixel_seq = G2D_SEQ_NORMAL;\nblit.dst_x = 0;\nblit.dst_y = 0;\n\nif(ioctl(g2d_fd, G2D_CMD_BITBLT, &blit_para) < 0)\n{\n\tprint(\"G2D_CMD_BITBLT failure!\\n\");\n\treturn -1;\n}\n```\n\n### 3.缩放\n\n```cpp\ng2d_stretchblt scale;\n\tint retval = -1;\n\n\tscale.flag = G2D_BLT_NONE;\n\tscale.src_image.addr[0] = (unsigned long)psrc;\n\t//scale.src_image.addr[1] = (unsigned long)psrc + src_w * src_h;\n\tscale.src_image.w = src_w;\n\tscale.src_image.h = src_h;\n\t//scale.src_image.format = G2D_FMT_PYUV420UVC;\n\tscale.src_image.format = G2D_FMT_XRGB8888;\n\tscale.src_image.pixel_seq = G2D_SEQ_NORMAL;\n\tscale.src_rect.x = src_crop_x;\n\tscale.src_rect.y = src_crop_y;\n\tscale.src_rect.w = src_crop_w;\n\tscale.src_rect.h = src_crop_h;\n\tscale.dst_image.addr[0] = (unsigned long)pdst;\n\t//scale.dst_image.addr[1] = (unsigned long)pdst + dst_w * dst_h;\n\tscale.dst_image.w = dst_w;\n\tscale.dst_image.h = dst_h;\n\t//scale.dst_image.format = G2D_FMT_PYUV420UVC;\t\n\tscale.dst_image.format = G2D_FMT_XRGB8888;\n\tscale.dst_image.pixel_seq = G2D_SEQ_NORMAL;\n\tscale.dst_rect.x = dst_crop_x;\n\tscale.dst_rect.y = dst_crop_y;\n\tscale.dst_rect.w = dst_crop_w;\n\tscale.dst_rect.h = dst_crop_h;\n\tscale.color = 0xff;\n\tscale.alpha = 0xff;\t\n\t\n\tif(ioctl(g2d_fd,  G2D_CMD_STRETCHBLT ,(unsigned long)(&scale)) < 0)\n\t{\n\t\tprintf(\"[%d][%s][%s]G2D_CMD_STRETCHBLT failure!\\n\",\n\t\t\t__LINE__, __FILE__,__FUNCTION__);\n\t\treturn -1;\n\t}\n```\n\n## 6.应用层申请内核地址的办法\n\n### 1.G2D命令码\n\n```cpp\nG2D_CMD_MEM_REQUEST //为测试程序提供内存申请接口 >>arg为申请buffer的size\nG2D_CMD_MEM_GETADR //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\nG2D_CMD_MEM_RELEALSE //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\n```\n\n### 2.alloc_mem\n\n```c\n//如：****alloc_buffer->phy = 0xfa200000,alloc_buffer->vir = 0x7f71081000\n```\n\n参考：\n\n```cpp\n#include \"sunxiMemInterface.h\"\n#include \"G2dApi.h\"\n\nVTint32 VTG2D_ClipByFd(VTint32 src_buffd, VTint32 dst_buffd,VTint32 dst_x,VTint32 dst_y)\n{\n\tg2d_blt_h blit;\n\n\tblit.flag_h = G2D_ROT_0;//G2D_BLT_NONE_H\n\tblit.src_image_h.fd = src_buffd;\n\tblit.src_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;//NV12\n\tblit.src_image_h.mode = G2D_GLOBAL_ALPHA;\n\tblit.src_image_h.clip_rect.x = 0;\n\tblit.src_image_h.clip_rect.y = 0;\n\tblit.src_image_h.clip_rect.w = 1280;\n\tblit.src_image_h.clip_rect.h = 720;\n\tblit.src_image_h.width = 1280;\n\tblit.src_image_h.height = 720;\n\tblit.src_image_h.alpha = 0xff; \n\n\tblit.src_image_h.fd = dst_buffd;\n\tblit.dst_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;\t\n\tblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;\n\tblit.dst_image_h.clip_rect.x = dst_x;\n\tblit.dst_image_h.clip_rect.y = dst_y;\n\tblit.dst_image_h.clip_rect.w = 1280;\n\tblit.dst_image_h.clip_rect.h = 720;\n\tblit.dst_image_h.width = 3840;\n\tblit.dst_image_h.height = 1440;\n\tblit.dst_image_h.alpha = 0xff; \n\n\tif(ioctl(g2d_fd,  G2D_CMD_BITBLT_H ,(unsigned long)(&blit)) < 0)\n\t{\n\t\tprintf(\"[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n\",\n\t\t\t__LINE__, __FILE__,__FUNCTION__);\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\nint allocPicMem(paramStruct_t*pops,int size)\n{\n    int iRet = 0;\n\n    iRet = allocOpen(MEM_TYPE_CDX_NEW, pops, NULL);\n    if (iRet < 0) {\n        printf(\"ion_alloc_open failed\\n\");\n        return iRet;\n    }\n    pops->size =size;\n    iRet = allocAlloc(MEM_TYPE_CDX_NEW, pops, NULL);\n    if(iRet < 0) {\n        printf(\"allocAlloc failed\\n\");\n        return iRet;\n    }\n\n    return 0;\n}\nint freePicMem(paramStruct_t*pops)\n{\n\tint iRet = 0;\n\tallocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n\n    return 0;\n}\nint ReadPicFileContent(char *pPicPath,paramStruct_t*pops,int size)\n{\n    allocPicMem(pops,size);\n\n    FILE *fpff = fopen(pPicPath, \"rb\");\n    if(NULL == fpff) {\n        fpff = fopen(pPicPath, \"rb\");\n        if(NULL == fpff) {\n            printf(\"fopen %s ERR \\n\", pPicPath);\n            allocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n            return -1;\n        } else {\n            printf(\"fopen %s OK \\n\", pPicPath);\n            fread((void *)pops->vir, 1, size, fpff);\n            fclose(fpff);\n        }\n    } else {\n        printf(\"fopen %s OK \\n\", pPicPath);\n        fread((void *)pops->vir, 1, size, fpff);\n        fclose(fpff);\n    }\n\tflushCache(MEM_TYPE_CDX_NEW,pops, NULL);\n\n    return 0;\n}\nint WritePicFileContent(char *pPicPath,paramStruct_t*pops,int size)\n{\n    int iRet = 0;\n\tprintf(\"WritePicFileContent size=%d \\n\",size);\n\tflushCache(MEM_TYPE_CDX_NEW,pops, NULL);\n\n    FILE *fpff = fopen(pPicPath, \"wb\");\n    if(NULL == fpff) {\n        fpff = fopen(pPicPath, \"wb\");\n        if(NULL == fpff) {\n            printf(\"fopen %s ERR \\n\", pPicPath);\n            allocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n            return -1;\n        } else {\n            printf(\"fopen %s OK \\n\", pPicPath);\n            fwrite((void *)pops->vir, 1, size, fpff);\n            fclose(fpff);\n        }\n    } else {\n        printf(\"fopen %s OK \\n\", pPicPath);\n        fwrite((void *)pops->vir, 1, size, fpff);\n        fclose(fpff);\n    }\n    return 0;\n}\nint VT_G2D_6in1compose(int iSubWidth,int iSubHeight,int iWidth,int iHeight)\n{\n\tparamStruct_t m_DispMemOps;\n\tparamStruct_t m_DispMemOps0;\n\tparamStruct_t m_DispMemOps1;\n\tparamStruct_t m_DispMemOps2;\n\tparamStruct_t m_DispMemOps3;\n\tparamStruct_t m_DispMemOps4;\n\tparamStruct_t m_DispMemOps5;\n\tchar *pcompPicPath0=\"cvideo.yuv\";\n\tchar *pPicPath0=\"Video[0]_picture0.yuv\";\n\tchar *pPicPath1=\"Video[1]_picture0.yuv\";\n\tchar *pPicPath2=\"Video[2]_picture0.yuv\";\n\tchar *pPicPath3=\"Video[3]_picture0.yuv\";\n\tchar *pPicPath4=\"Video[4]_picture0.yuv\";\n\tchar *pPicPath5=\"Video[5]_picture0.yuv\";\n\n\t\tReadPicFileContent(pPicPath0,&m_DispMemOps0,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath1,&m_DispMemOps1,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath2,&m_DispMemOps2,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath3,&m_DispMemOps3,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath4,&m_DispMemOps4,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath5,&m_DispMemOps5,iSubWidth*iSubHeight*3/2);\n\n\t\tallocPicMem(&m_DispMemOps,iWidth*iHeight*3/2);\n\t\tint outfd = m_DispMemOps.ion_buffer.fd_data.aw_fd;\n\t\tint infd[6];\n\t\tinfd[0] = m_DispMemOps0.ion_buffer.fd_data.aw_fd;\n\t\tinfd[1] = m_DispMemOps1.ion_buffer.fd_data.aw_fd;\n\t\tinfd[2] = m_DispMemOps2.ion_buffer.fd_data.aw_fd;\n\t\tinfd[3] = m_DispMemOps3.ion_buffer.fd_data.aw_fd;\n\t\tinfd[4] = m_DispMemOps4.ion_buffer.fd_data.aw_fd;\n\t\tinfd[5] = m_DispMemOps5.ion_buffer.fd_data.aw_fd;\n\t\tint ret = -1;\n\t\tret  = VTG2D_ClipByFd(infd[0],outfd,0,0);\n\t\tg2dClipByFd();\n\t\tret |= VTG2D_ClipByFd(infd[1],outfd,iSubWidth,0);\n\t\tret |= VTG2D_ClipByFd(infd[2],outfd,iSubWidth*2,0);\n\t\tret |= VTG2D_ClipByFd(infd[3],outfd,0,iSubHeight);\n\t\tret |= VTG2D_ClipByFd(infd[4],outfd,iSubWidth,iSubHeight);\n\t\tret |= VTG2D_ClipByFd(infd[5],outfd,iSubWidth*2,iSubHeight);\n\t\tWritePicFileContent(pcompPicPath0,&m_DispMemOps,iWidth*iHeight*3/2);\n\t\tfreePicMem(&m_DispMemOps);\n\t\tfreePicMem(&m_DispMemOps0);\n\t\tfreePicMem(&m_DispMemOps1);\n\t\tfreePicMem(&m_DispMemOps2);\n\t\tfreePicMem(&m_DispMemOps3);\n\t\tfreePicMem(&m_DispMemOps4);\n\t\tfreePicMem(&m_DispMemOps5);\n\treturn 1;\n}\n```\n\n注意：T5中不能进行缩放和格式转换。而且要求目标图像和源图像的分辨率必须相同。","source":"_posts/G2D.md","raw":"---\ntitle: G2D\ndate: 2023-4-14 18:08:11\ncategories: 笔记\ntags: 嵌入式\ncomments: false\ndescription:\ntypora-root-url: G2D\n---\n\n<div align = \"center\">G2D</div>\n## 1.什么是跟g2d？\n\n​\tG2D也就是我们说的2d加速。很久以前，绘图工作全部是由我们伟大而神圣的 CPU 来完成的，那时候的显卡，就是真正意义上用来“显示东西的卡”。它的工作就是把 CPU 处理好的数据“搬”到显示器上来。那时候 CPU 的工作可真是辛苦。现在好了，CPU 越来越快，可是做的工作却越来越少了。先来说说图形加速的几个阶段。2D 图像加速，Windows 加速 和 3D 图像加速。\n\n<!--more-->\n\n​\t2D 加速，是早就有的产物了。它的作用是用 显示芯片 来代替 CPU，整块整块的移动显存里的数据。比如，你要移动一个窗口，在没有 2D 加速的时代，CPU 所作的工作：1、找到窗口在显存中的地址，2、把一行数据拷贝到目的地址，3、重复 2 直到拷贝完所有的行。完成。这样一来，当窗口很大的时候，CPU 要处理的数据量就会成倍的增长，导致窗口的移动比蜗牛爬还慢…. 想体验一下吗？好，进入设备管理器，把你的显卡驱动删掉，然后重起…. 好好享受啊！呵呵 \n\n​\t有了 2D 加速呢，CPU 所做的事，减轻了很多，不过还是要指导 显示芯片 来干这搬运工的活。CPU 的工作：1、找到窗口在显存中的地址，2、给 显卡发送 “拷贝这一行到目的地”的命令。3、重复 2 直到拷贝完所有的行。初看起来好像和没有加速以前差不多，可是第 2 步就是关键所在哦。 \n\n​\t现在让我们把第二步分解来看：没有 2D 加速：1、读 32 Bit 数据(入门篇里的哦！)，把这 32 Bit 数据写入目的地。2、重复 1 直到一行所有的像素被处理完。而有了 2D 加速后的工作只有：1、发送命令让显卡去拷贝这一行。这样看来，2D 加速确实能很大程度的释放 CPU 的负担。所以大家现在随便提起一个窗口移动一下，很平滑不是吗？显卡负责了窗口的移动。\n\n\n\n## 2.支持的功能有哪些?\n\n​\t转码，缩放，位块传输......(不同芯片支持的具体功能不尽相同)\n\n![](1.png)\n\n```\n支持图层大小最高至2048*2048像素点\n支持输入/输出格式：YUV422（sp、planner）、YUV420（sp、planer）......\n支持水平和垂直翻转，顺时针 0/90/180/270度 旋转\n```\n\n\n\n## 3.函数接口命令\n\n```cpp\n//fd:G2D设备文件标识符，cmd:命令码，arg:对应结构体指针\nint ioctl(int * fd, int cmd, unsigned long arg);\n//常见cmd功能、与结构体对应关系\nG2D_CMD_BITBLT_H //实现单幅图的缩放，格式转换。实现foreground带缩放的ROP2处理 >> g2d_blt_h\nG2D_CMD_BITBLT //实现两个图层的运算，如：源拷贝到目标；源旋转放入目标；源和目标做alpha blending /colorkey 后拷到目标。>> g2d_blt \nG2D_CMD_STRETCHBLT\t//实现两个图层的运算，如：源缩放到目标大小后拷贝到目标；源缩放到目标大小后旋转放入目标；源缩放到目标大小后和目标做做alpha blending /colorkey 后拷到目标。>> g2d_stretchblt\nG2D_CMD_MEM_REQUEST //为测试程序提供内存申请接口 >>arg为申请buffer的size\nG2D_CMD_MEM_GETADR //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\nG2D_CMD_MEM_RELEALSE //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\n```\n\n​\t注意：G2D使用时，传入的地址只能是物理地址，不能是应用空间申请的虚拟地址。所以测试时，需要alloc_mem的方式申请一片内存空间，得到其物理地址，才能进行G2D调用。\n\n## 4.数据结构\n\n### g2d_blt_h\n\n```cpp\ntypedef struct {\n    g2d_blt_flags_h\tflag_h;//blt操作flag标志\n    g2d_image_enh\tsrc_image_h;//源图像信息\n    g2d_image_enh\tdst_image_h;//目标图像信息\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n} g2d_blt_h;\n```\n\n### g2d_blt\n\n```cpp\ntypedef struct {\n    g2d_blt_flags\tflag;//blt操作flag标志\n    g2d_image\t\tsrc_image;//源图像信息\n    g2d_rect\t\tsrc_rect;//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    g2d_image\t\tdst_image;//目标图像信息\n    __s32\t\t\tdst_x;//目标矩阵左上角x\n    __s32\t\t\tdst_y;//目标矩阵左上角y\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n}g2d_blt;\n```\n\n### g2d_stretchblt\n\n```cpp\ntypedef struct {\n    g2d_blt_flags\tflag;//blt操作flag标志\n    g2d_image\t\tsrc_image;//源图像信息\n    g2d_rect\t\tsrc_rect;//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    g2d_image\t\tdst_image;//目标图像信息\n\tg2d_rect\t\tdst_rect;//目标矩形信息，x/y/w/h-左上角x/左上角y/宽/高\n    __u32\t\t\tcolor;//colorkey颜色\n    __u32\t\t\talpha;//面alpha值\n}g2d_stretchblt;\n```\n\n### g2d_image\n\n主要用于描述image属性信息\n\n```cpp\ntypedef struct {\n    __u32\taddr[3];//图像帧的基地址，对于UV combined ，addr[0,1]有效，planner类型addr[0,1,2]有效，其他addr[0]有效\n    __u32\tw;//图像帧的宽\n    __u32\th;//图像帧的高\n    g2d_data_fmt\tformat;//图像帧buffer的像素格式\n    g2d_pixel_seq\tpixel_seq;//图像帧buffer的像素序列\n}g2d_image;\n```\n\n### g2d_image_enh\n\n​\t主要描述图片的宽高、存放地址、是否做Clip处理，是否为预乘等\n\n```cpp\ntypedef struct {\n    int\t\tbbuff;\n    g2d_fmt_enh\tformat;//图格式\n    __u32\tladdr[3];//起始低位地址\n    __u32\thaddr[3];//起始高位地址\n    __u32\twidth;//图宽\n    __u32\theight;//图高\n    __u32\talign[3];\n    g2d_rect\t\tclip_rect;//ROI矩形\n    __u32\tgamut;//图的色域\n    int\t\tbpremul;//是否为预乘\n    __u8\talpha;//面alpha值\n    g2d_alpha_mode_enh\tmode;//alpha模式设置\n}g2d_image_enh;\n```\n\n​\tladdr以及haddr是针对32为以及64位处理器的一个适配，32位处理器只需要填充laddr，64位则需要填充laddr和haddr\n\n### g2d_blt_flags\n\n```cpp\ntypedef enum{\n    G2D_BLT_NONE\t\t\t= 0x00000000,//纯拷贝\n    G2D_BLT_PIXEL_ALPHA\t\t= 0x00000001,//点alpha标志\n    G2D_BLT_PLANE_ALPHA \t= 0x00000002,//面alpha标志\n    G2D_BLT_MULTI_ALPHA \t=0x00000004,//混合alpha标志\n    G2D_BLT_SRC_COLORKEY \t= 0x00000008,//源colorkey标志\n    G2D_BLT_DST_COLORKEY \t= 0x00000010,//目标colorkey标志\n    G2D_BLT_FLIP_HORIZONTAL = 0x00000020,//水平翻转\n    G2D_BLT_VERTICAL\t\t= 0x00000040,//垂直翻转\n    G2D_BLT_ROTATE90\t\t= 0x00000080,//逆时针旋转90度\n    G2D_BLT_ROTATE180 \t\t= 0x00000100,//逆时针旋转180度\n    G2D_BLT_ROTATE270 \t\t= 0x00000200,//逆时针旋转270度\n    G2D_BLT_MIRROR45 \t\t= 0x00000400,//镜像45度\n    G2D_BLT_MIRROR135\t\t = 0x00000800,//镜像135度\n}g2d_blt_flags\n```\n\n### g2d_blt_flags_h\n\n```\n\n```\n\n\n\n## 5.举例\n\n1.可参考虚拟机中.../sdk_demo/G2dDemo。\n\n2.也可参考全志G2D开发指南\n\n### 1.旋转，缩放与格式转换\n\n```cpp\ng2d_blt_h blit;//实例化一个对象，进行参数填充\n\nblit.flag_h = G2D_BLT_NONE_0;//修改此参数实现旋转。如：G2D_ROT_90旋转90度\nblit.src_image_h.fd = src_buffd;//源图像\n//blit.src_image_h.format = G2D_FORMAT_YUV420_PLANAR;\nblit.src_image_h.format = G2D_FORMAT_ARGB8888;\nblit.src_image_h.mode = G2D_GLOBAL_ALPHA;\nblit.src_image_h.clip_rect.x = 0;\nblit.src_image_h.clip_rect.y = 0;\nblit.src_image_h.clip_rect.w = 320;\nblit.src_image_h.clip_rect.h = 480;\n blit.src_image_h.width = 320;\nblit.src_image_h.height = 480;\nblit.src_image_h.alpha = 0xff;\nblit.dst_image_h.fd = dst_buffd;//目标图像\n//blit.dst_image_h.format = G2D_FORMAT_YUV420_PLANAR;\t\nblit.dst_image_h.format = G2D_FORMAT_ARGB8888;//修改此格式可改变输出格式\nblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;\nblit.dst_image_h.clip_rect.x = 0;\nblit.dst_image_h.clip_rect.y = 0;\nblit.dst_image_h.clip_rect.w = 320;//修改此参数可实现缩放\nblit.dst_image_h.clip_rect.h = 480;//修改此参数可实现缩放\nblit.dst_image_h.alpha = 0xff; \nblit.dst_image_h.width = 320;//与上保持一致\nblit.dst_image_h.height = 480;//与上保持一致\n\nif(ioctl(g2d_fd,  G2D_CMD_BITBLT_H ,(unsigned long)(&blit)) < 0)\n{\n\tprintf(\"[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n\",__LINE__, __FILE__,__FUNCTION__);\n\treturn -1;\n}\n```\n\n### 2.输入输出\n\n```cpp\ng2d_blt blit;\n//设置BITBLT flag标志位\nblit.color = 0xff;\nblit.alpha = 0xff;\nblit.flag = G2D_BLT_NONE;//纯拷贝\n//设置源image和rect\nblit.src_image.addr[0] = memin;\nblit.src_image.w = 800;\nblit.src_image.h = 480;\nblit.src_image.format = G2D_FMT_RGBA8888;\t\nblit.src_image.pixel_seq = G2D_SEQ_NORMAL;\nblit.src_rect.x = 0;\nblit.src_rect.y = 0;\nblit.src_rect.w = 480;\nblit.src_rect.h = 272;\n//设置目标image和rect\nblit.dst_image.addr[0] = memout;\nblit.dst_image.w = 800;\nblit.dst_image.h = 480;\nblit.dst_image.format = G2D_FMT_RGBA8888;\nblit.dst_image.pixel_seq = G2D_SEQ_NORMAL;\nblit.dst_x = 0;\nblit.dst_y = 0;\n\nif(ioctl(g2d_fd, G2D_CMD_BITBLT, &blit_para) < 0)\n{\n\tprint(\"G2D_CMD_BITBLT failure!\\n\");\n\treturn -1;\n}\n```\n\n### 3.缩放\n\n```cpp\ng2d_stretchblt scale;\n\tint retval = -1;\n\n\tscale.flag = G2D_BLT_NONE;\n\tscale.src_image.addr[0] = (unsigned long)psrc;\n\t//scale.src_image.addr[1] = (unsigned long)psrc + src_w * src_h;\n\tscale.src_image.w = src_w;\n\tscale.src_image.h = src_h;\n\t//scale.src_image.format = G2D_FMT_PYUV420UVC;\n\tscale.src_image.format = G2D_FMT_XRGB8888;\n\tscale.src_image.pixel_seq = G2D_SEQ_NORMAL;\n\tscale.src_rect.x = src_crop_x;\n\tscale.src_rect.y = src_crop_y;\n\tscale.src_rect.w = src_crop_w;\n\tscale.src_rect.h = src_crop_h;\n\tscale.dst_image.addr[0] = (unsigned long)pdst;\n\t//scale.dst_image.addr[1] = (unsigned long)pdst + dst_w * dst_h;\n\tscale.dst_image.w = dst_w;\n\tscale.dst_image.h = dst_h;\n\t//scale.dst_image.format = G2D_FMT_PYUV420UVC;\t\n\tscale.dst_image.format = G2D_FMT_XRGB8888;\n\tscale.dst_image.pixel_seq = G2D_SEQ_NORMAL;\n\tscale.dst_rect.x = dst_crop_x;\n\tscale.dst_rect.y = dst_crop_y;\n\tscale.dst_rect.w = dst_crop_w;\n\tscale.dst_rect.h = dst_crop_h;\n\tscale.color = 0xff;\n\tscale.alpha = 0xff;\t\n\t\n\tif(ioctl(g2d_fd,  G2D_CMD_STRETCHBLT ,(unsigned long)(&scale)) < 0)\n\t{\n\t\tprintf(\"[%d][%s][%s]G2D_CMD_STRETCHBLT failure!\\n\",\n\t\t\t__LINE__, __FILE__,__FUNCTION__);\n\t\treturn -1;\n\t}\n```\n\n## 6.应用层申请内核地址的办法\n\n### 1.G2D命令码\n\n```cpp\nG2D_CMD_MEM_REQUEST //为测试程序提供内存申请接口 >>arg为申请buffer的size\nG2D_CMD_MEM_GETADR //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\nG2D_CMD_MEM_RELEALSE //为测试程序提供内存物理地址 >>arg为申请buffer的编号（1~10）\n```\n\n### 2.alloc_mem\n\n```c\n//如：****alloc_buffer->phy = 0xfa200000,alloc_buffer->vir = 0x7f71081000\n```\n\n参考：\n\n```cpp\n#include \"sunxiMemInterface.h\"\n#include \"G2dApi.h\"\n\nVTint32 VTG2D_ClipByFd(VTint32 src_buffd, VTint32 dst_buffd,VTint32 dst_x,VTint32 dst_y)\n{\n\tg2d_blt_h blit;\n\n\tblit.flag_h = G2D_ROT_0;//G2D_BLT_NONE_H\n\tblit.src_image_h.fd = src_buffd;\n\tblit.src_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;//NV12\n\tblit.src_image_h.mode = G2D_GLOBAL_ALPHA;\n\tblit.src_image_h.clip_rect.x = 0;\n\tblit.src_image_h.clip_rect.y = 0;\n\tblit.src_image_h.clip_rect.w = 1280;\n\tblit.src_image_h.clip_rect.h = 720;\n\tblit.src_image_h.width = 1280;\n\tblit.src_image_h.height = 720;\n\tblit.src_image_h.alpha = 0xff; \n\n\tblit.src_image_h.fd = dst_buffd;\n\tblit.dst_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;\t\n\tblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;\n\tblit.dst_image_h.clip_rect.x = dst_x;\n\tblit.dst_image_h.clip_rect.y = dst_y;\n\tblit.dst_image_h.clip_rect.w = 1280;\n\tblit.dst_image_h.clip_rect.h = 720;\n\tblit.dst_image_h.width = 3840;\n\tblit.dst_image_h.height = 1440;\n\tblit.dst_image_h.alpha = 0xff; \n\n\tif(ioctl(g2d_fd,  G2D_CMD_BITBLT_H ,(unsigned long)(&blit)) < 0)\n\t{\n\t\tprintf(\"[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n\",\n\t\t\t__LINE__, __FILE__,__FUNCTION__);\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\nint allocPicMem(paramStruct_t*pops,int size)\n{\n    int iRet = 0;\n\n    iRet = allocOpen(MEM_TYPE_CDX_NEW, pops, NULL);\n    if (iRet < 0) {\n        printf(\"ion_alloc_open failed\\n\");\n        return iRet;\n    }\n    pops->size =size;\n    iRet = allocAlloc(MEM_TYPE_CDX_NEW, pops, NULL);\n    if(iRet < 0) {\n        printf(\"allocAlloc failed\\n\");\n        return iRet;\n    }\n\n    return 0;\n}\nint freePicMem(paramStruct_t*pops)\n{\n\tint iRet = 0;\n\tallocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n\n    return 0;\n}\nint ReadPicFileContent(char *pPicPath,paramStruct_t*pops,int size)\n{\n    allocPicMem(pops,size);\n\n    FILE *fpff = fopen(pPicPath, \"rb\");\n    if(NULL == fpff) {\n        fpff = fopen(pPicPath, \"rb\");\n        if(NULL == fpff) {\n            printf(\"fopen %s ERR \\n\", pPicPath);\n            allocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n            return -1;\n        } else {\n            printf(\"fopen %s OK \\n\", pPicPath);\n            fread((void *)pops->vir, 1, size, fpff);\n            fclose(fpff);\n        }\n    } else {\n        printf(\"fopen %s OK \\n\", pPicPath);\n        fread((void *)pops->vir, 1, size, fpff);\n        fclose(fpff);\n    }\n\tflushCache(MEM_TYPE_CDX_NEW,pops, NULL);\n\n    return 0;\n}\nint WritePicFileContent(char *pPicPath,paramStruct_t*pops,int size)\n{\n    int iRet = 0;\n\tprintf(\"WritePicFileContent size=%d \\n\",size);\n\tflushCache(MEM_TYPE_CDX_NEW,pops, NULL);\n\n    FILE *fpff = fopen(pPicPath, \"wb\");\n    if(NULL == fpff) {\n        fpff = fopen(pPicPath, \"wb\");\n        if(NULL == fpff) {\n            printf(\"fopen %s ERR \\n\", pPicPath);\n            allocFree(MEM_TYPE_CDX_NEW, pops, NULL);\n            return -1;\n        } else {\n            printf(\"fopen %s OK \\n\", pPicPath);\n            fwrite((void *)pops->vir, 1, size, fpff);\n            fclose(fpff);\n        }\n    } else {\n        printf(\"fopen %s OK \\n\", pPicPath);\n        fwrite((void *)pops->vir, 1, size, fpff);\n        fclose(fpff);\n    }\n    return 0;\n}\nint VT_G2D_6in1compose(int iSubWidth,int iSubHeight,int iWidth,int iHeight)\n{\n\tparamStruct_t m_DispMemOps;\n\tparamStruct_t m_DispMemOps0;\n\tparamStruct_t m_DispMemOps1;\n\tparamStruct_t m_DispMemOps2;\n\tparamStruct_t m_DispMemOps3;\n\tparamStruct_t m_DispMemOps4;\n\tparamStruct_t m_DispMemOps5;\n\tchar *pcompPicPath0=\"cvideo.yuv\";\n\tchar *pPicPath0=\"Video[0]_picture0.yuv\";\n\tchar *pPicPath1=\"Video[1]_picture0.yuv\";\n\tchar *pPicPath2=\"Video[2]_picture0.yuv\";\n\tchar *pPicPath3=\"Video[3]_picture0.yuv\";\n\tchar *pPicPath4=\"Video[4]_picture0.yuv\";\n\tchar *pPicPath5=\"Video[5]_picture0.yuv\";\n\n\t\tReadPicFileContent(pPicPath0,&m_DispMemOps0,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath1,&m_DispMemOps1,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath2,&m_DispMemOps2,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath3,&m_DispMemOps3,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath4,&m_DispMemOps4,iSubWidth*iSubHeight*3/2);\n\t\tReadPicFileContent(pPicPath5,&m_DispMemOps5,iSubWidth*iSubHeight*3/2);\n\n\t\tallocPicMem(&m_DispMemOps,iWidth*iHeight*3/2);\n\t\tint outfd = m_DispMemOps.ion_buffer.fd_data.aw_fd;\n\t\tint infd[6];\n\t\tinfd[0] = m_DispMemOps0.ion_buffer.fd_data.aw_fd;\n\t\tinfd[1] = m_DispMemOps1.ion_buffer.fd_data.aw_fd;\n\t\tinfd[2] = m_DispMemOps2.ion_buffer.fd_data.aw_fd;\n\t\tinfd[3] = m_DispMemOps3.ion_buffer.fd_data.aw_fd;\n\t\tinfd[4] = m_DispMemOps4.ion_buffer.fd_data.aw_fd;\n\t\tinfd[5] = m_DispMemOps5.ion_buffer.fd_data.aw_fd;\n\t\tint ret = -1;\n\t\tret  = VTG2D_ClipByFd(infd[0],outfd,0,0);\n\t\tg2dClipByFd();\n\t\tret |= VTG2D_ClipByFd(infd[1],outfd,iSubWidth,0);\n\t\tret |= VTG2D_ClipByFd(infd[2],outfd,iSubWidth*2,0);\n\t\tret |= VTG2D_ClipByFd(infd[3],outfd,0,iSubHeight);\n\t\tret |= VTG2D_ClipByFd(infd[4],outfd,iSubWidth,iSubHeight);\n\t\tret |= VTG2D_ClipByFd(infd[5],outfd,iSubWidth*2,iSubHeight);\n\t\tWritePicFileContent(pcompPicPath0,&m_DispMemOps,iWidth*iHeight*3/2);\n\t\tfreePicMem(&m_DispMemOps);\n\t\tfreePicMem(&m_DispMemOps0);\n\t\tfreePicMem(&m_DispMemOps1);\n\t\tfreePicMem(&m_DispMemOps2);\n\t\tfreePicMem(&m_DispMemOps3);\n\t\tfreePicMem(&m_DispMemOps4);\n\t\tfreePicMem(&m_DispMemOps5);\n\treturn 1;\n}\n```\n\n注意：T5中不能进行缩放和格式转换。而且要求目标图像和源图像的分辨率必须相同。","slug":"G2D","published":1,"updated":"2023-04-14T10:16:05.460Z","_id":"clgge3wmz0000u0oba2qu86og","layout":"post","photos":[],"link":"","content":"<div align = \"center\">G2D</div>\n## 1.什么是跟g2d？\n\n<p>​\tG2D也就是我们说的2d加速。很久以前，绘图工作全部是由我们伟大而神圣的 CPU 来完成的，那时候的显卡，就是真正意义上用来“显示东西的卡”。它的工作就是把 CPU 处理好的数据“搬”到显示器上来。那时候 CPU 的工作可真是辛苦。现在好了，CPU 越来越快，可是做的工作却越来越少了。先来说说图形加速的几个阶段。2D 图像加速，Windows 加速 和 3D 图像加速。</p>\n<span id=\"more\"></span>\n\n<p>​\t2D 加速，是早就有的产物了。它的作用是用 显示芯片 来代替 CPU，整块整块的移动显存里的数据。比如，你要移动一个窗口，在没有 2D 加速的时代，CPU 所作的工作：1、找到窗口在显存中的地址，2、把一行数据拷贝到目的地址，3、重复 2 直到拷贝完所有的行。完成。这样一来，当窗口很大的时候，CPU 要处理的数据量就会成倍的增长，导致窗口的移动比蜗牛爬还慢…. 想体验一下吗？好，进入设备管理器，把你的显卡驱动删掉，然后重起…. 好好享受啊！呵呵 </p>\n<p>​\t有了 2D 加速呢，CPU 所做的事，减轻了很多，不过还是要指导 显示芯片 来干这搬运工的活。CPU 的工作：1、找到窗口在显存中的地址，2、给 显卡发送 “拷贝这一行到目的地”的命令。3、重复 2 直到拷贝完所有的行。初看起来好像和没有加速以前差不多，可是第 2 步就是关键所在哦。 </p>\n<p>​\t现在让我们把第二步分解来看：没有 2D 加速：1、读 32 Bit 数据(入门篇里的哦！)，把这 32 Bit 数据写入目的地。2、重复 1 直到一行所有的像素被处理完。而有了 2D 加速后的工作只有：1、发送命令让显卡去拷贝这一行。这样看来，2D 加速确实能很大程度的释放 CPU 的负担。所以大家现在随便提起一个窗口移动一下，很平滑不是吗？显卡负责了窗口的移动。</p>\n<h2 id=\"2-支持的功能有哪些\"><a href=\"#2-支持的功能有哪些\" class=\"headerlink\" title=\"2.支持的功能有哪些?\"></a>2.支持的功能有哪些?</h2><p>​\t转码，缩放，位块传输……(不同芯片支持的具体功能不尽相同)</p>\n<p><img src=\"/2023/04/14/G2D/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持图层大小最高至2048*2048像素点</span><br><span class=\"line\">支持输入/输出格式：YUV422（sp、planner）、YUV420（sp、planer）......</span><br><span class=\"line\">支持水平和垂直翻转，顺时针 0/90/180/270度 旋转</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-函数接口命令\"><a href=\"#3-函数接口命令\" class=\"headerlink\" title=\"3.函数接口命令\"></a>3.函数接口命令</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fd:G2D设备文件标识符，cmd:命令码，arg:对应结构体指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ioctl</span><span class=\"params\">(<span class=\"type\">int</span> * fd, <span class=\"type\">int</span> cmd, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> arg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//常见cmd功能、与结构体对应关系</span></span><br><span class=\"line\">G2D_CMD_BITBLT_H <span class=\"comment\">//实现单幅图的缩放，格式转换。实现foreground带缩放的ROP2处理 &gt;&gt; g2d_blt_h</span></span><br><span class=\"line\">G2D_CMD_BITBLT <span class=\"comment\">//实现两个图层的运算，如：源拷贝到目标；源旋转放入目标；源和目标做alpha blending /colorkey 后拷到目标。&gt;&gt; g2d_blt </span></span><br><span class=\"line\">G2D_CMD_STRETCHBLT\t<span class=\"comment\">//实现两个图层的运算，如：源缩放到目标大小后拷贝到目标；源缩放到目标大小后旋转放入目标；源缩放到目标大小后和目标做做alpha blending /colorkey 后拷到目标。&gt;&gt; g2d_stretchblt</span></span><br><span class=\"line\">G2D_CMD_MEM_REQUEST <span class=\"comment\">//为测试程序提供内存申请接口 &gt;&gt;arg为申请buffer的size</span></span><br><span class=\"line\">G2D_CMD_MEM_GETADR <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br><span class=\"line\">G2D_CMD_MEM_RELEALSE <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t注意：G2D使用时，传入的地址只能是物理地址，不能是应用空间申请的虚拟地址。所以测试时，需要alloc_mem的方式申请一片内存空间，得到其物理地址，才能进行G2D调用。</p>\n<h2 id=\"4-数据结构\"><a href=\"#4-数据结构\" class=\"headerlink\" title=\"4.数据结构\"></a>4.数据结构</h2><h3 id=\"g2d-blt-h\"><a href=\"#g2d-blt-h\" class=\"headerlink\" title=\"g2d_blt_h\"></a>g2d_blt_h</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags_h\tflag_h;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image_enh\tsrc_image_h;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_image_enh\tdst_image_h;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125; g2d_blt_h;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-blt\"><a href=\"#g2d-blt\" class=\"headerlink\" title=\"g2d_blt\"></a>g2d_blt</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags\tflag;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image\t\tsrc_image;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_rect\t\tsrc_rect;<span class=\"comment\">//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    g2d_image\t\tdst_image;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">    __s32\t\t\tdst_x;<span class=\"comment\">//目标矩阵左上角x</span></span><br><span class=\"line\">    __s32\t\t\tdst_y;<span class=\"comment\">//目标矩阵左上角y</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125;g2d_blt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-stretchblt\"><a href=\"#g2d-stretchblt\" class=\"headerlink\" title=\"g2d_stretchblt\"></a>g2d_stretchblt</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags\tflag;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image\t\tsrc_image;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_rect\t\tsrc_rect;<span class=\"comment\">//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    g2d_image\t\tdst_image;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">\tg2d_rect\t\tdst_rect;<span class=\"comment\">//目标矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125;g2d_stretchblt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-image\"><a href=\"#g2d-image\" class=\"headerlink\" title=\"g2d_image\"></a>g2d_image</h3><p>主要用于描述image属性信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    __u32\taddr[<span class=\"number\">3</span>];<span class=\"comment\">//图像帧的基地址，对于UV combined ，addr[0,1]有效，planner类型addr[0,1,2]有效，其他addr[0]有效</span></span><br><span class=\"line\">    __u32\tw;<span class=\"comment\">//图像帧的宽</span></span><br><span class=\"line\">    __u32\th;<span class=\"comment\">//图像帧的高</span></span><br><span class=\"line\">    g2d_data_fmt\tformat;<span class=\"comment\">//图像帧buffer的像素格式</span></span><br><span class=\"line\">    g2d_pixel_seq\tpixel_seq;<span class=\"comment\">//图像帧buffer的像素序列</span></span><br><span class=\"line\">&#125;g2d_image;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-image-enh\"><a href=\"#g2d-image-enh\" class=\"headerlink\" title=\"g2d_image_enh\"></a>g2d_image_enh</h3><p>​\t主要描述图片的宽高、存放地址、是否做Clip处理，是否为预乘等</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>\t\tbbuff;</span><br><span class=\"line\">    g2d_fmt_enh\tformat;<span class=\"comment\">//图格式</span></span><br><span class=\"line\">    __u32\tladdr[<span class=\"number\">3</span>];<span class=\"comment\">//起始低位地址</span></span><br><span class=\"line\">    __u32\thaddr[<span class=\"number\">3</span>];<span class=\"comment\">//起始高位地址</span></span><br><span class=\"line\">    __u32\twidth;<span class=\"comment\">//图宽</span></span><br><span class=\"line\">    __u32\theight;<span class=\"comment\">//图高</span></span><br><span class=\"line\">    __u32\talign[<span class=\"number\">3</span>];</span><br><span class=\"line\">    g2d_rect\t\tclip_rect;<span class=\"comment\">//ROI矩形</span></span><br><span class=\"line\">    __u32\tgamut;<span class=\"comment\">//图的色域</span></span><br><span class=\"line\">    <span class=\"type\">int</span>\t\tbpremul;<span class=\"comment\">//是否为预乘</span></span><br><span class=\"line\">    __u8\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">    g2d_alpha_mode_enh\tmode;<span class=\"comment\">//alpha模式设置</span></span><br><span class=\"line\">&#125;g2d_image_enh;</span><br></pre></td></tr></table></figure>\n\n<p>​\tladdr以及haddr是针对32为以及64位处理器的一个适配，32位处理器只需要填充laddr，64位则需要填充laddr和haddr</p>\n<h3 id=\"g2d-blt-flags\"><a href=\"#g2d-blt-flags\" class=\"headerlink\" title=\"g2d_blt_flags\"></a>g2d_blt_flags</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</span><br><span class=\"line\">    G2D_BLT_NONE\t\t\t= <span class=\"number\">0x00000000</span>,<span class=\"comment\">//纯拷贝</span></span><br><span class=\"line\">    G2D_BLT_PIXEL_ALPHA\t\t= <span class=\"number\">0x00000001</span>,<span class=\"comment\">//点alpha标志</span></span><br><span class=\"line\">    G2D_BLT_PLANE_ALPHA \t= <span class=\"number\">0x00000002</span>,<span class=\"comment\">//面alpha标志</span></span><br><span class=\"line\">    G2D_BLT_MULTI_ALPHA \t=<span class=\"number\">0x00000004</span>,<span class=\"comment\">//混合alpha标志</span></span><br><span class=\"line\">    G2D_BLT_SRC_COLORKEY \t= <span class=\"number\">0x00000008</span>,<span class=\"comment\">//源colorkey标志</span></span><br><span class=\"line\">    G2D_BLT_DST_COLORKEY \t= <span class=\"number\">0x00000010</span>,<span class=\"comment\">//目标colorkey标志</span></span><br><span class=\"line\">    G2D_BLT_FLIP_HORIZONTAL = <span class=\"number\">0x00000020</span>,<span class=\"comment\">//水平翻转</span></span><br><span class=\"line\">    G2D_BLT_VERTICAL\t\t= <span class=\"number\">0x00000040</span>,<span class=\"comment\">//垂直翻转</span></span><br><span class=\"line\">    G2D_BLT_ROTATE90\t\t= <span class=\"number\">0x00000080</span>,<span class=\"comment\">//逆时针旋转90度</span></span><br><span class=\"line\">    G2D_BLT_ROTATE180 \t\t= <span class=\"number\">0x00000100</span>,<span class=\"comment\">//逆时针旋转180度</span></span><br><span class=\"line\">    G2D_BLT_ROTATE270 \t\t= <span class=\"number\">0x00000200</span>,<span class=\"comment\">//逆时针旋转270度</span></span><br><span class=\"line\">    G2D_BLT_MIRROR45 \t\t= <span class=\"number\">0x00000400</span>,<span class=\"comment\">//镜像45度</span></span><br><span class=\"line\">    G2D_BLT_MIRROR135\t\t = <span class=\"number\">0x00000800</span>,<span class=\"comment\">//镜像135度</span></span><br><span class=\"line\">&#125;g2d_blt_flags</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-blt-flags-h\"><a href=\"#g2d-blt-flags-h\" class=\"headerlink\" title=\"g2d_blt_flags_h\"></a>g2d_blt_flags_h</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-举例\"><a href=\"#5-举例\" class=\"headerlink\" title=\"5.举例\"></a>5.举例</h2><p>1.可参考虚拟机中…&#x2F;sdk_demo&#x2F;G2dDemo。</p>\n<p>2.也可参考全志G2D开发指南</p>\n<h3 id=\"1-旋转，缩放与格式转换\"><a href=\"#1-旋转，缩放与格式转换\" class=\"headerlink\" title=\"1.旋转，缩放与格式转换\"></a>1.旋转，缩放与格式转换</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_blt_h blit;<span class=\"comment\">//实例化一个对象，进行参数填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">blit.flag_h = G2D_BLT_NONE_0;<span class=\"comment\">//修改此参数实现旋转。如：G2D_ROT_90旋转90度</span></span><br><span class=\"line\">blit.src_image_h.fd = src_buffd;<span class=\"comment\">//源图像</span></span><br><span class=\"line\"><span class=\"comment\">//blit.src_image_h.format = G2D_FORMAT_YUV420_PLANAR;</span></span><br><span class=\"line\">blit.src_image_h.format = G2D_FORMAT_ARGB8888;</span><br><span class=\"line\">blit.src_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">blit.src_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.w = <span class=\"number\">320</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.h = <span class=\"number\">480</span>;</span><br><span class=\"line\"> blit.src_image_h.width = <span class=\"number\">320</span>;</span><br><span class=\"line\">blit.src_image_h.height = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_image_h.alpha = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.dst_image_h.fd = dst_buffd;<span class=\"comment\">//目标图像</span></span><br><span class=\"line\"><span class=\"comment\">//blit.dst_image_h.format = G2D_FORMAT_YUV420_PLANAR;\t</span></span><br><span class=\"line\">blit.dst_image_h.format = G2D_FORMAT_ARGB8888;<span class=\"comment\">//修改此格式可改变输出格式</span></span><br><span class=\"line\">blit.dst_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.w = <span class=\"number\">320</span>;<span class=\"comment\">//修改此参数可实现缩放</span></span><br><span class=\"line\">blit.dst_image_h.clip_rect.h = <span class=\"number\">480</span>;<span class=\"comment\">//修改此参数可实现缩放</span></span><br><span class=\"line\">blit.dst_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\">blit.dst_image_h.width = <span class=\"number\">320</span>;<span class=\"comment\">//与上保持一致</span></span><br><span class=\"line\">blit.dst_image_h.height = <span class=\"number\">480</span>;<span class=\"comment\">//与上保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_BITBLT_H ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;blit)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n&quot;</span>,__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-输入输出\"><a href=\"#2-输入输出\" class=\"headerlink\" title=\"2.输入输出\"></a>2.输入输出</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_blt blit;</span><br><span class=\"line\"><span class=\"comment\">//设置BITBLT flag标志位</span></span><br><span class=\"line\">blit.color = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.alpha = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.flag = G2D_BLT_NONE;<span class=\"comment\">//纯拷贝</span></span><br><span class=\"line\"><span class=\"comment\">//设置源image和rect</span></span><br><span class=\"line\">blit.src_image.addr[<span class=\"number\">0</span>] = memin;</span><br><span class=\"line\">blit.src_image.w = <span class=\"number\">800</span>;</span><br><span class=\"line\">blit.src_image.h = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_image.format = G2D_FMT_RGBA8888;\t</span><br><span class=\"line\">blit.src_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">blit.src_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_rect.w = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_rect.h = <span class=\"number\">272</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置目标image和rect</span></span><br><span class=\"line\">blit.dst_image.addr[<span class=\"number\">0</span>] = memout;</span><br><span class=\"line\">blit.dst_image.w = <span class=\"number\">800</span>;</span><br><span class=\"line\">blit.dst_image.h = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.dst_image.format = G2D_FMT_RGBA8888;</span><br><span class=\"line\">blit.dst_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">blit.dst_x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd, G2D_CMD_BITBLT, &amp;blit_para) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;G2D_CMD_BITBLT failure!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-缩放\"><a href=\"#3-缩放\" class=\"headerlink\" title=\"3.缩放\"></a>3.缩放</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_stretchblt scale;</span><br><span class=\"line\">\t<span class=\"type\">int</span> retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tscale.flag = G2D_BLT_NONE;</span><br><span class=\"line\">\tscale.src_image.addr[<span class=\"number\">0</span>] = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)psrc;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.src_image.addr[1] = (unsigned long)psrc + src_w * src_h;</span></span><br><span class=\"line\">\tscale.src_image.w = src_w;</span><br><span class=\"line\">\tscale.src_image.h = src_h;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.src_image.format = G2D_FMT_PYUV420UVC;</span></span><br><span class=\"line\">\tscale.src_image.format = G2D_FMT_XRGB8888;</span><br><span class=\"line\">\tscale.src_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">\tscale.src_rect.x = src_crop_x;</span><br><span class=\"line\">\tscale.src_rect.y = src_crop_y;</span><br><span class=\"line\">\tscale.src_rect.w = src_crop_w;</span><br><span class=\"line\">\tscale.src_rect.h = src_crop_h;</span><br><span class=\"line\">\tscale.dst_image.addr[<span class=\"number\">0</span>] = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)pdst;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.dst_image.addr[1] = (unsigned long)pdst + dst_w * dst_h;</span></span><br><span class=\"line\">\tscale.dst_image.w = dst_w;</span><br><span class=\"line\">\tscale.dst_image.h = dst_h;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.dst_image.format = G2D_FMT_PYUV420UVC;\t</span></span><br><span class=\"line\">\tscale.dst_image.format = G2D_FMT_XRGB8888;</span><br><span class=\"line\">\tscale.dst_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">\tscale.dst_rect.x = dst_crop_x;</span><br><span class=\"line\">\tscale.dst_rect.y = dst_crop_y;</span><br><span class=\"line\">\tscale.dst_rect.w = dst_crop_w;</span><br><span class=\"line\">\tscale.dst_rect.h = dst_crop_h;</span><br><span class=\"line\">\tscale.color = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\tscale.alpha = <span class=\"number\">0xff</span>;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_STRETCHBLT ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;scale)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_STRETCHBLT failure!\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-应用层申请内核地址的办法\"><a href=\"#6-应用层申请内核地址的办法\" class=\"headerlink\" title=\"6.应用层申请内核地址的办法\"></a>6.应用层申请内核地址的办法</h2><h3 id=\"1-G2D命令码\"><a href=\"#1-G2D命令码\" class=\"headerlink\" title=\"1.G2D命令码\"></a>1.G2D命令码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G2D_CMD_MEM_REQUEST <span class=\"comment\">//为测试程序提供内存申请接口 &gt;&gt;arg为申请buffer的size</span></span><br><span class=\"line\">G2D_CMD_MEM_GETADR <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br><span class=\"line\">G2D_CMD_MEM_RELEALSE <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-alloc-mem\"><a href=\"#2-alloc-mem\" class=\"headerlink\" title=\"2.alloc_mem\"></a>2.alloc_mem</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如：****alloc_buffer-&gt;phy = 0xfa200000,alloc_buffer-&gt;vir = 0x7f71081000</span></span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sunxiMemInterface.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;G2dApi.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VTint32 <span class=\"title\">VTG2D_ClipByFd</span><span class=\"params\">(VTint32 src_buffd, VTint32 dst_buffd,VTint32 dst_x,VTint32 dst_y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tg2d_blt_h blit;</span><br><span class=\"line\"></span><br><span class=\"line\">\tblit.flag_h = G2D_ROT_0;<span class=\"comment\">//G2D_BLT_NONE_H</span></span><br><span class=\"line\">\tblit.src_image_h.fd = src_buffd;</span><br><span class=\"line\">\tblit.src_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;<span class=\"comment\">//NV12</span></span><br><span class=\"line\">\tblit.src_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.w = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.h = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.src_image_h.width = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.src_image_h.height = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.src_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\tblit.src_image_h.fd = dst_buffd;</span><br><span class=\"line\">\tblit.dst_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;\t</span><br><span class=\"line\">\tblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.x = dst_x;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.y = dst_y;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.w = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.h = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.dst_image_h.width = <span class=\"number\">3840</span>;</span><br><span class=\"line\">\tblit.dst_image_h.height = <span class=\"number\">1440</span>;</span><br><span class=\"line\">\tblit.dst_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_BITBLT_H ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;blit)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">allocPicMem</span><span class=\"params\">(paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    iRet = <span class=\"built_in\">allocOpen</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iRet &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ion_alloc_open failed\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pops-&gt;size =size;</span><br><span class=\"line\">    iRet = <span class=\"built_in\">allocAlloc</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(iRet &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;allocAlloc failed\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">freePicMem</span><span class=\"params\">(paramStruct_t*pops)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ReadPicFileContent</span><span class=\"params\">(<span class=\"type\">char</span> *pPicPath,paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">allocPicMem</span>(pops,size);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">        fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s ERR \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">fread</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">            <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">        <span class=\"built_in\">fread</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">flushCache</span>(MEM_TYPE_CDX_NEW,pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">WritePicFileContent</span><span class=\"params\">(<span class=\"type\">char</span> *pPicPath,paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WritePicFileContent size=%d \\n&quot;</span>,size);</span><br><span class=\"line\">\t<span class=\"built_in\">flushCache</span>(MEM_TYPE_CDX_NEW,pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">        fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s ERR \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">fwrite</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">            <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">VT_G2D_6in1compose</span><span class=\"params\">(<span class=\"type\">int</span> iSubWidth,<span class=\"type\">int</span> iSubHeight,<span class=\"type\">int</span> iWidth,<span class=\"type\">int</span> iHeight)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps0;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps1;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps2;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps3;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps4;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps5;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pcompPicPath0=<span class=\"string\">&quot;cvideo.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath0=<span class=\"string\">&quot;Video[0]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath1=<span class=\"string\">&quot;Video[1]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath2=<span class=\"string\">&quot;Video[2]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath3=<span class=\"string\">&quot;Video[3]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath4=<span class=\"string\">&quot;Video[4]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath5=<span class=\"string\">&quot;Video[5]_picture0.yuv&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath0,&amp;m_DispMemOps0,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath1,&amp;m_DispMemOps1,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath2,&amp;m_DispMemOps2,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath3,&amp;m_DispMemOps3,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath4,&amp;m_DispMemOps4,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath5,&amp;m_DispMemOps5,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">allocPicMem</span>(&amp;m_DispMemOps,iWidth*iHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> outfd = m_DispMemOps.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> infd[<span class=\"number\">6</span>];</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">0</span>] = m_DispMemOps0.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">1</span>] = m_DispMemOps1.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">2</span>] = m_DispMemOps2.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">3</span>] = m_DispMemOps3.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">4</span>] = m_DispMemOps4.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">5</span>] = m_DispMemOps5.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tret  = <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">0</span>],outfd,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">g2dClipByFd</span>();</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">1</span>],outfd,iSubWidth,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">2</span>],outfd,iSubWidth*<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">3</span>],outfd,<span class=\"number\">0</span>,iSubHeight);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">4</span>],outfd,iSubWidth,iSubHeight);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">5</span>],outfd,iSubWidth*<span class=\"number\">2</span>,iSubHeight);</span><br><span class=\"line\">\t\t<span class=\"built_in\">WritePicFileContent</span>(pcompPicPath0,&amp;m_DispMemOps,iWidth*iHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps0);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps1);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps2);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps3);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps4);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps5);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：T5中不能进行缩放和格式转换。而且要求目标图像和源图像的分辨率必须相同。</p>\n","site":{"data":{"style":""}},"length":12022,"excerpt":"<div align = \"center\">G2D</div>\n## 1.什么是跟g2d？\n\n<p>​\tG2D也就是我们说的2d加速。很久以前，绘图工作全部是由我们伟大而神圣的 CPU 来完成的，那时候的显卡，就是真正意义上用来“显示东西的卡”。它的工作就是把 CPU 处理好的数据“搬”到显示器上来。那时候 CPU 的工作可真是辛苦。现在好了，CPU 越来越快，可是做的工作却越来越少了。先来说说图形加速的几个阶段。2D 图像加速，Windows 加速 和 3D 图像加速。</p>","more":"<p>​\t2D 加速，是早就有的产物了。它的作用是用 显示芯片 来代替 CPU，整块整块的移动显存里的数据。比如，你要移动一个窗口，在没有 2D 加速的时代，CPU 所作的工作：1、找到窗口在显存中的地址，2、把一行数据拷贝到目的地址，3、重复 2 直到拷贝完所有的行。完成。这样一来，当窗口很大的时候，CPU 要处理的数据量就会成倍的增长，导致窗口的移动比蜗牛爬还慢…. 想体验一下吗？好，进入设备管理器，把你的显卡驱动删掉，然后重起…. 好好享受啊！呵呵 </p>\n<p>​\t有了 2D 加速呢，CPU 所做的事，减轻了很多，不过还是要指导 显示芯片 来干这搬运工的活。CPU 的工作：1、找到窗口在显存中的地址，2、给 显卡发送 “拷贝这一行到目的地”的命令。3、重复 2 直到拷贝完所有的行。初看起来好像和没有加速以前差不多，可是第 2 步就是关键所在哦。 </p>\n<p>​\t现在让我们把第二步分解来看：没有 2D 加速：1、读 32 Bit 数据(入门篇里的哦！)，把这 32 Bit 数据写入目的地。2、重复 1 直到一行所有的像素被处理完。而有了 2D 加速后的工作只有：1、发送命令让显卡去拷贝这一行。这样看来，2D 加速确实能很大程度的释放 CPU 的负担。所以大家现在随便提起一个窗口移动一下，很平滑不是吗？显卡负责了窗口的移动。</p>\n<h2 id=\"2-支持的功能有哪些\"><a href=\"#2-支持的功能有哪些\" class=\"headerlink\" title=\"2.支持的功能有哪些?\"></a>2.支持的功能有哪些?</h2><p>​\t转码，缩放，位块传输……(不同芯片支持的具体功能不尽相同)</p>\n<p><img src=\"/2023/04/14/G2D/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持图层大小最高至2048*2048像素点</span><br><span class=\"line\">支持输入/输出格式：YUV422（sp、planner）、YUV420（sp、planer）......</span><br><span class=\"line\">支持水平和垂直翻转，顺时针 0/90/180/270度 旋转</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-函数接口命令\"><a href=\"#3-函数接口命令\" class=\"headerlink\" title=\"3.函数接口命令\"></a>3.函数接口命令</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fd:G2D设备文件标识符，cmd:命令码，arg:对应结构体指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ioctl</span><span class=\"params\">(<span class=\"type\">int</span> * fd, <span class=\"type\">int</span> cmd, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> arg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//常见cmd功能、与结构体对应关系</span></span><br><span class=\"line\">G2D_CMD_BITBLT_H <span class=\"comment\">//实现单幅图的缩放，格式转换。实现foreground带缩放的ROP2处理 &gt;&gt; g2d_blt_h</span></span><br><span class=\"line\">G2D_CMD_BITBLT <span class=\"comment\">//实现两个图层的运算，如：源拷贝到目标；源旋转放入目标；源和目标做alpha blending /colorkey 后拷到目标。&gt;&gt; g2d_blt </span></span><br><span class=\"line\">G2D_CMD_STRETCHBLT\t<span class=\"comment\">//实现两个图层的运算，如：源缩放到目标大小后拷贝到目标；源缩放到目标大小后旋转放入目标；源缩放到目标大小后和目标做做alpha blending /colorkey 后拷到目标。&gt;&gt; g2d_stretchblt</span></span><br><span class=\"line\">G2D_CMD_MEM_REQUEST <span class=\"comment\">//为测试程序提供内存申请接口 &gt;&gt;arg为申请buffer的size</span></span><br><span class=\"line\">G2D_CMD_MEM_GETADR <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br><span class=\"line\">G2D_CMD_MEM_RELEALSE <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t注意：G2D使用时，传入的地址只能是物理地址，不能是应用空间申请的虚拟地址。所以测试时，需要alloc_mem的方式申请一片内存空间，得到其物理地址，才能进行G2D调用。</p>\n<h2 id=\"4-数据结构\"><a href=\"#4-数据结构\" class=\"headerlink\" title=\"4.数据结构\"></a>4.数据结构</h2><h3 id=\"g2d-blt-h\"><a href=\"#g2d-blt-h\" class=\"headerlink\" title=\"g2d_blt_h\"></a>g2d_blt_h</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags_h\tflag_h;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image_enh\tsrc_image_h;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_image_enh\tdst_image_h;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125; g2d_blt_h;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-blt\"><a href=\"#g2d-blt\" class=\"headerlink\" title=\"g2d_blt\"></a>g2d_blt</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags\tflag;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image\t\tsrc_image;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_rect\t\tsrc_rect;<span class=\"comment\">//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    g2d_image\t\tdst_image;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">    __s32\t\t\tdst_x;<span class=\"comment\">//目标矩阵左上角x</span></span><br><span class=\"line\">    __s32\t\t\tdst_y;<span class=\"comment\">//目标矩阵左上角y</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125;g2d_blt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-stretchblt\"><a href=\"#g2d-stretchblt\" class=\"headerlink\" title=\"g2d_stretchblt\"></a>g2d_stretchblt</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    g2d_blt_flags\tflag;<span class=\"comment\">//blt操作flag标志</span></span><br><span class=\"line\">    g2d_image\t\tsrc_image;<span class=\"comment\">//源图像信息</span></span><br><span class=\"line\">    g2d_rect\t\tsrc_rect;<span class=\"comment\">//源矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    g2d_image\t\tdst_image;<span class=\"comment\">//目标图像信息</span></span><br><span class=\"line\">\tg2d_rect\t\tdst_rect;<span class=\"comment\">//目标矩形信息，x/y/w/h-左上角x/左上角y/宽/高</span></span><br><span class=\"line\">    __u32\t\t\tcolor;<span class=\"comment\">//colorkey颜色</span></span><br><span class=\"line\">    __u32\t\t\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">&#125;g2d_stretchblt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-image\"><a href=\"#g2d-image\" class=\"headerlink\" title=\"g2d_image\"></a>g2d_image</h3><p>主要用于描述image属性信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    __u32\taddr[<span class=\"number\">3</span>];<span class=\"comment\">//图像帧的基地址，对于UV combined ，addr[0,1]有效，planner类型addr[0,1,2]有效，其他addr[0]有效</span></span><br><span class=\"line\">    __u32\tw;<span class=\"comment\">//图像帧的宽</span></span><br><span class=\"line\">    __u32\th;<span class=\"comment\">//图像帧的高</span></span><br><span class=\"line\">    g2d_data_fmt\tformat;<span class=\"comment\">//图像帧buffer的像素格式</span></span><br><span class=\"line\">    g2d_pixel_seq\tpixel_seq;<span class=\"comment\">//图像帧buffer的像素序列</span></span><br><span class=\"line\">&#125;g2d_image;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-image-enh\"><a href=\"#g2d-image-enh\" class=\"headerlink\" title=\"g2d_image_enh\"></a>g2d_image_enh</h3><p>​\t主要描述图片的宽高、存放地址、是否做Clip处理，是否为预乘等</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>\t\tbbuff;</span><br><span class=\"line\">    g2d_fmt_enh\tformat;<span class=\"comment\">//图格式</span></span><br><span class=\"line\">    __u32\tladdr[<span class=\"number\">3</span>];<span class=\"comment\">//起始低位地址</span></span><br><span class=\"line\">    __u32\thaddr[<span class=\"number\">3</span>];<span class=\"comment\">//起始高位地址</span></span><br><span class=\"line\">    __u32\twidth;<span class=\"comment\">//图宽</span></span><br><span class=\"line\">    __u32\theight;<span class=\"comment\">//图高</span></span><br><span class=\"line\">    __u32\talign[<span class=\"number\">3</span>];</span><br><span class=\"line\">    g2d_rect\t\tclip_rect;<span class=\"comment\">//ROI矩形</span></span><br><span class=\"line\">    __u32\tgamut;<span class=\"comment\">//图的色域</span></span><br><span class=\"line\">    <span class=\"type\">int</span>\t\tbpremul;<span class=\"comment\">//是否为预乘</span></span><br><span class=\"line\">    __u8\talpha;<span class=\"comment\">//面alpha值</span></span><br><span class=\"line\">    g2d_alpha_mode_enh\tmode;<span class=\"comment\">//alpha模式设置</span></span><br><span class=\"line\">&#125;g2d_image_enh;</span><br></pre></td></tr></table></figure>\n\n<p>​\tladdr以及haddr是针对32为以及64位处理器的一个适配，32位处理器只需要填充laddr，64位则需要填充laddr和haddr</p>\n<h3 id=\"g2d-blt-flags\"><a href=\"#g2d-blt-flags\" class=\"headerlink\" title=\"g2d_blt_flags\"></a>g2d_blt_flags</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</span><br><span class=\"line\">    G2D_BLT_NONE\t\t\t= <span class=\"number\">0x00000000</span>,<span class=\"comment\">//纯拷贝</span></span><br><span class=\"line\">    G2D_BLT_PIXEL_ALPHA\t\t= <span class=\"number\">0x00000001</span>,<span class=\"comment\">//点alpha标志</span></span><br><span class=\"line\">    G2D_BLT_PLANE_ALPHA \t= <span class=\"number\">0x00000002</span>,<span class=\"comment\">//面alpha标志</span></span><br><span class=\"line\">    G2D_BLT_MULTI_ALPHA \t=<span class=\"number\">0x00000004</span>,<span class=\"comment\">//混合alpha标志</span></span><br><span class=\"line\">    G2D_BLT_SRC_COLORKEY \t= <span class=\"number\">0x00000008</span>,<span class=\"comment\">//源colorkey标志</span></span><br><span class=\"line\">    G2D_BLT_DST_COLORKEY \t= <span class=\"number\">0x00000010</span>,<span class=\"comment\">//目标colorkey标志</span></span><br><span class=\"line\">    G2D_BLT_FLIP_HORIZONTAL = <span class=\"number\">0x00000020</span>,<span class=\"comment\">//水平翻转</span></span><br><span class=\"line\">    G2D_BLT_VERTICAL\t\t= <span class=\"number\">0x00000040</span>,<span class=\"comment\">//垂直翻转</span></span><br><span class=\"line\">    G2D_BLT_ROTATE90\t\t= <span class=\"number\">0x00000080</span>,<span class=\"comment\">//逆时针旋转90度</span></span><br><span class=\"line\">    G2D_BLT_ROTATE180 \t\t= <span class=\"number\">0x00000100</span>,<span class=\"comment\">//逆时针旋转180度</span></span><br><span class=\"line\">    G2D_BLT_ROTATE270 \t\t= <span class=\"number\">0x00000200</span>,<span class=\"comment\">//逆时针旋转270度</span></span><br><span class=\"line\">    G2D_BLT_MIRROR45 \t\t= <span class=\"number\">0x00000400</span>,<span class=\"comment\">//镜像45度</span></span><br><span class=\"line\">    G2D_BLT_MIRROR135\t\t = <span class=\"number\">0x00000800</span>,<span class=\"comment\">//镜像135度</span></span><br><span class=\"line\">&#125;g2d_blt_flags</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"g2d-blt-flags-h\"><a href=\"#g2d-blt-flags-h\" class=\"headerlink\" title=\"g2d_blt_flags_h\"></a>g2d_blt_flags_h</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-举例\"><a href=\"#5-举例\" class=\"headerlink\" title=\"5.举例\"></a>5.举例</h2><p>1.可参考虚拟机中…&#x2F;sdk_demo&#x2F;G2dDemo。</p>\n<p>2.也可参考全志G2D开发指南</p>\n<h3 id=\"1-旋转，缩放与格式转换\"><a href=\"#1-旋转，缩放与格式转换\" class=\"headerlink\" title=\"1.旋转，缩放与格式转换\"></a>1.旋转，缩放与格式转换</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_blt_h blit;<span class=\"comment\">//实例化一个对象，进行参数填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">blit.flag_h = G2D_BLT_NONE_0;<span class=\"comment\">//修改此参数实现旋转。如：G2D_ROT_90旋转90度</span></span><br><span class=\"line\">blit.src_image_h.fd = src_buffd;<span class=\"comment\">//源图像</span></span><br><span class=\"line\"><span class=\"comment\">//blit.src_image_h.format = G2D_FORMAT_YUV420_PLANAR;</span></span><br><span class=\"line\">blit.src_image_h.format = G2D_FORMAT_ARGB8888;</span><br><span class=\"line\">blit.src_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">blit.src_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.w = <span class=\"number\">320</span>;</span><br><span class=\"line\">blit.src_image_h.clip_rect.h = <span class=\"number\">480</span>;</span><br><span class=\"line\"> blit.src_image_h.width = <span class=\"number\">320</span>;</span><br><span class=\"line\">blit.src_image_h.height = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_image_h.alpha = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.dst_image_h.fd = dst_buffd;<span class=\"comment\">//目标图像</span></span><br><span class=\"line\"><span class=\"comment\">//blit.dst_image_h.format = G2D_FORMAT_YUV420_PLANAR;\t</span></span><br><span class=\"line\">blit.dst_image_h.format = G2D_FORMAT_ARGB8888;<span class=\"comment\">//修改此格式可改变输出格式</span></span><br><span class=\"line\">blit.dst_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_image_h.clip_rect.w = <span class=\"number\">320</span>;<span class=\"comment\">//修改此参数可实现缩放</span></span><br><span class=\"line\">blit.dst_image_h.clip_rect.h = <span class=\"number\">480</span>;<span class=\"comment\">//修改此参数可实现缩放</span></span><br><span class=\"line\">blit.dst_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\">blit.dst_image_h.width = <span class=\"number\">320</span>;<span class=\"comment\">//与上保持一致</span></span><br><span class=\"line\">blit.dst_image_h.height = <span class=\"number\">480</span>;<span class=\"comment\">//与上保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_BITBLT_H ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;blit)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n&quot;</span>,__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-输入输出\"><a href=\"#2-输入输出\" class=\"headerlink\" title=\"2.输入输出\"></a>2.输入输出</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_blt blit;</span><br><span class=\"line\"><span class=\"comment\">//设置BITBLT flag标志位</span></span><br><span class=\"line\">blit.color = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.alpha = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">blit.flag = G2D_BLT_NONE;<span class=\"comment\">//纯拷贝</span></span><br><span class=\"line\"><span class=\"comment\">//设置源image和rect</span></span><br><span class=\"line\">blit.src_image.addr[<span class=\"number\">0</span>] = memin;</span><br><span class=\"line\">blit.src_image.w = <span class=\"number\">800</span>;</span><br><span class=\"line\">blit.src_image.h = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_image.format = G2D_FMT_RGBA8888;\t</span><br><span class=\"line\">blit.src_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">blit.src_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.src_rect.w = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.src_rect.h = <span class=\"number\">272</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置目标image和rect</span></span><br><span class=\"line\">blit.dst_image.addr[<span class=\"number\">0</span>] = memout;</span><br><span class=\"line\">blit.dst_image.w = <span class=\"number\">800</span>;</span><br><span class=\"line\">blit.dst_image.h = <span class=\"number\">480</span>;</span><br><span class=\"line\">blit.dst_image.format = G2D_FMT_RGBA8888;</span><br><span class=\"line\">blit.dst_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">blit.dst_x = <span class=\"number\">0</span>;</span><br><span class=\"line\">blit.dst_y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd, G2D_CMD_BITBLT, &amp;blit_para) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;G2D_CMD_BITBLT failure!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-缩放\"><a href=\"#3-缩放\" class=\"headerlink\" title=\"3.缩放\"></a>3.缩放</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2d_stretchblt scale;</span><br><span class=\"line\">\t<span class=\"type\">int</span> retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tscale.flag = G2D_BLT_NONE;</span><br><span class=\"line\">\tscale.src_image.addr[<span class=\"number\">0</span>] = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)psrc;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.src_image.addr[1] = (unsigned long)psrc + src_w * src_h;</span></span><br><span class=\"line\">\tscale.src_image.w = src_w;</span><br><span class=\"line\">\tscale.src_image.h = src_h;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.src_image.format = G2D_FMT_PYUV420UVC;</span></span><br><span class=\"line\">\tscale.src_image.format = G2D_FMT_XRGB8888;</span><br><span class=\"line\">\tscale.src_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">\tscale.src_rect.x = src_crop_x;</span><br><span class=\"line\">\tscale.src_rect.y = src_crop_y;</span><br><span class=\"line\">\tscale.src_rect.w = src_crop_w;</span><br><span class=\"line\">\tscale.src_rect.h = src_crop_h;</span><br><span class=\"line\">\tscale.dst_image.addr[<span class=\"number\">0</span>] = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)pdst;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.dst_image.addr[1] = (unsigned long)pdst + dst_w * dst_h;</span></span><br><span class=\"line\">\tscale.dst_image.w = dst_w;</span><br><span class=\"line\">\tscale.dst_image.h = dst_h;</span><br><span class=\"line\">\t<span class=\"comment\">//scale.dst_image.format = G2D_FMT_PYUV420UVC;\t</span></span><br><span class=\"line\">\tscale.dst_image.format = G2D_FMT_XRGB8888;</span><br><span class=\"line\">\tscale.dst_image.pixel_seq = G2D_SEQ_NORMAL;</span><br><span class=\"line\">\tscale.dst_rect.x = dst_crop_x;</span><br><span class=\"line\">\tscale.dst_rect.y = dst_crop_y;</span><br><span class=\"line\">\tscale.dst_rect.w = dst_crop_w;</span><br><span class=\"line\">\tscale.dst_rect.h = dst_crop_h;</span><br><span class=\"line\">\tscale.color = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\tscale.alpha = <span class=\"number\">0xff</span>;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_STRETCHBLT ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;scale)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_STRETCHBLT failure!\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-应用层申请内核地址的办法\"><a href=\"#6-应用层申请内核地址的办法\" class=\"headerlink\" title=\"6.应用层申请内核地址的办法\"></a>6.应用层申请内核地址的办法</h2><h3 id=\"1-G2D命令码\"><a href=\"#1-G2D命令码\" class=\"headerlink\" title=\"1.G2D命令码\"></a>1.G2D命令码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G2D_CMD_MEM_REQUEST <span class=\"comment\">//为测试程序提供内存申请接口 &gt;&gt;arg为申请buffer的size</span></span><br><span class=\"line\">G2D_CMD_MEM_GETADR <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br><span class=\"line\">G2D_CMD_MEM_RELEALSE <span class=\"comment\">//为测试程序提供内存物理地址 &gt;&gt;arg为申请buffer的编号（1~10）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-alloc-mem\"><a href=\"#2-alloc-mem\" class=\"headerlink\" title=\"2.alloc_mem\"></a>2.alloc_mem</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如：****alloc_buffer-&gt;phy = 0xfa200000,alloc_buffer-&gt;vir = 0x7f71081000</span></span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sunxiMemInterface.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;G2dApi.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VTint32 <span class=\"title\">VTG2D_ClipByFd</span><span class=\"params\">(VTint32 src_buffd, VTint32 dst_buffd,VTint32 dst_x,VTint32 dst_y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tg2d_blt_h blit;</span><br><span class=\"line\"></span><br><span class=\"line\">\tblit.flag_h = G2D_ROT_0;<span class=\"comment\">//G2D_BLT_NONE_H</span></span><br><span class=\"line\">\tblit.src_image_h.fd = src_buffd;</span><br><span class=\"line\">\tblit.src_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;<span class=\"comment\">//NV12</span></span><br><span class=\"line\">\tblit.src_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.w = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.src_image_h.clip_rect.h = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.src_image_h.width = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.src_image_h.height = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.src_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\tblit.src_image_h.fd = dst_buffd;</span><br><span class=\"line\">\tblit.dst_image_h.format = G2D_FORMAT_YUV420UVC_U1V1U0V0;\t</span><br><span class=\"line\">\tblit.dst_image_h.mode = G2D_GLOBAL_ALPHA;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.x = dst_x;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.y = dst_y;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.w = <span class=\"number\">1280</span>;</span><br><span class=\"line\">\tblit.dst_image_h.clip_rect.h = <span class=\"number\">720</span>;</span><br><span class=\"line\">\tblit.dst_image_h.width = <span class=\"number\">3840</span>;</span><br><span class=\"line\">\tblit.dst_image_h.height = <span class=\"number\">1440</span>;</span><br><span class=\"line\">\tblit.dst_image_h.alpha = <span class=\"number\">0xff</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">ioctl</span>(g2d_fd,  G2D_CMD_BITBLT_H ,(<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(&amp;blit)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d][%s][%s]G2D_CMD_BITBLT_H failure!\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t__LINE__, __FILE__,__FUNCTION__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">allocPicMem</span><span class=\"params\">(paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    iRet = <span class=\"built_in\">allocOpen</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iRet &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ion_alloc_open failed\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pops-&gt;size =size;</span><br><span class=\"line\">    iRet = <span class=\"built_in\">allocAlloc</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(iRet &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;allocAlloc failed\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iRet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">freePicMem</span><span class=\"params\">(paramStruct_t*pops)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ReadPicFileContent</span><span class=\"params\">(<span class=\"type\">char</span> *pPicPath,paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">allocPicMem</span>(pops,size);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">        fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s ERR \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">fread</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">            <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">        <span class=\"built_in\">fread</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">flushCache</span>(MEM_TYPE_CDX_NEW,pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">WritePicFileContent</span><span class=\"params\">(<span class=\"type\">char</span> *pPicPath,paramStruct_t*pops,<span class=\"type\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> iRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WritePicFileContent size=%d \\n&quot;</span>,size);</span><br><span class=\"line\">\t<span class=\"built_in\">flushCache</span>(MEM_TYPE_CDX_NEW,pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">        fpff = <span class=\"built_in\">fopen</span>(pPicPath, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fpff) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s ERR \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">allocFree</span>(MEM_TYPE_CDX_NEW, pops, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">            <span class=\"built_in\">fwrite</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">            <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fopen %s OK \\n&quot;</span>, pPicPath);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>((<span class=\"type\">void</span> *)pops-&gt;vir, <span class=\"number\">1</span>, size, fpff);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fpff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">VT_G2D_6in1compose</span><span class=\"params\">(<span class=\"type\">int</span> iSubWidth,<span class=\"type\">int</span> iSubHeight,<span class=\"type\">int</span> iWidth,<span class=\"type\">int</span> iHeight)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps0;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps1;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps2;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps3;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps4;</span><br><span class=\"line\">\tparamStruct_t m_DispMemOps5;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pcompPicPath0=<span class=\"string\">&quot;cvideo.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath0=<span class=\"string\">&quot;Video[0]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath1=<span class=\"string\">&quot;Video[1]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath2=<span class=\"string\">&quot;Video[2]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath3=<span class=\"string\">&quot;Video[3]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath4=<span class=\"string\">&quot;Video[4]_picture0.yuv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *pPicPath5=<span class=\"string\">&quot;Video[5]_picture0.yuv&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath0,&amp;m_DispMemOps0,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath1,&amp;m_DispMemOps1,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath2,&amp;m_DispMemOps2,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath3,&amp;m_DispMemOps3,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath4,&amp;m_DispMemOps4,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadPicFileContent</span>(pPicPath5,&amp;m_DispMemOps5,iSubWidth*iSubHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">allocPicMem</span>(&amp;m_DispMemOps,iWidth*iHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> outfd = m_DispMemOps.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> infd[<span class=\"number\">6</span>];</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">0</span>] = m_DispMemOps0.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">1</span>] = m_DispMemOps1.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">2</span>] = m_DispMemOps2.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">3</span>] = m_DispMemOps3.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">4</span>] = m_DispMemOps4.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\tinfd[<span class=\"number\">5</span>] = m_DispMemOps5.ion_buffer.fd_data.aw_fd;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tret  = <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">0</span>],outfd,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">g2dClipByFd</span>();</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">1</span>],outfd,iSubWidth,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">2</span>],outfd,iSubWidth*<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">3</span>],outfd,<span class=\"number\">0</span>,iSubHeight);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">4</span>],outfd,iSubWidth,iSubHeight);</span><br><span class=\"line\">\t\tret |= <span class=\"built_in\">VTG2D_ClipByFd</span>(infd[<span class=\"number\">5</span>],outfd,iSubWidth*<span class=\"number\">2</span>,iSubHeight);</span><br><span class=\"line\">\t\t<span class=\"built_in\">WritePicFileContent</span>(pcompPicPath0,&amp;m_DispMemOps,iWidth*iHeight*<span class=\"number\">3</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps0);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps1);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps2);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps3);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps4);</span><br><span class=\"line\">\t\t<span class=\"built_in\">freePicMem</span>(&amp;m_DispMemOps5);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：T5中不能进行缩放和格式转换。而且要求目标图像和源图像的分辨率必须相同。</p>"}],"PostAsset":[{"_id":"source/_posts/1-V4l2/1.png","slug":"1.png","post":"clgelnnse0002rgob33xj3z9r","modified":0,"renderable":0},{"_id":"source/_posts/1-V4l2/2.png","slug":"2.png","post":"clgelnnse0002rgob33xj3z9r","modified":0,"renderable":0},{"_id":"source/_posts/1-V4l2/3.png","slug":"3.png","post":"clgelnnse0002rgob33xj3z9r","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/1.png","slug":"1.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/10.jpg","slug":"10.jpg","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/11.jpg","slug":"11.jpg","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/12.jpg","slug":"12.jpg","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/2.png","slug":"2.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/3.png","slug":"3.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/4.png","slug":"4.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/5.png","slug":"5.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/6.png","slug":"6.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/7.png","slug":"7.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/8.png","slug":"8.png","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/2-YUV&RGB/9.jpg","slug":"9.jpg","post":"clgeng1v90000vwobec6993p8","modified":0,"renderable":0},{"_id":"source/_posts/G2D/1.png","slug":"1.png","post":"clgge3wmz0000u0oba2qu86og","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clgbv7k4o00018cob88lof603","category_id":"clgbv7k4s00038cobeihkgvvw","_id":"clgbv7k4w00098cobhk31glwc"},{"post_id":"clgbycqco0001s8obco3m00nq","category_id":"clgbycqcr0002s8ob1ym92rhv","_id":"clgbycqct0003s8obaok2cuwd"},{"post_id":"clgbz5hpe0000s8ob1fr65els","category_id":"clgbycqcr0002s8ob1ym92rhv","_id":"clgbz5hpi0001s8ob2dae83di"},{"post_id":"clgelnnse0002rgob33xj3z9r","category_id":"clgbycqcr0002s8ob1ym92rhv","_id":"clgelnnse0003rgobcwd161ag"},{"post_id":"clgeng1v90000vwobec6993p8","category_id":"clgbycqcr0002s8ob1ym92rhv","_id":"clgeng1vc0002vwob9f0m5p3l"},{"post_id":"clgge3wmz0000u0oba2qu86og","category_id":"clgbycqcr0002s8ob1ym92rhv","_id":"clgge3wn20002u0ob6lgv7pn8"}],"PostTag":[{"post_id":"clgbv7k4o00018cob88lof603","tag_id":"clgbv7k4u00048cobd5kgce2l","_id":"clgbv7k4w00088cob32qgehla"},{"post_id":"clgelnnse0002rgob33xj3z9r","tag_id":"clgem4vua0004rgob32sbbs7t","_id":"clgem4vub0005rgob6ytt9z3q"},{"post_id":"clgeng1v90000vwobec6993p8","tag_id":"clgem4vua0004rgob32sbbs7t","_id":"clgeng1vc0001vwob10971og9"},{"post_id":"clgge3wmz0000u0oba2qu86og","tag_id":"clgem4vua0004rgob32sbbs7t","_id":"clgge3wn20001u0obc0uc3hcm"}],"Tag":[{"name":"读书","_id":"clgbv7k4u00048cobd5kgce2l"},{"name":"嵌入式","_id":"clgem4vua0004rgob32sbbs7t"}]}}